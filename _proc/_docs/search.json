[
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "Github",
    "section": "",
    "text": "ssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n\n\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n\n\n\n\n\n\nssh -T git@github.com",
    "crumbs": [
      "Blog",
      "Github"
    ]
  },
  {
    "objectID": "github.html#inital-connection",
    "href": "github.html#inital-connection",
    "title": "Github",
    "section": "",
    "text": "ssh-keygen -t ed25519 -C \"your_email@example.com\"\n\n\n\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_ed25519\n\n\n\n\n\n\nssh -T git@github.com",
    "crumbs": [
      "Blog",
      "Github"
    ]
  },
  {
    "objectID": "github.html#automation",
    "href": "github.html#automation",
    "title": "Github",
    "section": "Automation",
    "text": "Automation\n\nQuickstart\nFor GitHub to discover any GitHub Actions workflows in your repository, you must save the workflow files in a directory called .github/workflows.\nYou can give the workflow file any name you like, but you must use .yml or .yaml as the file name extension. YAML is a markup language that‚Äôs commonly used for configuration files.\nCreate .github/workflows/actions.yml\nname: GitHub Actions Demo\nrun-name: ${{ github.actor }} is testing out GitHub Actions üöÄ\non: [push]\njobs:\n  Explore-GitHub-Actions:\n    runs-on: ubuntu-latest\n    steps:\n      - run: echo \"üéâ The job was automatically triggered by a ${{ github.event_name }} event.\"\n      - run: echo \"üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!\"\n      - run: echo \"üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.\"\n      - name: Check out repository code\n        uses: actions/checkout@v4\n      - run: echo \"üí° The ${{ github.repository }} repository has been cloned to the runner.\"\n      - run: echo \"üñ•Ô∏è The workflow is now ready to test your code on the runner.\"\n      - name: List files in the repository\n        run: |\n          ls ${{ github.workspace }}\n      - run: echo \"üçè This job's status is ${{ job.status }}.\"\n\n\nOverview\nGitHub Actions is a continuous integration and continuous delivery (CI/CD) platform that allows you to automate your build, test, and deployment pipeline. You can create workflows that build and test every pull request to your repository, or deploy merged pull requests to production.\nGitHub Actions goes beyond just DevOps and lets you run workflows when other events happen in your repository. For example, you can run a workflow to automatically add the appropriate labels whenever someone creates a new issue in your repository.\nGitHub provides Linux, Windows, and macOS virtual machines to run your workflows, or you can host your own self-hosted runners in your own data center or cloud infrastructure.\n\n\nEvents\n\nAn event is a specific activity in a repository that triggers a workflow run. For example, an activity can originate from GitHub when someone creates a pull request, opens an issue, or pushes a commit to a repository. You can also trigger a workflow to run on a schedule, by posting to a REST API, or manually.\n\n\n\nJobs\n\nA workflow run is made up of one or more jobs, which run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs..needs keyword.\n\njobs:\n  my_first_job:\n    name: My first job\n  my_second_job:\n    name: My second job\n\n\nActions\nAn action is a custom application for the GitHub Actions platform that performs a complex but frequently repeated task. Use an action to help reduce the amount of repetitive code that you write in your workflow files. An action can pull your git repository from GitHub, set up the correct toolchain for your build environment, or set up the authentication to your cloud provider.\n\n\nRunners\nA runner is a server that runs your workflows when they‚Äôre triggered. Each runner can run a single job at a time.\n# Optional - The name of the workflow as it will appear in the \"Actions\" tab of the GitHub repository. If this field is omitted, the name of the workflow file will be used instead.\nname: learn-github-actions\n\n# Optional - The name for workflow runs generated from the workflow, which will appear in the list of workflow runs on your repository's \"Actions\" tab. This example uses an expression with the `github` context to display the username of the actor that triggered the workflow run. For more information, see \"[AUTOTITLE](/actions/using-workflows/workflow-syntax-for-github-actions#run-name).\"\nrun-name: ${{ github.actor }} is learning GitHub Actions\n\n# Specifies the trigger for this workflow. This example uses the `push` event, so a workflow run is triggered every time someone pushes a change to the repository or merges a pull request.  This is triggered by a push to every branch; for examples of syntax that runs only on pushes to specific branches, paths, or tags, see \"[AUTOTITLE](/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore).\"\non: [push]\n\n# Groups together all the jobs that run in the `learn-github-actions` workflow.\njobs:\n\n# Defines a job named `check-bats-version`. The child keys will define properties of the job.\n  check-bats-version:\n\n# Configures the job to run on the latest version of an Ubuntu Linux runner. This means that the job will execute on a fresh virtual machine hosted by GitHub. For syntax examples using other runners, see \"[AUTOTITLE](/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\"\n    runs-on: ubuntu-latest\n\n# Groups together all the steps that run in the `check-bats-version` job. Each item nested under this section is a separate action or shell script.\n    steps:\n\n# The `uses` keyword specifies that this step will run `v4` of the `actions/checkout` action. This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools). You should use the checkout action any time your workflow will use the repository's code.\n      - uses: actions/checkout@v4\n\n# This step uses the `actions/setup-node@v4` action to install the specified version of the Node.js. (This example uses version 20.) This puts both the `node` and `npm` commands in your `PATH`.\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n\n# The `run` keyword tells the job to execute a command on the runner. In this case, you are using `npm` to install the `bats` software testing package.\n      - run: npm install -g bats\n\n# Finally, you'll run the `bats` command with a parameter that outputs the software version.\n      - run: bats -v\n\n!cat ../.github/workflows/deploy.yaml\n\nname: Deploy to GitHub Pages\n\npermissions:\n  contents: write\n  pages: write\n\non:\n  push:\n    branches: [ \"main\", \"master\" ]\n  workflow_dispatch:\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps: [uses: fastai/workflows/quarto-ghp@master]\n\n\n\n!cat ../.github/workflows/test.yaml\n\nname: CI\non:  [workflow_dispatch, pull_request, push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps: [uses: fastai/workflows/nbdev-ci@master]",
    "crumbs": [
      "Blog",
      "Github"
    ]
  },
  {
    "objectID": "github.html#cli",
    "href": "github.html#cli",
    "title": "Github",
    "section": "CLI",
    "text": "CLI\n\n!gh\n\nWork seamlessly with GitHub from the command line.\n\nUSAGE\n  gh &lt;command&gt; &lt;subcommand&gt; [flags]\n\nCORE COMMANDS\n  auth:        Authenticate gh and git with GitHub\n  browse:      Open the repository in the browser\n  codespace:   Connect to and manage codespaces\n  gist:        Manage gists\n  issue:       Manage issues\n  org:         Manage organizations\n  pr:          Manage pull requests\n  project:     Work with GitHub Projects.\n  release:     Manage releases\n  repo:        Manage repositories\n\nGITHUB ACTIONS COMMANDS\n  cache:       Manage GitHub Actions caches\n  run:         View details about workflow runs\n  workflow:    View details about GitHub Actions workflows\n\nALIAS COMMANDS\n  co:          Alias for \"pr checkout\"\n\nADDITIONAL COMMANDS\n  alias:       Create command shortcuts\n  api:         Make an authenticated GitHub API request\n  attestation: Work with artifact attestations\n  completion:  Generate shell completion scripts\n  config:      Manage configuration for gh\n  extension:   Manage gh extensions\n  gpg-key:     Manage GPG keys\n  label:       Manage labels\n  ruleset:     View info about repo rulesets\n  search:      Search for repositories, issues, and pull requests\n  secret:      Manage GitHub secrets\n  ssh-key:     Manage SSH keys\n  status:      Print information about relevant issues, pull requests, and notifications across repositories\n  variable:    Manage GitHub Actions variables\n\nHELP TOPICS\n  actions:     Learn about working with GitHub Actions\n  environment: Environment variables that can be used with gh\n  exit-codes:  Exit codes used by gh\n  formatting:  Formatting options for JSON data exported from gh\n  mintty:      Information about using gh with MinTTY\n  reference:   A comprehensive reference of all gh commands\n\nFLAGS\n  --help      Show help for command\n  --version   Show gh version\n\nEXAMPLES\n  $ gh issue create\n  $ gh repo clone cli/cli\n  $ gh pr checkout 321\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\nAuthentication\n\nOnly if needed\n\n\n!gh auth\n\nAuthenticate gh and git with GitHub\n\nUSAGE\n  gh auth &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  login:       Log in to a GitHub account\n  logout:      Log out of a GitHub account\n  refresh:     Refresh stored authentication credentials\n  setup-git:   Setup git with GitHub CLI\n  status:      Display active account and authentication state on each known GitHub host\n  switch:      Switch active GitHub account\n  token:       Print the authentication token gh uses for a hostname and account\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\nUseful commands\n\ngh auth login\n\n!gh auth status\n\ngithub.com\n  ‚úì Logged in to github.com account bthek1 (GITHUB_TOKEN)\n  - Active account: true\n  - Git operations protocol: https\n  - Token: ghp_************************************\n  - Token scopes: 'admin:enterprise', 'admin:gpg_key', 'admin:org', 'admin:org_hook', 'admin:public_key', 'admin:repo_hook', 'admin:ssh_signing_key', 'audit_log', 'codespace', 'copilot', 'delete:packages', 'delete_repo', 'gist', 'notifications', 'project', 'repo', 'user', 'workflow', 'write:discussion', 'write:packages'\n\n\n\n\nAlias\n\n!gh help alias set\n\nDefine a word that will expand to a full gh command when invoked.\n\nThe expansion may specify additional arguments and flags. If the expansion includes\npositional placeholders such as `$1`, extra arguments that follow the alias will be\ninserted appropriately. Otherwise, extra arguments will be appended to the expanded\ncommand.\n\nUse `-` as expansion argument to read the expansion string from standard input. This\nis useful to avoid quoting issues when defining expansions.\n\nIf the expansion starts with `!` or if `--shell` was given, the expansion is a shell\nexpression that will be evaluated through the `sh` interpreter when the alias is\ninvoked. This allows for chaining multiple commands via piping and redirection.\n\n\nUSAGE\n  gh alias set &lt;alias&gt; &lt;expansion&gt; [flags]\n\nFLAGS\n      --clobber   Overwrite existing aliases of the same name\n  -s, --shell     Declare an alias to be passed through a shell interpreter\n\nINHERITED FLAGS\n  --help   Show help for command\n\nEXAMPLES\n  # note: Command Prompt on Windows requires using double quotes for arguments\n  $ gh alias set pv 'pr view'\n  $ gh pv -w 123  #=&gt; gh pr view -w 123\n  \n  $ gh alias set bugs 'issue list --label=bugs'\n  $ gh bugs\n  \n  $ gh alias set homework 'issue list --assignee @me'\n  $ gh homework\n  \n  $ gh alias set 'issue mine' 'issue list --mention @me'\n  $ gh issue mine\n  \n  $ gh alias set epicsBy 'issue list --author=\"$1\" --label=\"epic\"'\n  $ gh epicsBy vilmibm  #=&gt; gh issue list --author=\"vilmibm\" --label=\"epic\"\n  \n  $ gh alias set --shell igrep 'gh issue list --label=\"$1\" | grep \"$2\"'\n  $ gh igrep epic foo  #=&gt; gh issue list --label=\"epic\" | grep \"foo\"\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh alias list\n\nco: pr checkout\n\n\n\n\nRepos\n\n!gh repo\n\nWork with GitHub repositories.\n\nUSAGE\n  gh repo &lt;command&gt; [flags]\n\nGENERAL COMMANDS\n  create:      Create a new repository\n  list:        List repositories owned by user or organization\n\nTARGETED COMMANDS\n  archive:     Archive a repository\n  clone:       Clone a repository locally\n  delete:      Delete a repository\n  deploy-key:  Manage deploy keys in a repository\n  edit:        Edit repository settings\n  fork:        Create a fork of a repository\n  rename:      Rename a repository\n  set-default: Configure default repository for this directory\n  sync:        Sync a repository\n  unarchive:   Unarchive a repository\n  view:        View a repository\n\nINHERITED FLAGS\n  --help   Show help for command\n\nARGUMENTS\n  A repository can be supplied as an argument in any of the following formats:\n  - \"OWNER/REPO\"\n  - by URL, e.g. \"https://github.com/OWNER/REPO\"\n\nEXAMPLES\n  $ gh repo create\n  $ gh repo clone cli/cli\n  $ gh repo view --web\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\nCreating a Repository\ngh repo create my-new-repo\n\nExample\n\ngh repo create test_gh --public --add-readme --description \"Github CLI Testing\"\n\n\nList Repos\n\n!gh repo list -L 10\n\n\nShowing 10 of 47 repositories in @bthek1\n\nNAME                   DESCRIPTION              INFO          UPDATED           \nbthek1/WEB_doc         webdevelopment_doc       public        about 16 hours ago\nbthek1/githubAuto      Testing github Autom...  public        about 17 hours ago\nbthek1/keybr.com       The smartest way to ...  public, fork  about 18 hours ago\nbthek1/Dotfiles        Dotfiles                 private       about 18 hours ago\nbthek1/Business_doc                             private       about 21 hours ago\nbthek1/DL_methods      Deep Learning models...  public        about 1 day ago\nbthek1/Python_Libs     Usefull libraries fo...  public        about 2 days ago\nbthek1/Resume          latex resume             private       about 2 days ago\nbthek1/Philosophy_doc                           private       about 2 days ago\nbthek1/B_Blog          Personal Blog            public        about 2 days ago\n\n\n\n\nDelete a Repo\ngh repo delete &lt;name&gt;\n\n!gh repo deploy-key list\n\nno deploy keys found in bthek1/WEB_doc\n\n\n\n\n\nRelease\n\n!gh release\n\nManage releases\n\nUSAGE\n  gh release &lt;command&gt; [flags]\n\nGENERAL COMMANDS\n  create:      Create a new release\n  list:        List releases in a repository\n\nTARGETED COMMANDS\n  delete:      Delete a release\n  delete-asset: Delete an asset from a release\n  download:    Download release assets\n  edit:        Edit a release\n  upload:      Upload assets to a release\n  view:        View information about a release\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\nCreate Release\ngh repo create\n\n\nList Releases\n\n!gh release list\n\nTITLE               TYPE         TAG NAME      PUBLISHED          \ntest_release_title  Pre-release  test_release  about 6 minutes ago\n\n\n\n\nView Release\ngh release view [&lt;tag&gt;] [flags]\n\n!gh release view test_release\n\n11;?test_release\nPre-release ‚Ä¢ bthek1 released this about 7 minutes ago\n\n  test release notes                                                          \n\n\nView on GitHub: https://github.com/bthek1/WEB_doc/releases/tag/test_release\n\n\n\n\n\nCodespaces\n\n!gh codespace\n\nConnect to and manage codespaces\n\nUSAGE\n  gh codespace [flags]\n\nALIASES\n  gh cs\n\nAVAILABLE COMMANDS\n  code:        Open a codespace in Visual Studio Code\n  cp:          Copy files between local and remote file systems\n  create:      Create a codespace\n  delete:      Delete codespaces\n  edit:        Edit a codespace\n  jupyter:     Open a codespace in JupyterLab\n  list:        List codespaces\n  logs:        Access codespace logs\n  ports:       List ports in a codespace\n  rebuild:     Rebuild a codespace\n  ssh:         SSH into a codespace\n  stop:        Stop a running codespace\n  view:        View details about a codespace\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n\nExtensions\n\n!gh extension\n\nGitHub CLI extensions are repositories that provide additional gh commands.\n\nThe name of the extension repository must start with `gh-` and it must contain an\nexecutable of the same name. All arguments passed to the `gh &lt;extname&gt;` invocation\nwill be forwarded to the `gh-&lt;extname&gt;` executable of the extension.\n\nAn extension cannot override any of the core gh commands. If an extension name conflicts\nwith a core gh command, you can use `gh extension exec &lt;extname&gt;`.\n\nFor the list of available extensions, see &lt;https://github.com/topics/gh-extension&gt;.\n\n\nUSAGE\n  gh extension [flags]\n\nALIASES\n  gh extensions, gh ext\n\nAVAILABLE COMMANDS\n  browse:      Enter a UI for browsing, adding, and removing extensions\n  create:      Create a new extension\n  exec:        Execute an installed extension\n  install:     Install a gh extension from a repository\n  list:        List installed extension commands\n  remove:      Remove an installed extension\n  search:      Search extensions to the GitHub CLI\n  upgrade:     Upgrade installed extensions\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh extension list\n\nno installed extensions found\n\n\n\n\ngpg-key\n\n!gh gpg-key\n\nManage GPG keys registered with your GitHub account.\n\nUSAGE\n  gh gpg-key &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  add:         Add a GPG key to your GitHub account\n  delete:      Delete a GPG key from your GitHub account\n  list:        Lists GPG keys in your GitHub account\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n\nLabel\n\n!gh label\n\nWork with GitHub labels.\n\nUSAGE\n  gh label &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  clone:       Clones labels from one repository to another\n  create:      Create a new label\n  delete:      Delete a label from a repository\n  edit:        Edit a label\n  list:        List labels in a repository\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh label list\n\n6m‚¢ø\nShowing 9 of 9 labels in bthek1/WEB_doc\n\nNAME              DESCRIPTION                                 COLOR  \nbug               Something isn't working                     #d73a4a\ndocumentation     Improvements or additions to documentation  #0075ca\nduplicate         This issue or pull request already exists   #cfd3d7\nenhancement       New feature or request                      #a2eeef\ngood first issue  Good for newcomers                          #7057ff\nhelp wanted       Extra attention is needed                   #008672\ninvalid           This doesn't seem right                     #e4e669\nquestion          Further information is requested            #d876e3\nwontfix           This will not be worked on                  #ffffff\n\n\n\n\nOrganisation\n\n!gh org\n\nWork with GitHub organizations.\n\nUSAGE\n  gh org &lt;command&gt; [flags]\n\nGENERAL COMMANDS\n  list:        List organizations for the authenticated user.\n\nINHERITED FLAGS\n  --help   Show help for command\n\nEXAMPLES\n  $ gh org list\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh org list\n\n\nShowing 2 of 2 organizations\n\nLaser-org\nRecovery-Mertics\n\n\n\n\nProjects\n\n!gh project\n\nWork with GitHub Projects. Note that the token you are using must have 'project' scope, which is not set by default. You can verify your token scope by running 'gh auth status' and add the project scope by running 'gh auth refresh -s project'.\n\nUSAGE\n  gh project &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  close:       Close a project\n  copy:        Copy a project\n  create:      Create a project\n  delete:      Delete a project\n  edit:        Edit a project\n  field-create: Create a field in a project\n  field-delete: Delete a field in a project\n  field-list:  List the fields in a project\n  item-add:    Add a pull request or an issue to a project\n  item-archive: Archive an item in a project\n  item-create: Create a draft issue item in a project\n  item-delete: Delete an item from a project by ID\n  item-edit:   Edit an item in a project\n  item-list:   List the items in a project\n  link:        Link a project to a repository or a team\n  list:        List the projects for an owner\n  mark-template: Mark a project as a template\n  unlink:      Unlink a project from a repository or a team\n  view:        View a project\n\nINHERITED FLAGS\n  --help   Show help for command\n\nEXAMPLES\n  $ gh project create --owner monalisa --title \"Roadmap\"\n  $ gh project view 1 --owner cli --web\n  $ gh project field-list 1 --owner cli\n  $ gh project item-list 1 --owner cli\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh project list\n\nNUMBER  TITLE     STATE  ID                  \n8       Schedule  open   PVT_kwHOBNe82M4AgAdx\n\n\n\n!gh project field-list 8 --owner \"@me\"\n\nNAME                  DATA TYPE                   ID                            \nTitle                 ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNpz0\nAssignees             ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNpz4\nStatus                ProjectV2SingleSelectField  PVTSSF_lAHOBNe82M4AgAdxzgVNpz8\nLabels                ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0A\nLinked pull requests  ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0E\nMilestone             ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0I\nRepository            ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0M\nReviewers             ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0Y\ndate                  ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0k\nend date              ProjectV2Field              PVTF_lAHOBNe82M4AgAdxzgVNp0o\nPriority              ProjectV2SingleSelectField  PVTSSF_lAHOBNe82M4AgAdxzgVNp0w\nDifficulty            ProjectV2SingleSelectField  PVTSSF_lAHOBNe82M4AgAdxzgVNp00\nIteration             ProjectV2IterationField     PVTIF_lAHOBNe82M4AgAdxzgVNxEY\n\n\n\n!gh project item-list 8 --owner \"@me\"\n\nTYPE   TITLE              NUMBER  REPOSITORY        ID                          \nIssue  state manageme...  12      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMt94\nIssue  provide link t...  22      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBI\nIssue  persisting use...  21      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBQ\nIssue  login via Goog...  20      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBU\nIssue  dynamic action...  19      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBY\nIssue  notifications ...  18      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBc\nIssue  login via phis...  17      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBg\nIssue  Django             7       bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuCE\nIssue  React              8       bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuB8\nIssue  Oracle: deploy...  6       bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuB0\nIssue  navigation (do...  14      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBs\nIssue  connecting to ...  13      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBw\nIssue  3D vision          11      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuB4\nIssue  DRF                28      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgQf6rg\nIssue  DjangoX            29      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgQf9Lo\nIssue  nookal             30      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgQf9L8\nIssue  json serializa...  15      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBo\nIssue  displaying a c...  16      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMuBk\nIssue  Random forward...  2       bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgOMvTc\nIssue  github automation  26      bthek1/WEB_doc    PVTI_lAHOBNe82M4AgAdxzgOMx7c\nIssue  Image classifi...  18      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE1cc\nIssue  Image mulit cl...  19      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE1ew\nIssue  object detecti...  20      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE1hk\nIssue  semantic segme...  21      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE1zc\nIssue  instance segme...  22      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE12c\nIssue  panoptic segme...  23      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE18Y\nIssue  Ideas - model ...  24      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE1-8\nIssue  ideas - image ...  25      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE2BI\nIssue  random propaga...  26      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE2Cg\nIssue  do one kaggle ...  27      bthek1/DL_met...  PVTI_lAHOBNe82M4AgAdxzgPE3BM\n\n\n\n\nIssue\n\n!gh issue\n\nWork with GitHub issues.\n\nUSAGE\n  gh issue &lt;command&gt; [flags]\n\nGENERAL COMMANDS\n  create:      Create a new issue\n  list:        List issues in a repository\n  status:      Show status of relevant issues\n\nTARGETED COMMANDS\n  close:       Close issue\n  comment:     Add a comment to an issue\n  delete:      Delete issue\n  develop:     Manage linked branches for an issue\n  edit:        Edit issues\n  lock:        Lock issue conversation\n  pin:         Pin a issue\n  reopen:      Reopen issue\n  transfer:    Transfer issue to another repository\n  unlock:      Unlock issue conversation\n  unpin:       Unpin a issue\n  view:        View an issue\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nARGUMENTS\n  An issue can be supplied as argument in any of the following formats:\n  - by number, e.g. \"123\"; or\n  - by URL, e.g. \"https://github.com/OWNER/REPO/issues/123\".\n\nEXAMPLES\n  $ gh issue list\n  $ gh issue create --label bug\n  $ gh issue view 123 --web\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh issue list\n\n\nShowing 17 of 17 open issues in bthek1/WEB_doc\n\nID   TITLE                                            LABELS  UPDATED           \n#30  nookal                                                   about 11 days ago\n#29  DjangoX                                                  about 11 days ago\n#28  DRF                                                      about 11 days ago\n#22  provide link to external website (analytics....          about 4 months ago\n#21  persisting user settings (built-in?)                     about 4 months ago\n#20  login via Google (todo), done in Django, the...          about 4 months ago\n#19  dynamic actions in chart: e.g change time range          about 4 months ago\n#18  notifications (todo) - poll a REST API (todo...          about 4 months ago\n#17  login via phisaver REST API (done)                       about 4 months ago\n#16  displaying a chart - fl_chart (done)                     about 4 months ago\n#15  json serialization / deserialisation (done)              about 4 months ago\n#14  navigation (done), forget the name of framew...          about 4 months ago\n#13  connecting to a REST API (done)                          about 4 months ago\n#12  state management: riverpod (done)                        about 4 months ago\n#11  3D vision                                                about 6 months ago\n#8   React                                                    about 6 months ago\n#6   Oracle: deploy server website and server                 about 4 months ago\n\n\n\n!gh issue view 28\n\ngithub automation bthek1/WEB_doc#26\nOpen ‚Ä¢ bthek1 opened about 2 months ago ‚Ä¢ 0 comments\n\n\n  No description provided\n\n\nView this issue on GitHub: https://github.com/bthek1/WEB_doc/issues/26\n\n\n\n!gh issue edit 28 --add-label \"enhancement\"\n\nhttps://github.com/bthek1/WEB_doc/issues/265h\n\n\n\n!gh issue close 26\n\n! Issue bthek1/WEB_doc#26 (github automation) is already closed\n\n\n\n\nPull Request\n\n!gh pr\n\nWork with GitHub pull requests.\n\nUSAGE\n  gh pr &lt;command&gt; [flags]\n\nGENERAL COMMANDS\n  create:      Create a pull request\n  list:        List pull requests in a repository\n  status:      Show status of relevant pull requests\n\nTARGETED COMMANDS\n  checkout:    Check out a pull request in git\n  checks:      Show CI status for a single pull request\n  close:       Close a pull request\n  comment:     Add a comment to a pull request\n  diff:        View changes in a pull request\n  edit:        Edit a pull request\n  lock:        Lock pull request conversation\n  merge:       Merge a pull request\n  ready:       Mark a pull request as ready for review\n  reopen:      Reopen a pull request\n  review:      Add a review to a pull request\n  unlock:      Unlock pull request conversation\n  view:        View a pull request\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nARGUMENTS\n  A pull request can be supplied as argument in any of the following formats:\n  - by number, e.g. \"123\";\n  - by URL, e.g. \"https://github.com/OWNER/REPO/pull/123\"; or\n  - by the name of its head branch, e.g. \"patch-1\" or \"OWNER:patch-1\".\n\nEXAMPLES\n  $ gh pr checkout 353\n  $ gh pr create --fill\n  $ gh pr view --web\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n\nWorkflows\n\n!gh workflow\n\nList, view, and run workflows in GitHub Actions.\n\nUSAGE\n  gh workflow &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  disable:     Disable a workflow\n  enable:      Enable a workflow\n  list:        List workflows\n  run:         Run a workflow by creating a workflow_dispatch event\n  view:        View the summary of a workflow\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh workflow list\n\nNAME                    STATE   ID      \nDeploy to GitHub Pages  active  75582852\nCI                      active  75582853\npages-build-deployment  active  75583140\n\n\n\n\nRuns\n\n!gh run\n\nList, view, and watch recent workflow runs from GitHub Actions.\n\nUSAGE\n  gh run &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  cancel:      Cancel a workflow run\n  delete:      Delete a workflow run\n  download:    Download artifacts generated by a workflow run\n  list:        List recent workflow runs\n  rerun:       Rerun a run\n  view:        View a summary of a workflow run\n  watch:       Watch a run until it completes, showing its progress\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh run list\n\nSTATUS  TITLE       WORKFLOW   BRANCH     EVENT    ID         ELAPSED  AGE      \n‚úì       pages b...  pages-...  gh-pages   dynamic  986951...  27s      about ...\n‚úì       D  _pro...  CI         main       push     986950...  2m44s    about ...\n‚úì       D  _pro...  Deploy...  main       push     986950...  3m19s    about ...\n‚úì       R  nbs/...  CI         test_r...  push     986910...  32s      about ...\n‚úì       pages b...  pages-...  gh-pages   dynamic  985771...  29s      about ...\n‚úì       R  nbs/...  Deploy...  main       push     985769...  3m37s    about ...\n‚úì       R  nbs/...  CI         main       push     985769...  3m0s     about ...\n‚úì       pages b...  pages-...  gh-pages   dynamic  980833...  21s      about ...\n‚úì       M  nbs/...  CI         main       push     980831...  2m45s    about ...\n‚úì       M  nbs/...  Deploy...  main       push     980831...  3m27s    about ...\n‚úì       pages b...  pages-...  gh-pages   dynamic  980335...  23s      about ...\n‚úì       R  nbs/...  CI         main       push     980334...  2m50s    about ...\n‚úì       R  nbs/...  Deploy...  main       push     980334...  3m30s    about ...\n‚úì       pages b...  pages-...  gh-pages   dynamic  979506...  24s      about ...\n‚úì       A  nbs/...  Deploy...  main       push     979505...  3m14s    about ...\n‚úì       A  nbs/...  CI         main       push     979505...  2m53s    about ...\n‚úì       pages b...  pages-...  gh-pages   dynamic  979453...  32s      about ...\n‚úì       A  nbs/...  CI         main       push     979452...  2m44s    about ...\n‚úì       A  nbs/...  Deploy...  main       push     979452...  3m16s    about ...\n‚úì       pages b...  pages-...  gh-pages   dynamic  979437...  23s      about ...\n\n\n\n\nSearch\n\n!gh search\n\nSearch across all of GitHub.\n\nUSAGE\n  gh search &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  code:        Search within code\n  commits:     Search for commits\n  issues:      Search for issues\n  prs:         Search for pull requests\n  repos:       Search for repositories\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh search issues --owner bthek1\n\n6m‚°ø\nShowing 30 of 121 issues\n\nREPO                ID   TITLE                         LABELS  UPDATED          \nbthek1/WEB_doc      #30  nookal                                about 11 days ago\nbthek1/WEB_doc      #29  DjangoX                               about 11 days ago\nbthek1/WEB_doc      #28  DRF                                   about 11 days ago\nbthek1/nbdevAuto    #2   git status                            about 11 days ago\nbthek1/nbdevAuto    #1   update gacp                           about 11 days ago\nbthek1/ML_methods   #15  Gaussian models                       about 28 days ago\nbthek1/ML_methods   #14  Kernel Ridge regression               about 28 days ago\nbthek1/ML_methods   #13  Bayesian models                       about 28 days ago\nbthek1/Python_Libs  #20  bash scripts                          about 1 month ago\nbthek1/DL_methods   #31  captum                                about 1 month ago\nbthek1/Python_Libs  #19  timm                                  about 22 days ago\nbthek1/Python_Libs  #18  kaggle                                about 22 days ago\nbthek1/Python_Libs  #17  mermaid                               about 22 days ago\nbthek1/Python_Libs  #16  graphviz                              about 22 days ago\nbthek1/DL_methods   #30  create repo of model                  about 4 days ago\nbthek1/DL_methods   #29  ideas - sine wave initali...          about 1 month ago\nbthek1/DL_methods   #28  andrew ng                             about 1 month ago\nbthek1/DL_methods   #27  do one kaggle competition             about 1 month ago\nbthek1/DL_methods   #26  random propagation                    about 1 month ago\nbthek1/DL_methods   #25  ideas - image classificat...          about 1 month ago\nbthek1/DL_methods   #24  Ideas - model looper                  about 1 month ago\nbthek1/DL_methods   #23  panoptic segmentation dee...          about 1 month ago\nbthek1/DL_methods   #22  instance segmentation dee...          about 1 month ago\nbthek1/DL_methods   #21  semantic segmentation dee...          about 1 month ago\nbthek1/DL_methods   #20  object detection deep div...          about 1 month ago\nbthek1/DL_methods   #19  Image mulit classificatio...          about 1 month ago\nbthek1/DL_methods   #18  Image classification deep...          about 1 month ago\nbthek1/DL_methods   #17  move thesis pages to reit...          about 22 days ago\nbthek1/WEB_doc      #27  github automation                     about 22 days ago\nbthek1/Python_Libs  #15  roboflow                              about 1 month ago\n\n\n\n\nSecret\n\n!gh secret\n\nSecrets can be set at the repository, or organization level for use in\nGitHub Actions or Dependabot. User, organization, and repository secrets can be set for\nuse in GitHub Codespaces. Environment secrets can be set for use in\nGitHub Actions. Run `gh help secret set` to learn how to get started.\n\n\nUSAGE\n  gh secret &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  delete:      Delete secrets\n  list:        List secrets\n  set:         Create or update secrets\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh secret list\n\nNAME         UPDATED          \nTEST_SECRET  about 12 days ago\n\n\n\n\nSSH-KEY\n\n!gh ssh-key\n\nManage SSH keys registered with your GitHub account.\n\nUSAGE\n  gh ssh-key &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  add:         Add an SSH key to your GitHub account\n  delete:      Delete an SSH key from your GitHub account\n  list:        Lists SSH keys in your GitHub account\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh ssh-key list\n\nTITLE         ID        KEY                    TYPE            ADDED            \nthekkel       91043211  ssh-ed255...r/x2XqozE  authentication  about 7 months...\nnew_main      92029161  ssh-ed255...gm+IHN+ix  authentication  about 6 months...\nlinux laptop  92203051  ssh-ed255...U7UtGrWSr  authentication  about 6 months...\noracle        97589482  ssh-ed255...GQaF1/TAK  authentication  about 3 months...\n\n\n\n\nStatus\n\n!gh status\n\nAssigned Issues                       ‚îÇ Assigned Pull Requests                \nbthek1/flutter_test#2  Webdevelopment ‚îÇ Nothing here ^_^                      \nbthek1/flutter_test#1  App development‚îÇ                                       \n                                      ‚îÇ                                       \nReview Requests                       ‚îÇ Mentions                              \nNothing here ^_^                      ‚îÇ Nothing here ^_^                      \n                                      ‚îÇ                                       \nRepository Activity\nNothing here ^_^\n\n\n\n\n\nVariable\n\n!gh variable\n\nVariables can be set at the repository, environment or organization level for use in\nGitHub Actions or Dependabot. Run `gh help variable set` to learn how to get started.\n \n\nUSAGE\n  gh variable &lt;command&gt; [flags]\n\nAVAILABLE COMMANDS\n  delete:      Delete variables\n  get:         Get variables\n  list:        List variables\n  set:         Create or update variables\n\nFLAGS\n  -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format\n\nINHERITED FLAGS\n  --help   Show help for command\n\nLEARN MORE\n  Use `gh &lt;command&gt; &lt;subcommand&gt; --help` for more information about a command.\n  Read the manual at https://cli.github.com/manual\n\n\n\n\n!gh variable list\n\nNAME           VALUE  UPDATED               \nTEST_VARIABLE  5      less than a minute ago",
    "crumbs": [
      "Blog",
      "Github"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html",
    "href": "Front_end/Flutter/dart.html",
    "title": "Dart",
    "section": "",
    "text": "void main() {\n  for (int i = 0; i &lt; 10; i++) {\n    print('hello ${i + 1}');\n  }\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#for-loop",
    "href": "Front_end/Flutter/dart.html#for-loop",
    "title": "Dart",
    "section": "",
    "text": "void main() {\n  for (int i = 0; i &lt; 10; i++) {\n    print('hello ${i + 1}');\n  }\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#variables",
    "href": "Front_end/Flutter/dart.html#variables",
    "title": "Dart",
    "section": "Variables",
    "text": "Variables\n\nInteger\nvoid main() {\n  int age = 30;\n  print(age);\n}\n\n\nString\nvoid main() {\n  String name = 'ben';\n  name = 'ken';\n  print(name);\n}\n\n\nBool\nvoid main() {\n  bool isNight = false;\n  print(isNight);\n}\n\n\nDynamic variable\nvoid main() {\n  dynamic name = 'ben';\n  name = 30;\n  print(name);\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#functions",
    "href": "Front_end/Flutter/dart.html#functions",
    "title": "Dart",
    "section": "Functions",
    "text": "Functions\nvoid main() {\n  String greet = greeting();\n  int age = getAge();\n  print('${greet} and age:${age}');\n}\n\nString greeting() {\n  return 'hello';\n}\n\nint getAge() {\n  return 30;\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#function-simplified",
    "href": "Front_end/Flutter/dart.html#function-simplified",
    "title": "Dart",
    "section": "Function simplified",
    "text": "Function simplified\nvoid main() {\n  String greet = greeting();\n  int age = getAge();\n  print('${greet} and age:${age}');\n}\n\nString greeting() =&gt; 'hello';\n\nint getAge() =&gt; 30;",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#list-array",
    "href": "Front_end/Flutter/dart.html#list-array",
    "title": "Dart",
    "section": "List (array)",
    "text": "List (array)\nvoid main() {\n  List&lt;String&gt; names = ['ben', 'kim', 'charlie'];\n  \n  names.add('jeff');\n  names.remove('kim');\n  \n  print(names);\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#classes",
    "href": "Front_end/Flutter/dart.html#classes",
    "title": "Dart",
    "section": "Classes",
    "text": "Classes\nvoid main() {\n  User user1 = User('ben', 25);\n  print(user1.username);\n  user1.login();\n}\n\n\nclass User {\n  late String username;\n  late int age;\n  \n  User(String name, int age){\n    this.username = name;\n    this.age = age;\n  }\n  \n  void login() {\n    print('user logged in');\n  }\n  \n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/dart.html#inheritance",
    "href": "Front_end/Flutter/dart.html#inheritance",
    "title": "Dart",
    "section": "Inheritance",
    "text": "Inheritance\nclass SuperUser extends User {\n  SuperUser(String username, int age):super(username, age);\n    \n  void publish() {\n    print('Super user ${this.username}');\n  }\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Dart"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html",
    "href": "Front_end/Flutter/widgets.html",
    "title": "App development",
    "section": "",
    "text": "To create a new Flutter app, run the following commands in your shell or Terminal.\nflutter create test_flutter\ncd test_flutter\nTo verify that you have a running target device, run the following command.\nflutter devices\n\n\n\n\n\nList devices\nflutter emulators\nLaunch devices\nflutter emulators --launch &lt;emulator id&gt;\nTo run your app, run the following command.\nflutter run",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#create-a-new-project",
    "href": "Front_end/Flutter/widgets.html#create-a-new-project",
    "title": "App development",
    "section": "",
    "text": "To create a new Flutter app, run the following commands in your shell or Terminal.\nflutter create test_flutter\ncd test_flutter\nTo verify that you have a running target device, run the following command.\nflutter devices\n\n\n\n\n\nList devices\nflutter emulators\nLaunch devices\nflutter emulators --launch &lt;emulator id&gt;\nTo run your app, run the following command.\nflutter run",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#make-changes",
    "href": "Front_end/Flutter/widgets.html#make-changes",
    "title": "App development",
    "section": "Make changes",
    "text": "Make changes\n\nOpen lib/main.dart.\nMake changes\nSave your changes.\nType r in the terminal window.",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#widget-types",
    "href": "Front_end/Flutter/widgets.html#widget-types",
    "title": "App development",
    "section": "Widget types",
    "text": "Widget types\n\nStateless widget\n\ncannot change with time\n\n\n\nStateful widget\n\ncan change with time\n\n\ninitState()\n\ncalled only when the widget is created\nSubscribe to streams or any object that could change our widget data\n\n\n\nBuild()\n\nBuilds the widget tree\nA build is triggered every time we use setState()\n\n\n\nDispose()\n\nWhen the widget/state object is removed",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#text-widget",
    "href": "Front_end/Flutter/widgets.html#text-widget",
    "title": "App development",
    "section": "Text Widget",
    "text": "Text Widget\n\nstyle\ntextAlign\noverflow\nmaxLin- etc\n\nText('Click me')",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#button-widget",
    "href": "Front_end/Flutter/widgets.html#button-widget",
    "title": "App development",
    "section": "Button Widget",
    "text": "Button Widget\n\ncolor\nelevation\ndisabledColor\nenabled\netc\n\n     body: Center(\n       child: ElevatedButton.icon(\n         onPressed: () {\n           print('You clicked me');\n         },\n         icon: const Icon(Icons.mail),\n         label: const Text('Mail me'),\n         style: ElevatedButton.styleFrom(\n           shadowColor: Colors.amber,\n         ),\n       ),\n     ),",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#row-and-column-widget",
    "href": "Front_end/Flutter/widgets.html#row-and-column-widget",
    "title": "App development",
    "section": "Row and Column Widget",
    "text": "Row and Column Widget\n    body: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        crossAxisAlignment: CrossAxisAlignment.center,\n        children: &lt;Widget&gt;[\n          Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: const &lt;Widget&gt;[\n              Text('Hello'),\n              Text('World'),\n            ],\n          ),\n          Container(\n            padding: const EdgeInsets.all(20.0),\n            color: Colors.grey[200],\n            child: const TextButton(\n              onPressed: null,\n              child: Text('Click Me'),\n            ),\n          ),\n          const ElevatedButton(\n            onPressed: null,\n            child: Text('Click Me'),\n          ),\n          const OutlinedButton(\n            onPressed: null,\n            child: Text('Click'),\n          ),\n        ],\n      ),",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#image-widget",
    "href": "Front_end/Flutter/widgets.html#image-widget",
    "title": "App development",
    "section": "Image Widget",
    "text": "Image Widget\n    body: Center(\n        child: Image.asset('assets/beach1.jpg'),\n      )",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#expanded-widget",
    "href": "Front_end/Flutter/widgets.html#expanded-widget",
    "title": "App development",
    "section": "Expanded Widget",
    "text": "Expanded Widget\n\nlife flex grid\n\n      body: Row(\n        children: &lt;Widget&gt;[\n          Expanded(\n            flex: 3,\n            child: Image.asset('assets/space1.jpg'),\n          ),\n          Expanded(\n            flex: 2,\n            child: Container(\n              padding: const EdgeInsets.all(30.0),\n              color: Colors.cyan,\n              child: Text('1'),\n            ),\n          ),\n          Expanded(\n            flex: 1,\n            child: Container(\n              padding: const EdgeInsets.all(30.0),\n              color: Colors.pink,\n              child: Text('2'),\n            ),\n          ),\n          Expanded(\n            flex: 3,\n            child: Container(\n              padding: const EdgeInsets.all(30.0),\n              color: Colors.amber,\n              child: Text('3'),\n            ),\n          ),\n        ],\n      )",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#async-functions",
    "href": "Front_end/Flutter/widgets.html#async-functions",
    "title": "App development",
    "section": "Async functions",
    "text": "Async functions\nvoid getData() async {\n    // simulate network request for a username\n    String username = await Future.delayed(Duration(seconds: 3), () {\n      return 'yoshi';\n    });\n\n    // simulate network request to get bio of the username\n    String bio = await Future.delayed(Duration(seconds: 2), () {\n      return 'vegan, musician & egg collector';\n    });\n\n    print('$username - $bio');\n  }\n  Future&lt;void&gt; getTime() async {\n    Response response = await get(\n      Uri.parse('http://worldtimeapi.org/api/timezone/$url'),\n    );\n    Map data = json.decode(response.body);\n\n    String datetime = data['datetime'];\n    String offset = data['utc_offset'].substring(1, 3);\n\n    DateTime now = DateTime.parse(datetime);\n    now = now.add(Duration(hours: int.parse(offset)));\n\n    time = now.toString();\n  }\n}",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/Flutter/widgets.html#routing",
    "href": "Front_end/Flutter/widgets.html#routing",
    "title": "App development",
    "section": "Routing",
    "text": "Routing\n      routes: {\n        '/': (context) =&gt; Loading(),\n        '/home': (context) =&gt; Home(),\n        '/location': (context) =&gt; ChooseLocation(),\n      },\n    Navigator.pushReplacementNamed(context, '/home', arguments: {\n      'location': instance.location,\n      'flag': instance.flag,\n      'time': instance.time,\n      'isDaytime': instance.isDaytime,\n    });\n    onPressed: () async {\n      dynamic result =\n          await Navigator.pushNamed(context, '/location');\n      setState(() {\n        data = {\n          'time': result['time'],\n          'location': result['location'],\n          'isDaytime': result['isDaytime'],\n          'flag': result['flag'],\n        };\n      });\n    },\n    Navigator.pop(context, {\n      'location': instance.location,\n      'flag': instance.flag,\n      'time': instance.time,\n      'isDaytime': instance.isDaytime,\n    });",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "App development"
    ]
  },
  {
    "objectID": "Front_end/grafana.html",
    "href": "Front_end/grafana.html",
    "title": "Grafana",
    "section": "",
    "text": "sudo apt-get install -y adduser libfontconfig1 musl\nwget https://dl.grafana.com/enterprise/release/grafana-enterprise_10.2.0_amd64.deb\nsudo dpkg -i grafana-enterprise_10.2.0_amd64.deb",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/grafana.html#installation",
    "href": "Front_end/grafana.html#installation",
    "title": "Grafana",
    "section": "",
    "text": "sudo apt-get install -y adduser libfontconfig1 musl\nwget https://dl.grafana.com/enterprise/release/grafana-enterprise_10.2.0_amd64.deb\nsudo dpkg -i grafana-enterprise_10.2.0_amd64.deb",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/grafana.html#to-start-grafana-server",
    "href": "Front_end/grafana.html#to-start-grafana-server",
    "title": "Grafana",
    "section": "To Start Grafana Server",
    "text": "To Start Grafana Server\nsudo systemctl start grafana-server",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/grafana.html#to-get-grafana-server-status",
    "href": "Front_end/grafana.html#to-get-grafana-server-status",
    "title": "Grafana",
    "section": "To get Grafana Server status",
    "text": "To get Grafana Server status\nsudo systemctl status grafana-server",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/grafana.html#to-stop-grafana-server",
    "href": "Front_end/grafana.html#to-stop-grafana-server",
    "title": "Grafana",
    "section": "To Stop Grafana server",
    "text": "To Stop Grafana server\nsudo systemctl stop grafana-server",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/grafana.html#localhost-port",
    "href": "Front_end/grafana.html#localhost-port",
    "title": "Grafana",
    "section": "LocalHost Port",
    "text": "LocalHost Port\nhttp://localhost:3000",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/grafana.html#first-login",
    "href": "Front_end/grafana.html#first-login",
    "title": "Grafana",
    "section": "First Login",
    "text": "First Login\nuser: admin\npass: admin\n\ntoken = 'b4bTbQgLdRCvoBZQSjaRlUh8lnslIflVDFet6VeToen4GWu-MYwHilUddyWZorKPFCSFiu1KLNSvptXcHVDzPg=='",
    "crumbs": [
      "Blog",
      "Front End",
      "Grafana"
    ]
  },
  {
    "objectID": "Front_end/fasthtml.html",
    "href": "Front_end/fasthtml.html",
    "title": "fastHTML",
    "section": "",
    "text": "pip install python-fasthtml\n\nfrom fasthtml.common import *\n\n\n# Assuming the file Front_end/app.py exists and contains some content\nfile_path = 'Front_end/app.py'\n\n# Reading and displaying the content of the file\nwith open(file_path, 'r') as file:\n    file_content = file.read()\n\n\nprint(file_content)\n\nfrom fasthtml.common import *\n\napp,rt = fast_app()\n\n\ndef NumList(i):\n    return Ul(*[Li(o) for o in range(i)])\n\n\n\n@rt('/')\ndef get(): \n    nums = NumList(5)\n    return Titled('Greeting',\n                  Div(nums, id='stuff', hx_get=\"/change\"),\n                 )\n\n@rt('/change')\ndef get(): \n    return Div(P('Change is good!'),\n               P(A('Home', href=\"/\"))\n              )\n\n\nserve()\n\n\n\nfast_app??\n\n\nSignature:\nfast_app(\n    db: Optional[str] = None,\n    render: Optional[&lt;built-in function callable&gt;] = None,\n    hdrs: Optional[tuple] = None,\n    ftrs: Optional[tuple] = None,\n    tbls: Optional[dict] = None,\n    before: Optional[tuple] = None,\n    middleware: Optional[tuple] = None,\n    live: bool = False,\n    debug: bool = False,\n    routes: Optional[tuple] = None,\n    exception_handlers: Optional[dict] = None,\n    on_startup: Optional[&lt;built-in function callable&gt;] = None,\n    on_shutdown: Optional[&lt;built-in function callable&gt;] = None,\n    lifespan: Optional[&lt;built-in function callable&gt;] = None,\n    default_hdrs=True,\n    pico: Optional[bool] = None,\n    ws_hdr: bool = False,\n    secret_key: Optional[str] = None,\n    key_fname: str = '.sesskey',\n    session_cookie: str = 'session_',\n    max_age: int = 31536000,\n    sess_path: str = '/',\n    same_site: str = 'lax',\n    sess_https_only: bool = False,\n    sess_domain: Optional[str] = None,\n    bodykw: Optional[dict] = None,\n    **kwargs,\n)\nDocstring: &lt;no docstring&gt;\nSource:   \ndef fast_app(\n        db:Optional[str]=None, # Database file name, if needed\n        render:Optional[callable]=None, # Function used to render default database class\n        hdrs:Optional[tuple]=None, # Additional FT elements to add to &lt;HEAD&gt;\n        ftrs:Optional[tuple]=None, # Additional FT elements to add to end of &lt;BODY&gt;\n        tbls:Optional[dict]=None, # Mapping from DB table names to dict table definitions\n        before:Optional[tuple]=None, # Functions to call prior to calling handler\n        middleware:Optional[tuple]=None, # Standard Starlette middleware\n        live:bool=False, # Enable live reloading\n        debug:bool=False, # Passed to Starlette, indicating if debug tracebacks should be returned on errors\n        routes:Optional[tuple]=None, # Passed to Starlette\n        exception_handlers:Optional[dict]=None, # Passed to Starlette\n        on_startup:Optional[callable]=None, # Passed to Starlette\n        on_shutdown:Optional[callable]=None, # Passed to Starlette\n        lifespan:Optional[callable]=None, # Passed to Starlette\n        default_hdrs=True, # Include default FastHTML headers such as HTMX script?\n        pico:Optional[bool]=None, # Include PicoCSS header?\n        ws_hdr:bool=False, # Include HTMX websocket extension header?\n        secret_key:Optional[str]=None, # Signing key for sessions\n        key_fname:str='.sesskey', # Session cookie signing key file name\n        session_cookie:str='session_', # Session cookie name\n        max_age:int=365*24*3600, # Session cookie expiry time\n        sess_path:str='/', # Session cookie path\n        same_site:str='lax', # Session cookie same site policy\n        sess_https_only:bool=False, # Session cookie HTTPS only?\n        sess_domain:Optional[str]=None, # Session cookie domain\n        bodykw:Optional[dict]=None,\n        **kwargs):\n    h = (picolink,) if pico or (pico is None and default_hdrs) else ()\n    if hdrs: h += tuple(hdrs)\n    app_cls = FastHTMLWithLiveReload if live else FastHTML\n    app = app_cls(hdrs=h, ftrs=ftrs, before=before, middleware=middleware, debug=debug, routes=routes, exception_handlers=exception_handlers,\n                  on_startup=on_startup, on_shutdown=on_shutdown, lifespan=lifespan, default_hdrs=default_hdrs, secret_key=secret_key,\n                  session_cookie=session_cookie, max_age=max_age, sess_path=sess_path, same_site=same_site, sess_https_only=sess_https_only,\n                  sess_domain=sess_domain, key_fname=key_fname, ws_hdr=ws_hdr, **(bodykw or {}))\n    @app.route(\"/{fname:path}.{ext:static}\")\n    async def get(fname:str, ext:str): return FileResponse(f'{fname}.{ext}')\n    if not db: return app,app.route\n    db = database(db)\n    if not tbls: tbls={}\n    if kwargs:\n        if isinstance(first(kwargs.values()), dict): tbls = kwargs\n        else:\n            kwargs['render'] = render\n            tbls['items'] = kwargs\n    dbtbls = [get_tbl(db.t, k, v) for k,v in tbls.items()]\n    if len(dbtbls)==1: dbtbls=dbtbls[0]\n    return app,app.route,*dbtbls\nFile:      ~/miniconda3/envs/pfast/lib/python3.12/site-packages/fasthtml/fastapp.py\nType:      function\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Front End",
      "fastHTML"
    ]
  },
  {
    "objectID": "Front_end/React/node.html",
    "href": "Front_end/React/node.html",
    "title": "Node",
    "section": "",
    "text": "If you have root access, you can omit the ‚Äòsudo‚Äô command as you already have full administrative privileges.\n\n\n\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n\n\n\nNODE_MAJOR=20\necho \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list\n\nOptional: NODE_MAJOR can be changed depending on the version you need.\nNODE_MAJOR=16\nNODE_MAJOR=18\nNODE_MAJOR=20\nNODE_MAJOR=21\n\n\n\n\nsudo apt-get update\nsudo apt-get install nodejs -y",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "Node"
    ]
  },
  {
    "objectID": "Front_end/React/node.html#installation-instructions-node.js",
    "href": "Front_end/React/node.html#installation-instructions-node.js",
    "title": "Node",
    "section": "",
    "text": "If you have root access, you can omit the ‚Äòsudo‚Äô command as you already have full administrative privileges.\n\n\n\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n\n\n\nNODE_MAJOR=20\necho \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list\n\nOptional: NODE_MAJOR can be changed depending on the version you need.\nNODE_MAJOR=16\nNODE_MAJOR=18\nNODE_MAJOR=20\nNODE_MAJOR=21\n\n\n\n\nsudo apt-get update\nsudo apt-get install nodejs -y",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "Node"
    ]
  },
  {
    "objectID": "Front_end/React/node.html#uninstall-nodejs-ubuntu-debian-packages",
    "href": "Front_end/React/node.html#uninstall-nodejs-ubuntu-debian-packages",
    "title": "Node",
    "section": "Uninstall nodejs Ubuntu & Debian packages",
    "text": "Uninstall nodejs Ubuntu & Debian packages\n\nTo completely remove Node.js installed from the deb.nodesource.com package methods above:\n\n\nuse sudo on Ubuntu or run this as root on debian\n\napt-get purge nodejs &&\\\nrm -r /etc/apt/sources.list.d/nodesource.list &&\\\nrm -r /etc/apt/keyrings/nodesource.gpg",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "Node"
    ]
  },
  {
    "objectID": "docker.html",
    "href": "docker.html",
    "title": "Docker",
    "section": "",
    "text": "Dockerfile\n\nBlueprint for building a docker image\n\ncompose.yml\n\nBuilds and runs multiple docker images\n\nrequirements.txt\n\npip install libraries list\n\nImage\n\nTemplate for running a docker containers\n\nContainer\n\nRunning process",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#definitions",
    "href": "docker.html#definitions",
    "title": "Docker",
    "section": "",
    "text": "Dockerfile\n\nBlueprint for building a docker image\n\ncompose.yml\n\nBuilds and runs multiple docker images\n\nrequirements.txt\n\npip install libraries list\n\nImage\n\nTemplate for running a docker containers\n\nContainer\n\nRunning process",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#docker-file",
    "href": "docker.html#docker-file",
    "title": "Docker",
    "section": "Docker File",
    "text": "Docker File\nFILE _image_ - base image ex. ubuntu, node:12\nWORKDIR _filename_- like when you cd into a directory\nevery step from now is considered layes\nCOPY _filename_ _location_- ex. COPY package*.json ./\nRUN _npm install_ - exec commands - shell form\nCOPY . . - copy all the file in directory into the container\nENV _PORT=8080_ -\nEXPOSE _port_ - exposed port ex. 8080\nCMD [\"npm\" \"start\"] - only one of these in the file. exec form\n\nExample: pytorch image\n# Base image with PyTorch and GPU support\nFROM pytorch/pytorch:latest\n\n# Install additional packages\nRUN apt-get update && \\\n    apt-get install -y sudo software-properties-common\n\nRUN add-apt-repository -y ppa:bashtop-monitor/bashtop && \\\n    add-apt-repository -y ppa:flexiondotorg/nvtop && \\\n    apt-get update\n\nRUN apt-get install -y bashtop nvtop python3-pip \\\n    vim poppler-utils git openssh-client && \\\n    apt-get clean\n\n# Add user 'ben'\nRUN useradd -m -s /bin/bash ben && \\\n    echo \"ben ALL=(ALL) NOPASSWD:ALL\" &gt;&gt; /etc/sudoers\n\n# Set working directory\nWORKDIR /home/ben\n\n# Switch to user ben\nUSER ben\n\n# Add /home/ben/.local/bin to the PATH\nENV PATH=\"/home/ben/.local/bin:${PATH}\"\n\n# Copy requirements file\nCOPY requirements.txt .\n\n# Install required Python packages\nRUN pip install --no-cache-dir -r requirements.txt\n\nRUN git config --global user.email &lt;email&gt; \\\n    && git config --global user.name \"main_docker\"\n\n# COPY /home/ben/'.jupyter' '.jupyter'\nADD /apputils-extension /home/ben/.jupyter/lab/user-settings/@jupyterlab/apputils-extension\n\n# Expose Jupyter notebook port\nEXPOSE 8888\n\n# Command to start JupyterLab with dark theme\nCMD [\"jupyter\", \"lab\", \"--ip=0.0.0.0\", \"--port=8888\", \"--no-browser\", \"--NotebookApp.theme='JupyterLab Dark'\", \"--NotebookApp.token='test'\"]\n\n\n.dockerignore\n\njust like a git ignore file\n\n\n\nBuilding Docker image\ndocker build -t _name_ _path_\nex.\ndocker build -t test:taggedv0.1\n-t : tag\n\n\nView Docker Images\ndocker images\n\n\nDelete Image\ndocker rmi _Image_\n\n\nRunning Docker image as Container\ndocke run -p 5000:8080 _name_\ndocker run -p 8888:8888 -td --gpus=all --name testcontainer test\n\n\nView Dockers Containers Running\ndocker ps -a\n\n\nDeleting Docker Containers\n\ndocker rmi _image_\n\n\nStop Docker Running\ndocker stop $(docker ps -aq)",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#volumes",
    "href": "docker.html#volumes",
    "title": "Docker",
    "section": "Volumes",
    "text": "Volumes\n\nFolder which multiple containers can access\n\ndocker volume create _name_\n\nUsing volumes in container\ndocker run --mount source=_volumename_, target = _location_",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#docker-debugging",
    "href": "docker.html#docker-debugging",
    "title": "Docker",
    "section": "Docker Debugging",
    "text": "Docker Debugging\n\nInspect logs in docker desktop\ndocker exec",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#tips",
    "href": "docker.html#tips",
    "title": "Docker",
    "section": "TIPs",
    "text": "TIPs\n\neach docker should only do one task\nDone through docker-compose.yml",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#compose.yml",
    "href": "docker.html#compose.yml",
    "title": "Docker",
    "section": "Compose.yml",
    "text": "Compose.yml\n\nExample\n\nthis GPU\n\n\nnvidia Docs\n\nservices:\n  torch:\n    container_name: main_docker\n    \n    build:\n      context: .\n\n    volumes:\n      - /home/ben/BENEDICT_Only:/home/ben/BENEDICT_Only\n      \n    ports:\n      - \"8888:8888\"\n    \n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: 1\n              capabilities: [gpu]\nversion: '3'\nservices:\n    web: \n        build: .\n        ports:\n            - \"8080:8080\"\n    db: \n        image: \"mysql\"\n        environment:\n            MYSQL_ROOT_PASSWORD: password\n        volumes:\n            - db-data:/foo\n            \nvolumes:\n    db-data:\n            \n\n\nRunning Docker Compose\ndocker-compose up\n\n\nStopping Docker Compose\ndocker-compose down",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "docker.html#requirements.txt",
    "href": "docker.html#requirements.txt",
    "title": "Docker",
    "section": "requirements.txt",
    "text": "requirements.txt\n\nExample\njupyterlab\nfastai\nfastbook\ntimm\npdf2image\npandas\nnbdev\nnbdevAuto",
    "crumbs": [
      "Blog",
      "Docker"
    ]
  },
  {
    "objectID": "nookal.html",
    "href": "nookal.html",
    "title": "Nookal",
    "section": "",
    "text": "import os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nTrue\napi_key = os.getenv('API_KEY')\napi_key\n\n'f266F5FF-A2b6-b2C9-545c-aF83eE94dEDf'",
    "crumbs": [
      "Blog",
      "Nookal"
    ]
  },
  {
    "objectID": "nookal.html#parameters-needed",
    "href": "nookal.html#parameters-needed",
    "title": "Nookal",
    "section": "Parameters Needed",
    "text": "Parameters Needed\n\nAPI key needed in params\n\n\nimport requests\n\nBASE_URL = 'https://api.nookal.com/production/v2'\n\nparams = {\n    'api_key': api_key\n}\n\nheaders = {\n    'Content-Type': 'application/json'\n}\n\n\nverify = f'{BASE_URL}/verify'\n\nverify, headers\n\n('https://api.nookal.com/production/v2/verify',\n {'Content-Type': 'application/json'})\n\n\n\nresponse = requests.get(verify, headers=headers, params=params)\n\nprint(response.status_code)\nresponse.json()\n\n200\n\n\n{'status': 'success',\n 'data': {'api_call': 'verify',\n  'results': {'verify': True,\n   'accountID': 563,\n   'apiUrl': 'https://api.nookal.com/'}},\n 'details': {'totalItems': 1, 'currentItems': 1},\n 'settings': {'currentPage': 1, 'nextPage': None, 'pageLength': 1}}",
    "crumbs": [
      "Blog",
      "Nookal"
    ]
  },
  {
    "objectID": "nookal.html#example-api-classs",
    "href": "nookal.html#example-api-classs",
    "title": "Nookal",
    "section": "Example API Classs",
    "text": "Example API Classs\n\nimport requests\n\nclass NookalAPI:\n    def __init__(self, api_key, base='https://api.nookal.com/production/v2/'):\n        self.api_key = api_key\n        self.base = base\n        self.params = {\n            'api_key': self.api_key\n        }\n        self.headers = {\n            'Content-Type': 'application/json'\n        }\n\n    def make_request(self, query_type='verify', method='GET', data=None):\n        url = f'{self.base}{query_type}'\n        if method == 'GET':\n            response = requests.get(url, headers=self.headers, params=self.params)\n        elif method == 'POST':\n            response = requests.post(url, headers=self.headers, params=self.params, json=data)\n        else:\n            raise ValueError(f'Unsupported HTTP method: {method}')\n        \n        if response.status_code == 200:\n            return response.json()\n        else:\n            print(f'Error: {response.status_code}')\n            return None\n\n    def verify(self):\n        return self.make_request('verify')\n\n    def __str__(self):\n        return f'str: {self.verify()}'\n\n    def __repr__(self):\n        return f'repr: {self.verify()}'\n    \n    def __call__(self):\n        return f\"call: {self.verify()}\"\n\n    def get_locations(self):\n        \"\"\"Retrieve all locations.\"\"\"\n        return self.make_request('getLocations')\n        \n    def get_practitioners(self):\n        return self.make_request('getPractitioners')\n\n    def get_patients(self):\n        return self.make_request('getPatients')\n        \n    def get_appointments(self):\n        return self.make_request('getAppointments')\n\n    def add_location(self, data):\n        \"\"\"Add a new location.\"\"\"\n        return self.make_request('addLocation', method='POST', data=data)\n\n    def add_practitioner(self, data):\n        \"\"\"Add a new practitioner.\"\"\"\n        return self.make_request('addPractitioner', method='POST', data=data)\n\n    def add_appointment(self, data):\n        \"\"\"Create a new appointment.\"\"\"\n        return self.make_request('addAppointment', method='POST', data=data)\n\n    def add_patient(self, data):\n        \"\"\"Add a new patient.\"\"\"\n        return self.make_request('addPatient', method='POST', data=data)\n\n# Example usage:\n# api = NookalAPI(api_key='your_api_key_here')\n# practitioners = api.get_practitioners()\n# print(practitioners)\n\n\nnookal = NookalAPI(api_key)\n\n\nnookal.verify()\n\n{'status': 'success',\n 'data': {'api_call': 'verify',\n  'results': {'verify': True,\n   'accountID': 563,\n   'apiUrl': 'https://api.nookal.com/'}},\n 'details': {'totalItems': 1, 'currentItems': 1},\n 'settings': {'currentPage': 1, 'nextPage': None, 'pageLength': 1}}\n\n\nnookal.get_appointments()\n\nnookal.get_practitioners()\n\n{'status': 'success',\n 'data': {'api_call': 'getPractitioners',\n  'results': {'practitioners': [{'ID': '2',\n     'FirstName': 'Kiera',\n     'LastName': 'Buchanan',\n     'Speciality': 'Clinical Psychologist',\n     'ShowInDiary': '1',\n     'status': '1',\n     'Title': 'Dr',\n     'Email': 'kiera@cfih.com.au',\n     'locations': ['20']}]}},\n 'details': {'totalItems': 1, 'currentItems': 1},\n 'settings': {'currentPage': 1, 'nextPage': None, 'pageLength': 1}}\n\n\n\nnookal.get_appointments()\n\n{'status': 'success',\n 'data': {'api_call': 'getAppointments', 'results': {'appointments': []}},\n 'details': {'totalItems': 0, 'currentItems': 0},\n 'settings': {'currentPage': 1, 'nextPage': None, 'pageLength': 100}}\n\n\n\ndata = {\n    'first_name': 'first_name',\n    'last_name': 'last_name',\n    'email': 'email',\n    'phone': 'phone'\n}\nnookal.add_practitioner(data)\n\nError: 404\n\n\n\ndata = {\n    'practitioner_id': 'practitioner_id',\n    'client_id': 'client_id',\n    'date': 'date',\n    'time': 'time',\n    'duration': 'duration',\n    'notes': 'notes'\n}\nnookal.add_appointment(data)\n\nError: 404",
    "crumbs": [
      "Blog",
      "Nookal"
    ]
  },
  {
    "objectID": "wireshark.html",
    "href": "wireshark.html",
    "title": "Wireshark",
    "section": "",
    "text": "sudo apt install wireshark",
    "crumbs": [
      "Blog",
      "Wireshark"
    ]
  },
  {
    "objectID": "wireshark.html#install",
    "href": "wireshark.html#install",
    "title": "Wireshark",
    "section": "",
    "text": "sudo apt install wireshark",
    "crumbs": [
      "Blog",
      "Wireshark"
    ]
  },
  {
    "objectID": "prefect.html",
    "href": "prefect.html",
    "title": "Prefect",
    "section": "",
    "text": "prefect server start\n\nhttp://127.0.0.1:4200\n\n\n\nprefect config set PREFECT_API_URL=\"http://127.0.0.1:4200/api\"\n\n\n\nprefect config view --show-defaults",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#start-prefect-server",
    "href": "prefect.html#start-prefect-server",
    "title": "Prefect",
    "section": "",
    "text": "prefect server start\n\nhttp://127.0.0.1:4200\n\n\n\nprefect config set PREFECT_API_URL=\"http://127.0.0.1:4200/api\"\n\n\n\nprefect config view --show-defaults",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#flows",
    "href": "prefect.html#flows",
    "title": "Prefect",
    "section": "Flows",
    "text": "Flows\nFlows can be thought of as special types of functions. They can take inputs, perform work, and return an output. In fact, you can turn any function into a Prefect flow by adding the @flow decorator. When a function becomes a flow, its behavior changes, giving it the following advantages:\nTask called within Flows\n\nfrom prefect import flow, task\n\n@task\ndef print_hello(name):\n    print(f\"Hello {name}!\")\n\n@flow(name=\"Hello Flow\")\ndef hello_world(name=\"world\"):\n    print_hello(name)\n\n\nimport datetime\nfrom prefect import flow\n\n@flow(flow_run_name=\"{name}-on-{date:%A}\")\ndef my_flow(name: str, date: datetime.datetime):\n    pass\n\n# creates a flow run called 'marvin-on-Thursday'\nmy_flow(name=\"marvin\", date=datetime.datetime.now(datetime.timezone.utc))\n\n18:17:46.247 | INFO    | prefect.engine - Created flow run 'placid-finch' for flow 'my-flow'\n\n\n\n18:17:46.320 | INFO    | Flow run 'placid-finch' - Finished in state Completed()\n\n\n\n\nFlow settings\nFlows allow a great deal of configuration by passing arguments to the decorator. Flows accept the following optional settings.\n\n\n\nArgument\nDescription\n\n\n\n\ndescription\nAn optional string description for the flow. If not provided, the description will be pulled from the docstring for the decorated function.\n\n\nname\nAn optional name for the flow. If not provided, the name will be inferred from the function.\n\n\nretries\nAn optional number of times to retry on flow run failure.\n\n\nretry_delay_seconds\nAn optional number of seconds to wait before retrying the flow after failure. This is only applicable if retries is nonzero.\n\n\nflow_run_name\nAn optional name to distinguish runs of this flow; this name can be provided as a string template with the flow‚Äôs parameters as variables; this name can also be provided as a function that returns a string.\n\n\ntask_runner\nAn optional task runner to use for task execution within the flow when you .submit() tasks. If not provided and you .submit() tasks, the ConcurrentTaskRunner will be used.\n\n\ntimeout_seconds\nAn optional number of seconds indicating a maximum runtime for the flow. If the flow exceeds this runtime, it will be marked as failed. Flow execution may continue until the next task is called.\n\n\nvalidate_parameters\nBoolean indicating whether parameters passed to flows are validated by Pydantic. Default is True.\n\n\nversion\nAn optional version string for the flow. If not provided, we will attempt to create a version string as a hash of the file containing the wrapped function. If the file cannot be located, the version will be null.\n\n\n\n\n\nFlow Example\n\nfrom prefect import flow, task\nimport datetime\nfrom prefect.runtime import flow_run\nfrom prefect.task_runners import SequentialTaskRunner\n\ndef generate_flow_run_name():\n    flow_name = flow_run.flow_name\n    parameters = flow_run.parameters\n    name = parameters[\"name\"]\n\n    \n    date = datetime.datetime.now(datetime.timezone.utc)\n\n    return f\"flow run name test: {flow_name}-with-{name}: {date:%A}\"\n\n@task(name=\"task test\")\ndef print_hello(name:str) -&gt; str:\n    msg = f\"Hello {name}!\"\n    print(msg)\n    return msg\n\n@flow(name=\"flow test\",\n      description=\"flow test description\",\n      task_runner=SequentialTaskRunner(),\n      flow_run_name=generate_flow_run_name\n      )\ndef hello_world(name:str =\"world\") -&gt; None:\n    message = print_hello(name)\n\nhello_world(\"Ben\")\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'task test' and defined at '/tmp/ipykernel_23433/1543666974.py:16' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'flow test' and defined at '/tmp/ipykernel_23433/1543666974.py:22' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n18:31:47.848 | INFO    | prefect.engine - Created flow run 'caped-swan' for flow 'flow test'\n\n\n\n18:31:47.927 | INFO    | Flow run 'flow run name test: flow test-with-Ben: Wednesday' - Created task run 'task test-0' for task 'task test'\n\n\n\n18:31:47.929 | INFO    | Flow run 'flow run name test: flow test-with-Ben: Wednesday' - Executing 'task test-0' immediately...\n\n\n\nHello Ben!\n\n\n18:31:47.998 | INFO    | Task run 'task test-0' - Finished in state Completed()\n\n\n\n18:31:48.025 | INFO    | Flow run 'caped-swan' - Finished in state Completed('All states completed.')\n\n\n\n[Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `str`'))]\n\n\n\nimport graphviz\n\n\nfrom prefect import flow, task\n\n@task(name=\"Print Hello\")\ndef print_hello(name):\n    msg = f\"Hello {name}!\"\n    print(msg)\n    return msg\n\n@task(name=\"Print Hello Again\")\ndef print_hello_again(name):\n    msg = f\"Hello {name}!\"\n    print(msg)\n    return msg\n\n@flow(name=\"Hello Flow\")\ndef hello_world(name=\"world\"):\n    message = print_hello(name)\n    message2 = print_hello_again(message)\n\nhello_world.visualize()\n\n&lt;coroutine object Flow.visualize&gt;\n\n\n\n\nSubflows\nA subflow run is created when a flow function is called inside the execution of another flow. The primary flow is the ‚Äúparent‚Äù flow. The flow created within the parent is the ‚Äúchild‚Äù flow or ‚Äúsubflow.‚Äù\nSubflow runs behave like normal flow runs. There is a full representation of the flow run in the backend as if it had been called separately. When a subflow starts, it will create a new task runner for tasks within the subflow. When the subflow completes, the task runner is shut down.\n\nfrom prefect import flow, task\n\n@task(name=\"Print Hello\")\ndef print_hello(name):\n    msg = f\"Hello {name}!\"\n    print(msg)\n    return msg\n\n@flow(name=\"Subflow\")\ndef my_subflow(msg):\n    print(f\"Subflow says: {msg}\")\n\n@flow(name=\"Hello Flow\")\ndef hello_world(name=\"world\"):\n    for _ in range(3):\n        message = print_hello(name)\n        my_subflow(message)\n\nhello_world(\"Marvin\")\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'Print Hello' and defined at '/tmp/ipykernel_23433/3107251931.py:3' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'Subflow' and defined at '/tmp/ipykernel_23433/3107251931.py:9' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'Hello Flow' and defined at '/tmp/ipykernel_23433/3107251931.py:13' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'Subflow' and defined at '/tmp/ipykernel_23433/3107251931.py:9' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'Subflow' and defined at '/tmp/ipykernel_23433/3107251931.py:9' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'Subflow' and defined at '/tmp/ipykernel_23433/3107251931.py:9' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n18:41:19.292 | INFO    | prefect.engine - Created flow run 'wonderful-wolf' for flow 'Hello Flow'\n\n\n\n18:41:19.356 | INFO    | Flow run 'wonderful-wolf' - Created task run 'Print Hello-0' for task 'Print Hello'\n\n\n\n18:41:19.358 | INFO    | Flow run 'wonderful-wolf' - Executing 'Print Hello-0' immediately...\n\n\n\nHello Marvin!\nSubflow says: Hello Marvin!\nHello Marvin!\nSubflow says: Hello Marvin!\nHello Marvin!\nSubflow says: Hello Marvin!\n\n\n18:41:19.430 | INFO    | Task run 'Print Hello-0' - Finished in state Completed()\n\n\n\n18:41:19.504 | INFO    | Flow run 'wonderful-wolf' - Created subflow run 'aspiring-aardwark' for flow 'Subflow'\n\n\n\n18:41:19.585 | INFO    | Flow run 'aspiring-aardwark' - Finished in state Completed()\n\n\n\n18:41:19.607 | INFO    | Flow run 'wonderful-wolf' - Created task run 'Print Hello-1' for task 'Print Hello'\n\n\n\n18:41:19.608 | INFO    | Flow run 'wonderful-wolf' - Executing 'Print Hello-1' immediately...\n\n\n\n18:41:19.672 | INFO    | Task run 'Print Hello-1' - Finished in state Completed()\n\n\n\n18:41:19.738 | INFO    | Flow run 'wonderful-wolf' - Created subflow run 'garrulous-starling' for flow 'Subflow'\n\n\n\n18:41:19.815 | INFO    | Flow run 'garrulous-starling' - Finished in state Completed()\n\n\n\n18:41:19.839 | INFO    | Flow run 'wonderful-wolf' - Created task run 'Print Hello-2' for task 'Print Hello'\n\n\n\n18:41:19.840 | INFO    | Flow run 'wonderful-wolf' - Executing 'Print Hello-2' immediately...\n\n\n\n18:41:19.904 | INFO    | Task run 'Print Hello-2' - Finished in state Completed()\n\n\n\n18:41:19.976 | INFO    | Flow run 'wonderful-wolf' - Created subflow run 'snobbish-rottweiler' for flow 'Subflow'\n\n\n\n18:41:20.056 | INFO    | Flow run 'snobbish-rottweiler' - Finished in state Completed()\n\n\n\n18:41:20.084 | INFO    | Flow run 'wonderful-wolf' - Finished in state Completed('All states completed.')\n\n\n\n[Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `str`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `str`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `str`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `NoneType`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `NoneType`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `NoneType`'))]\n\n\n!!! tip ‚ÄúSubflows or tasks?‚Äù In Prefect you can call tasks or subflows to do work within your workflow, including passing results from other tasks to your subflow. So a common question is:\n\"When should I use a subflow instead of a task?\"\n\nWe recommend writing tasks that do a discrete, specific piece of work in your workflow: calling an API, performing a database operation, analyzing or transforming a data point. \nPrefect tasks are well suited to parallel or distributed execution using distributed computation frameworks such as Dask or Ray. \nFor troubleshooting, the more granular you create your tasks, the easier it is to find and fix issues should a task fail.\n\nSubflows enable you to group related tasks within your workflow. \nHere are some scenarios where you might choose to use a subflow rather than calling tasks individually:\n\n- Observability: Subflows, like any other flow run, have first-class observability within the Prefect UI and Prefect Cloud. You'll see subflow status in the **Flow Runs** dashboard rather than having to dig down into the tasks within a specific flow run. See [Final state determination](#final-state-determination) for some examples of leveraging task state within flows.\n- Conditional flows: If you have a group of tasks that run only under certain conditions, you can group them within a subflow and conditionally run the subflow rather than each task individually.\n- Parameters: Flows have first-class support for parameterization, making it easy to run the same group of tasks in different use cases by simply passing different parameters to the subflow in which they run.\n- Task runners: Subflows enable you to specify the task runner used for tasks within the flow. For example, if you want to optimize parallel execution of certain tasks with Dask, you can group them in a subflow that uses the Dask task runner. You can use a different task runner for each subflow.\n\nfrom prefect import flow\nfrom datetime import datetime\n\n@flow\ndef what_day_is_it(date: datetime = None):\n    if date is None:\n        date = datetime.now(timezone.utc)\n    print(f\"It was {date.strftime('%A')} on {date.isoformat()}\")\n\nwhat_day_is_it(\"2021-01-01T02:00:19.180906\")\n# It was Friday on 2021-01-01T02:00:19.180906\n\n18:49:42.898 | INFO    | prefect.engine - Created flow run 'vermilion-spider' for flow 'what-day-is-it'\n\n\n\nIt was Friday on 2021-01-01T02:00:19.180906\n\n\n18:49:42.963 | INFO    | Flow run 'vermilion-spider' - Finished in state Completed()",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#tasks",
    "href": "prefect.html#tasks",
    "title": "Prefect",
    "section": "Tasks",
    "text": "Tasks",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#task-arguments",
    "href": "prefect.html#task-arguments",
    "title": "Prefect",
    "section": "Task arguments",
    "text": "Task arguments\nTasks allow for customization through optional arguments:\n\n\n\n\n\n\n\nArgument\nDescription\n\n\n\n\nname\nAn optional name for the task. If not provided, the name will be inferred from the function name.\n\n\ndescription\nAn optional string description for the task. If not provided, the description will be pulled from the docstring for the decorated function.\n\n\ntags\nAn optional set of tags to be associated with runs of this task. These tags are combined with any tags defined by a prefect.tags context at task runtime.\n\n\ncache_key_fn\nAn optional callable that, given the task run context and call parameters, generates a string key. If the key matches a previous completed state, that state result will be restored instead of running the task again.\n\n\ncache_expiration\nAn optional amount of time indicating how long cached states for this task should be restorable; if not provided, cached states will never expire.\n\n\nretries\nAn optional number of times to retry on task run failure.\n\n\nretry_delay_seconds\nAn optional number of seconds to wait before retrying the task after failure. This is only applicable if retries is nonzero.\n\n\nlog_prints\nAn optional boolean indicating whether to log print statements.\n\n\npersist_result\nAn optional boolean indicating whether to persist the result of the task run to storage.\n\n\n\n\nfrom prefect import flow, task\n\n@task\ndef my_first_task(msg):\n    print(f\"Hello, {msg}\")\n\n@task\ndef my_second_task(msg):\n    my_first_task.fn(msg)\n    return msg\n\n@flow(flow_run_name = \"task test1\")\ndef my_flow(msg: str = \"Trillian\"):\n    my_second_task(msg)\n    return msg\n\nmy_flow()\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'my_first_task' and defined at '/tmp/ipykernel_23433/819281590.py:3' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'my_second_task' and defined at '/tmp/ipykernel_23433/819281590.py:7' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_23433/819281590.py:12' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n19:04:31.723 | INFO    | prefect.engine - Created flow run 'fluorescent-bittern' for flow 'my-flow'\n\n\n\n19:04:31.802 | INFO    | Flow run 'task test1' - Created task run 'my_second_task-0' for task 'my_second_task'\n\n\n\n19:04:31.804 | INFO    | Flow run 'task test1' - Executing 'my_second_task-0' immediately...\n\n\n\nHello, Trillian\n\n\n19:04:31.873 | INFO    | Task run 'my_second_task-0' - Finished in state Completed()\n\n\n\n19:04:31.904 | INFO    | Flow run 'fluorescent-bittern' - Finished in state Completed()\n\n\n\n'Trillian'\n\n\n\nfrom prefect import flow\nfrom prefect.runtime import flow_run, task_run\n\ndef generate_task_name():\n    flow_name = flow_run.flow_name\n    task_name = task_run.task_name\n\n    parameters = task_run.parameters\n    name = parameters[\"name\"]\n    limit = parameters[\"limit\"]\n\n    return f\"{flow_name}-{task_name}-with-{name}-and-{limit}\"\n\n@task(name=\"my-example-task\",\n      description=\"An example task for a tutorial.\",\n      task_run_name=generate_task_name)\ndef my_task(name: str, limit: int = 100):\n    pass\n\n@flow\ndef my_flow(name: str):\n    # creates a run with a name like \"my-flow-my-example-task-with-marvin-and-100\"\n    my_task(name=\"marvin\")\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_23433/732348698.py:20' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n\nTags\n\n@task(name=\"hello-task\", tags=[\"test\"])\ndef my_task():\n    print(\"Hello, I'm a task\")\n\n\n\nRetries\n\nimport httpx\n\nfrom prefect import flow, task\n\n\n@task(retries=2, retry_delay_seconds=5)\ndef get_data_task(\n    url: str = \"https://api.brittle-service.com/endpoint\"\n) -&gt; dict:\n    response = httpx.get(url)\n\n    # If the response status code is anything but a 2xx, httpx will raise\n    # an exception. This task doesn't handle the exception, so Prefect will\n    # catch the exception and will consider the task run failed.\n    response.raise_for_status()\n\n    return response.json()\n\n\n@flow\ndef get_data_flow():\n    get_data_task()\n\nget_data_flow()\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'get_data_task' and defined at '/tmp/ipykernel_23433/1331835922.py:6' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'get-data-flow' and defined at '/tmp/ipykernel_23433/1331835922.py:20' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n19:08:29.596 | INFO    | prefect.engine - Created flow run 'almond-spider' for flow 'get-data-flow'\n\n\n\n19:08:29.655 | INFO    | Flow run 'almond-spider' - Created task run 'get_data_task-0' for task 'get_data_task'\n\n\n\n19:08:29.658 | INFO    | Flow run 'almond-spider' - Executing 'get_data_task-0' immediately...\n\n\n\n19:08:29.859 | ERROR   | Task run 'get_data_task-0' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 69, in map_httpcore_exceptions\n    yield\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 233, in handle_request\n    resp = self._pool.handle_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 216, in handle_request\n    raise exc from None\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 196, in handle_request\n    response = connection.handle_request(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 99, in handle_request\n    raise exc\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 76, in handle_request\n    stream = self._connect(request)\n             ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 122, in _connect\n    stream = self._network_backend.connect_tcp(**kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_backends/sync.py\", line 205, in connect_tcp\n    with map_exceptions(exc_map):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_exceptions.py\", line 14, in map_exceptions\n    raise to_exc(exc) from exc\nhttpcore.ConnectError: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/1331835922.py\", line 10, in get_data_task\n    response = httpx.get(url)\n               ^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 198, in get\n    return request(\n           ^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 106, in request\n    return client.request(\n           ^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 827, in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 914, in send\n    response = self._send_handling_auth(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 942, in _send_handling_auth\n    response = self._send_handling_redirects(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 979, in _send_handling_redirects\n    response = self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 1015, in _send_single_request\n    response = transport.handle_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 232, in handle_request\n    with map_httpcore_exceptions():\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 86, in map_httpcore_exceptions\n    raise mapped_exc(message) from exc\nhttpx.ConnectError: [Errno -2] Name or service not known\n\n\n\n19:08:29.893 | INFO    | Task run 'get_data_task-0' - Received non-final state 'AwaitingRetry' when proposing final state 'Failed' and will attempt to run again...\n\n\n\n19:08:34.986 | ERROR   | Task run 'get_data_task-0' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 69, in map_httpcore_exceptions\n    yield\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 233, in handle_request\n    resp = self._pool.handle_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 216, in handle_request\n    raise exc from None\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 196, in handle_request\n    response = connection.handle_request(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 99, in handle_request\n    raise exc\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 76, in handle_request\n    stream = self._connect(request)\n             ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 122, in _connect\n    stream = self._network_backend.connect_tcp(**kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_backends/sync.py\", line 205, in connect_tcp\n    with map_exceptions(exc_map):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_exceptions.py\", line 14, in map_exceptions\n    raise to_exc(exc) from exc\nhttpcore.ConnectError: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/1331835922.py\", line 10, in get_data_task\n    response = httpx.get(url)\n               ^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 198, in get\n    return request(\n           ^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 106, in request\n    return client.request(\n           ^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 827, in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 914, in send\n    response = self._send_handling_auth(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 942, in _send_handling_auth\n    response = self._send_handling_redirects(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 979, in _send_handling_redirects\n    response = self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 1015, in _send_single_request\n    response = transport.handle_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 232, in handle_request\n    with map_httpcore_exceptions():\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 86, in map_httpcore_exceptions\n    raise mapped_exc(message) from exc\nhttpx.ConnectError: [Errno -2] Name or service not known\n\n\n\n19:08:35.018 | INFO    | Task run 'get_data_task-0' - Received non-final state 'AwaitingRetry' when proposing final state 'Failed' and will attempt to run again...\n\n\n\n19:08:40.124 | ERROR   | Task run 'get_data_task-0' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 69, in map_httpcore_exceptions\n    yield\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 233, in handle_request\n    resp = self._pool.handle_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 216, in handle_request\n    raise exc from None\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 196, in handle_request\n    response = connection.handle_request(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 99, in handle_request\n    raise exc\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 76, in handle_request\n    stream = self._connect(request)\n             ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 122, in _connect\n    stream = self._network_backend.connect_tcp(**kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_backends/sync.py\", line 205, in connect_tcp\n    with map_exceptions(exc_map):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_exceptions.py\", line 14, in map_exceptions\n    raise to_exc(exc) from exc\nhttpcore.ConnectError: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/1331835922.py\", line 10, in get_data_task\n    response = httpx.get(url)\n               ^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 198, in get\n    return request(\n           ^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 106, in request\n    return client.request(\n           ^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 827, in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 914, in send\n    response = self._send_handling_auth(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 942, in _send_handling_auth\n    response = self._send_handling_redirects(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 979, in _send_handling_redirects\n    response = self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 1015, in _send_single_request\n    response = transport.handle_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 232, in handle_request\n    with map_httpcore_exceptions():\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 86, in map_httpcore_exceptions\n    raise mapped_exc(message) from exc\nhttpx.ConnectError: [Errno -2] Name or service not known\n\n\n\n19:08:40.154 | ERROR   | Task run 'get_data_task-0' - Finished in state Failed('Task run encountered an exception ConnectError: [Errno -2] Name or service not known')\n\n\n\n19:08:40.156 | ERROR   | Flow run 'almond-spider' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 69, in map_httpcore_exceptions\n    yield\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 233, in handle_request\n    resp = self._pool.handle_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 216, in handle_request\n    raise exc from None\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection_pool.py\", line 196, in handle_request\n    response = connection.handle_request(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 99, in handle_request\n    raise exc\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 76, in handle_request\n    stream = self._connect(request)\n             ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_sync/connection.py\", line 122, in _connect\n    stream = self._network_backend.connect_tcp(**kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_backends/sync.py\", line 205, in connect_tcp\n    with map_exceptions(exc_map):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpcore/_exceptions.py\", line 14, in map_exceptions\n    raise to_exc(exc) from exc\nhttpcore.ConnectError: [Errno -2] Name or service not known\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 867, in orchestrate_flow_run\n    result = await flow_call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/1331835922.py\", line 22, in get_data_flow\n    get_data_task()\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py\", line 600, in __call__\n    return enter_task_run_engine(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 1421, in enter_task_run_engine\n    return from_sync.wait_for_call_in_loop_thread(begin_run)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/api.py\", line 243, in wait_for_call_in_loop_thread\n    return call.result()\n           ^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 318, in result\n    return self.future.result(timeout=timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 179, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 389, in _run_async\n    result = await coro\n             ^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 1601, in get_task_call_return_value\n    return await future._result()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/futures.py\", line 237, in _result\n    return await final_state.result(raise_on_failure=raise_on_failure, fetch=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/states.py\", line 91, in _get_state_result\n    raise await get_state_exception(state)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/1331835922.py\", line 10, in get_data_task\n    response = httpx.get(url)\n               ^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 198, in get\n    return request(\n           ^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_api.py\", line 106, in request\n    return client.request(\n           ^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 827, in request\n    return self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 914, in send\n    response = self._send_handling_auth(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 942, in _send_handling_auth\n    response = self._send_handling_redirects(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 979, in _send_handling_redirects\n    response = self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_client.py\", line 1015, in _send_single_request\n    response = transport.handle_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 232, in handle_request\n    with map_httpcore_exceptions():\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/contextlib.py\", line 155, in __exit__\n    self.gen.throw(typ, value, traceback)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_transports/default.py\", line 86, in map_httpcore_exceptions\n    raise mapped_exc(message) from exc\nhttpx.ConnectError: [Errno -2] Name or service not known\n\n\n\n19:08:40.187 | ERROR   | Flow run 'almond-spider' - Finished in state Failed('Flow run encountered an exception. ConnectError: [Errno -2] Name or service not known')\n\n\n\nConnectError: [Errno -2] Name or service not known\n\n\n\nimport httpx\nfrom prefect import flow, task\n\ndef retry_handler(task, task_run, state) -&gt; bool:\n    \"\"\"This is a custom retry handler to handle when we want to retry a task\"\"\"\n    try:\n        # Attempt to get the result of the task\n        state.result()\n    except httpx.HTTPStatusError as exc:\n        # Retry on any HTTP status code that is not 401 or 404\n        do_not_retry_on_these_codes = [401, 404]\n        return exc.response.status_code not in do_not_retry_on_these_codes\n    except httpx.ConnectError:\n        # Do not retry\n        return False\n    except:\n        # For any other exception, retry\n        return True\n\n@task(retries=1, retry_condition_fn=retry_handler)\ndef my_api_call_task(url):\n    response = httpx.get(url)\n    response.raise_for_status()\n    return response.json()\n\n@flow\ndef get_data_flow(url):\n    my_api_call_task(url=url)\n\nif __name__ == \"__main__\":\n    get_data_flow(url=\"https://httpbin.org/status/503\")\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'get-data-flow' and defined at '/tmp/ipykernel_23433/2972459076.py:26' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n19:16:36.208 | INFO    | prefect.engine - Created flow run 'brilliant-bustard' for flow 'get-data-flow'\n\n\n\n19:16:36.271 | INFO    | Flow run 'brilliant-bustard' - Created task run 'my_api_call_task-0' for task 'my_api_call_task'\n\n\n\n19:16:36.273 | INFO    | Flow run 'brilliant-bustard' - Executing 'my_api_call_task-0' immediately...\n\n\n\n19:16:37.330 | ERROR   | Task run 'my_api_call_task-0' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/2972459076.py\", line 23, in my_api_call_task\n    response.raise_for_status()\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_models.py\", line 761, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 SERVICE UNAVAILABLE' for url 'https://httpbin.org/status/503'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\n\n\n19:16:37.360 | INFO    | Task run 'my_api_call_task-0' - Received non-final state 'AwaitingRetry' when proposing final state 'Failed' and will attempt to run again...\n\n\n\n19:16:38.386 | ERROR   | Task run 'my_api_call_task-0' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/2972459076.py\", line 23, in my_api_call_task\n    response.raise_for_status()\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_models.py\", line 761, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 SERVICE UNAVAILABLE' for url 'https://httpbin.org/status/503'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\n\n\n19:16:38.415 | ERROR   | Task run 'my_api_call_task-0' - Finished in state Failed(\"Task run encountered an exception HTTPStatusError: Server error '503 SERVICE UNAVAILABLE' for url 'https://httpbin.org/status/503'\\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\")\n\n\n\n19:16:38.418 | ERROR   | Flow run 'brilliant-bustard' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 867, in orchestrate_flow_run\n    result = await flow_call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/2972459076.py\", line 28, in get_data_flow\n    my_api_call_task(url=url)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py\", line 600, in __call__\n    return enter_task_run_engine(\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 1421, in enter_task_run_engine\n    return from_sync.wait_for_call_in_loop_thread(begin_run)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/api.py\", line 243, in wait_for_call_in_loop_thread\n    return call.result()\n           ^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 318, in result\n    return self.future.result(timeout=timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 179, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 389, in _run_async\n    result = await coro\n             ^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 1601, in get_task_call_return_value\n    return await future._result()\n           ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/futures.py\", line 237, in _result\n    return await final_state.result(raise_on_failure=raise_on_failure, fetch=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/states.py\", line 91, in _get_state_result\n    raise await get_state_exception(state)\n  File \"/tmp/ipykernel_23433/2972459076.py\", line 8, in retry_handler\n    state.result()\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/client/schemas/objects.py\", line 224, in result\n    return get_state_result(self, raise_on_failure=raise_on_failure, fetch=fetch)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/states.py\", line 71, in get_state_result\n    return _get_state_result(state, raise_on_failure=raise_on_failure)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/utilities/asyncutils.py\", line 259, in coroutine_wrapper\n    return call()\n           ^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 432, in __call__\n    return self.result()\n           ^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 318, in result\n    return self.future.result(timeout=timeout)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 179, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 389, in _run_async\n    result = await coro\n             ^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/states.py\", line 91, in _get_state_result\n    raise await get_state_exception(state)\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_23433/2972459076.py\", line 23, in my_api_call_task\n    response.raise_for_status()\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/httpx/_models.py\", line 761, in raise_for_status\n    raise HTTPStatusError(message, request=request, response=self)\nhttpx.HTTPStatusError: Server error '503 SERVICE UNAVAILABLE' for url 'https://httpbin.org/status/503'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\n\n\n\n19:16:38.449 | ERROR   | Flow run 'brilliant-bustard' - Finished in state Failed(\"Flow run encountered an exception. HTTPStatusError: Server error '503 SERVICE UNAVAILABLE' for url 'https://httpbin.org/status/503'\\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503\")\n\n\n\nHTTPStatusError: Server error '503 SERVICE UNAVAILABLE' for url 'https://httpbin.org/status/503'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#timeouts",
    "href": "prefect.html#timeouts",
    "title": "Prefect",
    "section": "Timeouts",
    "text": "Timeouts\n\nfrom prefect import task, get_run_logger\nimport time\n\n@task(timeout_seconds=1)\ndef show_timeouts():\n    logger = get_run_logger()\n    logger.info(\"I will execute\")\n    time.sleep(5)\n    logger.info(\"I will not execute\")",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#wait-for",
    "href": "prefect.html#wait-for",
    "title": "Prefect",
    "section": "Wait for",
    "text": "Wait for\n\n@task\ndef task_1():\n    pass\n\n@task\ndef task_2():\n    pass\n\n@flow\ndef my_flow():\n    x = task_1()\n\n    # task 2 will wait for task_1 to complete\n    y = task_2(wait_for=[x])\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_23433/1697639020.py:9' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#maps",
    "href": "prefect.html#maps",
    "title": "Prefect",
    "section": "Maps",
    "text": "Maps\n\nfrom prefect import flow, task\n\n@task\ndef print_nums(nums):\n    for n in nums:\n        print(n)\n\n@task\ndef square_num(num):\n    return num**2\n\n@flow\ndef map_flow(nums):\n    print_nums(nums)\n    squared_nums = square_num.map(nums) \n    print_nums(squared_nums)\n\nmap_flow([1,2,3,5,8,13])\n\n19:23:30.843 | INFO    | prefect.engine - Created flow run 'stereotyped-wolf' for flow 'map-flow'\n\n\n\n19:23:30.904 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'print_nums-0' for task 'print_nums'\n\n\n\n19:23:30.906 | INFO    | Flow run 'stereotyped-wolf' - Executing 'print_nums-0' immediately...\n\n\n\n1\n2\n3\n5\n8\n13\n1\n4\n9\n25\n64\n169\n\n\n19:23:30.981 | INFO    | Task run 'print_nums-0' - Finished in state Completed()\n\n\n\n19:23:31.067 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'square_num-3' for task 'square_num'\n\n\n\n19:23:31.069 | INFO    | Flow run 'stereotyped-wolf' - Submitted task run 'square_num-3' for execution.\n\n\n\n19:23:31.085 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'square_num-2' for task 'square_num'\n\n\n\n19:23:31.087 | INFO    | Flow run 'stereotyped-wolf' - Submitted task run 'square_num-2' for execution.\n\n\n\n19:23:31.105 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'square_num-4' for task 'square_num'\n\n\n\n19:23:31.106 | INFO    | Flow run 'stereotyped-wolf' - Submitted task run 'square_num-4' for execution.\n\n\n\n19:23:31.176 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'square_num-1' for task 'square_num'\n\n\n\n19:23:31.179 | INFO    | Flow run 'stereotyped-wolf' - Submitted task run 'square_num-1' for execution.\n\n\n\n19:23:31.216 | INFO    | Task run 'square_num-3' - Finished in state Completed()\n\n\n\n19:23:31.233 | INFO    | Task run 'square_num-4' - Finished in state Completed()\n\n\n\n19:23:31.244 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'square_num-5' for task 'square_num'\n\n\n\n19:23:31.246 | INFO    | Flow run 'stereotyped-wolf' - Submitted task run 'square_num-5' for execution.\n\n\n\n19:23:31.331 | INFO    | Task run 'square_num-5' - Finished in state Completed()\n\n\n\n19:23:31.352 | INFO    | Task run 'square_num-1' - Finished in state Completed()\n\n\n\n19:23:31.396 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'square_num-0' for task 'square_num'\n\n\n\n19:23:31.399 | INFO    | Flow run 'stereotyped-wolf' - Submitted task run 'square_num-0' for execution.\n\n\n\n19:23:31.452 | INFO    | Flow run 'stereotyped-wolf' - Created task run 'print_nums-1' for task 'print_nums'\n\n\n\n19:23:31.453 | INFO    | Flow run 'stereotyped-wolf' - Executing 'print_nums-1' immediately...\n\n\n\n19:23:31.477 | INFO    | Task run 'square_num-0' - Finished in state Completed()\n\n\n\n19:23:31.615 | INFO    | Task run 'square_num-2' - Finished in state Completed()\n\n\n\n19:23:31.681 | INFO    | Task run 'print_nums-1' - Finished in state Completed()\n\n\n\n19:23:31.710 | INFO    | Flow run 'stereotyped-wolf' - Finished in state Completed('All states completed.')\n\n\n\n[Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `NoneType`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `int`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `int`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `int`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `int`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `int`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `int`')),\n Completed(message=None, type=COMPLETED, result=UnpersistedResult(type='unpersisted', artifact_type='result', artifact_description='Unpersisted result of type `NoneType`'))]",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#async",
    "href": "prefect.html#async",
    "title": "Prefect",
    "section": "Async",
    "text": "Async\n\nimport asyncio\n\nfrom prefect import task, flow\n\n@task\nasync def print_values(values):\n    for value in values:\n        await asyncio.sleep(1) # yield\n        print(value, end=\" \")\n\n@flow\nasync def async_flow():\n    await print_values([1, 2])  # runs immediately\n    coros = [print_values(\"abcd\"), print_values(\"6789\")]\n\n    # asynchronously gather the tasks\n    await asyncio.gather(*coros)\n\nasyncio.run(async_flow())\n\nfrom prefect import get_client\n\nasync with get_client() as client:\n    # set a concurrency limit of 10 on the 'small_instance' tag\n    limit_id = await client.create_concurrency_limit(\n        tag=\"small_instance\", \n        concurrency_limit=10\n        )\n\n\n!prefect concurrency-limit inspect small_instance\n\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ        Concurrency Limit ID: 879f2e40-8387-47c5-af34-0b164f7ea8bc        ‚îÇ\n‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì ‚îÇ\n‚îÇ ‚îÉ Tag            ‚îÉ Concurrency Limit ‚îÉ Created        ‚îÉ Updated        ‚îÉ ‚îÇ\n‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î© ‚îÇ\n‚îÇ ‚îÇ small_instance ‚îÇ 10                ‚îÇ '1 minute ago' ‚îÇ '1 minute ago' ‚îÇ ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ\n‚îÇ ‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì                                                  ‚îÇ\n‚îÇ ‚îÉ Active Task Run IDs ‚îÉ                                                  ‚îÇ\n‚îÇ ‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©                                                  ‚îÇ\n‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                                                  ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#deployments",
    "href": "prefect.html#deployments",
    "title": "Prefect",
    "section": "Deployments",
    "text": "Deployments\nname: prefect.yaml\n# Welcome to your prefect.yaml file! You can use this file for storing and managing\n# configuration for deploying your flows. We recommend committing this file to source\n# control along with your flow code.\n\n# Generic metadata about this project\nname: nbs\nprefect-version: 2.16.8\n\n# build section allows you to manage and build docker images\nbuild:\n\n# push section allows you to manage if and how this project is uploaded to remote locations\npush:\n\n# pull section allows you to provide instructions for cloning this project in remote locations\npull:\n- prefect.deployments.steps.git_clone:\n    repository: git@github.com:bthek1/MLtools.git\n    branch: main\n\n# the deployments section allows you to provide configuration for deploying flows\ndeployments:\n- name: slow_flow\n  version:\n  tags: []\n  description: Sleepy flow - sleeps the provided amount of time (in seconds).\n  entrypoint: nbs/prefect_deployment_serve.py:slow_flow\n  parameters: {}\n  work_pool:\n    name: test-pool\n    work_queue_name:\n    job_variables: {}\n  schedules:\n  - interval: 30.0\n    anchor_date: '2024-04-03T13:38:23.549390+00:00'\n    timezone: UTC\n    active: true\n- name: fast_flow\n  version:\n  tags: []\n  description: Fastest flow this side of the Mississippi.\n  entrypoint: nbs/prefect_deployment_serve.py:fast_flow\n  parameters: {}\n  work_pool:\n    name: test-pool\n    work_queue_name:\n    job_variables: {}\n  schedules:\n  - interval: 60.0\n    anchor_date: '2024-04-03T14:13:30.384393+00:00'\n    timezone: UTC\n    active: true\n  - interval: 150.0\n    anchor_date: '2024-04-03T14:13:45.806620+00:00'\n    timezone: UTC\n    active: false",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#work-pools-to-do",
    "href": "prefect.html#work-pools-to-do",
    "title": "Prefect",
    "section": "Work Pools : To do",
    "text": "Work Pools : To do\nWork pool overview¬∂\nWork pools organize work for execution. Work pools have types corresponding to the infrastructure that will execute the flow code, as well as the delivery method of work to that environment. Pull work pools require workers (or less ideally, agents) to poll the work pool for flow runs to execute. Push work pools can submit runs directly to your serverless infrastructure providers such as Google Cloud Run, Azure Container Instances, and AWS ECS without the need for an agent or worker.\nprefect work-pool create test-pool\n\n!prefect work-pool ls\n\n                                   Work Pools                                   \n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î≥‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ Name      ‚îÉ Type   ‚îÉ                                   ID ‚îÉ Concurrency Lim‚Ä¶ ‚îÉ\n‚î°‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïá‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î©\n‚îÇ test-pool ‚îÇ proce‚Ä¶ ‚îÇ 5d41c025-ec45-4e64-9ef6-3ca91b9684e0 ‚îÇ None             ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n                           (**) denotes a paused pool                           \n\n\n\n!prefect work-pool inspect 'test-pool'\n\nWorkPool(\n    id='5d41c025-ec45-4e64-9ef6-3ca91b9684e0',\n    created=DateTime(2024, 4, 3, 10, 12, 27, 298785, tzinfo=Timezone('+00:00')),\n    updated=DateTime(2024, 4, 3, 10, 12, 27, 306000, tzinfo=Timezone('+00:00')),\n    name='test-pool',\n    type='process',\n    base_job_template={\n        'job_configuration': {\n            'command': '{{ command }}',\n            'env': '{{ env }}',\n            'labels': '{{ labels }}',\n            'name': '{{ name }}',\n            'stream_output': '{{ stream_output }}',\n            'working_dir': '{{ working_dir }}'\n        },\n        'variables': {\n            'type': 'object',\n            'properties': {\n                'name': {\n                    'title': 'Name',\n                    'description': 'Name given to infrastructure created by a \nworker.',\n                    'type': 'string'\n                },\n                'env': {\n                    'title': 'Environment Variables',\n                    'description': 'Environment variables to set when starting a\nflow run.',\n                    'type': 'object',\n                    'additionalProperties': {'type': 'string'}\n                },\n                'labels': {\n                    'title': 'Labels',\n                    'description': 'Labels applied to infrastructure created by \na worker.',\n                    'type': 'object',\n                    'additionalProperties': {'type': 'string'}\n                },\n                'command': {\n                    'title': 'Command',\n                    'description': 'The command to use when starting a flow run.\nIn most cases, this should be left blank and the command will be automatically \ngenerated by the worker.',\n                    'type': 'string'\n                },\n                'stream_output': {\n                    'title': 'Stream Output',\n                    'description': 'If enabled, workers will stream output from \nflow run processes to local standard output.',\n                    'default': True,\n                    'type': 'boolean'\n                },\n                'working_dir': {\n                    'title': 'Working Directory',\n                    'description': 'If provided, workers will open flow run \nprocesses within the specified path as the working directory. Otherwise, a \ntemporary directory will be created.',\n                    'type': 'string',\n                    'format': 'path'\n                }\n            }\n        }\n    },\n    status=WorkPoolStatus.NOT_READY,\n    default_queue_id='12cd8c55-db98-4e1c-baf6-ffffcfbb613f'\n)",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#schedules-to-do",
    "href": "prefect.html#schedules-to-do",
    "title": "Prefect",
    "section": "Schedules : To do",
    "text": "Schedules : To do\nPrefect supports several types of schedules that cover a wide range of use cases and offer a large degree of customization:\n\nCron is most appropriate for users who are already familiar with cron from previous use.\nInterval is best suited for deployments that need to run at some consistent cadence that isn‚Äôt related to absolute time.\nRRule is best suited for deployments that rely on calendar logic for simple recurring schedules, irregular intervals, exclusions, or day-of-month adjustments.\n\n!!! tip ‚ÄúSchedules can be inactive‚Äù When you create or edit a schedule, you can set the active property to False in Python (or false in a YAML file) to deactivate the schedule. This is useful if you want to keep the schedule configuration but temporarily stop the schedule from creating new flow runs.",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#results",
    "href": "prefect.html#results",
    "title": "Prefect",
    "section": "Results",
    "text": "Results\n\nfrom prefect import flow, task\n\n@task\ndef my_task():\n    return 1\n\n@flow\ndef my_flow():\n    future = my_task.submit()\n    return future.result() + 1\n\nresult = my_flow()\nassert result == 2\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'my_task' and defined at '/tmp/ipykernel_44036/1506838836.py:3' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_44036/1506838836.py:7' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n21:13:16.692 | INFO    | prefect.engine - Created flow run 'ultra-capuchin' for flow 'my-flow'\n\n\n\n21:13:16.756 | INFO    | Flow run 'ultra-capuchin' - Created task run 'my_task-0' for task 'my_task'\n\n\n\n21:13:16.758 | INFO    | Flow run 'ultra-capuchin' - Submitted task run 'my_task-0' for execution.\n\n\n\n21:13:16.833 | INFO    | Task run 'my_task-0' - Finished in state Completed()\n\n\n\n21:13:16.862 | INFO    | Flow run 'ultra-capuchin' - Finished in state Completed()\n\n\n\n\nError handling\n\nfrom prefect import flow, task\n\n@task\ndef my_task():\n    raise ValueError()\n\n@flow\ndef my_flow():\n    state = my_task(return_state=True)\n\n    if state.is_failed():\n        print(\"Oh no! The task failed. Falling back to '1'.\")\n        result = 1\n    else:\n        result = state.result()\n\n    return result + 1\n\nresult = my_flow()\nassert result == 2\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'my_task' and defined at '/tmp/ipykernel_44036/2193582311.py:3' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_44036/2193582311.py:7' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n21:24:04.344 | INFO    | prefect.engine - Created flow run 'active-flamingo' for flow 'my-flow'\n\n\n\n21:24:04.406 | INFO    | Flow run 'active-flamingo' - Created task run 'my_task-0' for task 'my_task'\n\n\n\n21:24:04.407 | INFO    | Flow run 'active-flamingo' - Executing 'my_task-0' immediately...\n\n\n\n21:24:04.454 | ERROR   | Task run 'my_task-0' - Encountered exception during execution:\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/engine.py\", line 2147, in orchestrate_task_run\n    result = await call.aresult()\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 327, in aresult\n    return await asyncio.wrap_future(self.future)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/_internal/concurrency/calls.py\", line 352, in _run_sync\n    result = self.fn(*self.args, **self.kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_44036/2193582311.py\", line 5, in my_task\n    raise ValueError()\nValueError\n\n\n\n21:24:04.485 | ERROR   | Task run 'my_task-0' - Finished in state Failed('Task run encountered an exception ValueError: ')\n\n\n\nOh no! The task failed. Falling back to '1'.\n\n\n21:24:04.516 | INFO    | Flow run 'active-flamingo' - Finished in state Completed()",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#artifacts",
    "href": "prefect.html#artifacts",
    "title": "Prefect",
    "section": "Artifacts",
    "text": "Artifacts\n\nfrom prefect import flow, task\nfrom prefect.artifacts import create_link_artifact\n\n@task\ndef my_first_task():\n    create_link_artifact(\n        key=\"create-link-artifact\",\n        link=\"my_first_task\",\n        description=\"## my_first_task\",\n    )\n\n@task\ndef my_second_task():\n    create_link_artifact(\n        key=\"create-link-artifact\",\n        link=\"my_second_task\",\n        description=\"## my_second_task\",\n    )\n\n@flow\ndef my_flow():\n    create_link_artifact(\n        key=\"create-link-artifact\",\n        link=\"my_flow\",\n        description=\"## my_flow\",\n)\n    my_first_task()\n    my_second_task()\n\nif __name__ == \"__main__\":\n    my_flow()\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'my_first_task' and defined at '/tmp/ipykernel_44036/2726054530.py:4' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/tasks.py:348: UserWarning: A task named 'my_second_task' and defined at '/tmp/ipykernel_44036/2726054530.py:12' conflicts with another task. Consider specifying a unique `name` parameter in the task definition:\n\n `@task(name='my_unique_name', ...)`\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_44036/2726054530.py:20' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n21:31:10.608 | INFO    | prefect.engine - Created flow run 'important-limpet' for flow 'my-flow'\n\n\n\n21:31:10.688 | INFO    | Flow run 'important-limpet' - Created task run 'my_first_task-0' for task 'my_first_task'\n\n\n\n21:31:10.690 | INFO    | Flow run 'important-limpet' - Executing 'my_first_task-0' immediately...\n\n\n\n21:31:10.782 | INFO    | Task run 'my_first_task-0' - Finished in state Completed()\n\n\n\n21:31:10.803 | INFO    | Flow run 'important-limpet' - Created task run 'my_second_task-0' for task 'my_second_task'\n\n\n\n21:31:10.805 | INFO    | Flow run 'important-limpet' - Executing 'my_second_task-0' immediately...\n\n\n\n21:31:10.903 | INFO    | Task run 'my_second_task-0' - Finished in state Completed()\n\n\n\n21:31:10.932 | INFO    | Flow run 'important-limpet' - Finished in state Completed('All states completed.')\n\n\n\n\nfrom prefect import flow\nfrom prefect.artifacts import create_link_artifact\n\n@flow\ndef my_flow():\n    create_link_artifact(\n        key=\"my-important-link\",\n        link=\"https://www.prefect.io/\",\n        link_text=\"Prefect\",\n    )\n\nif __name__ == \"__main__\":\n    my_flow()\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_44036/1748943510.py:4' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n21:57:21.601 | INFO    | prefect.engine - Created flow run 'tomato-eagle' for flow 'my-flow'\n\n\n\n21:57:21.688 | INFO    | Flow run 'tomato-eagle' - Finished in state Completed()\n\n\n\n\nfrom prefect import flow, task\nfrom prefect.artifacts import create_markdown_artifact\n\n@task\ndef markdown_task():\n    na_revenue = 500000\n    markdown_report = f\"\"\"# Sales Report\n\n## Summary\n\nIn the past quarter, our company saw a significant increase in sales, with a total revenue of $1,000,000. \nThis represents a 20% increase over the same period last year.\n\n## Sales by Region\n\n| Region        | Revenue |\n|:--------------|-------:|\n| North America | ${na_revenue:,} |\n| Europe        | $250,000 |\n| Asia          | $150,000 |\n| South America | $75,000 |\n| Africa        | $25,000 |\n\n## Top Products\n\n1. Product A - $300,000 in revenue\n2. Product B - $200,000 in revenue\n3. Product C - $150,000 in revenue\n\n## Conclusion\n\nOverall, these results are very encouraging and demonstrate the success of our sales team in increasing revenue \nacross all regions. However, we still have room for improvement and should focus on further increasing sales in \nthe coming quarter.\n\"\"\"\n    create_markdown_artifact(\n        key=\"gtm-report\",\n        markdown=markdown_report,\n        description=\"Quarterly Sales Report\",\n    )\n\n@flow()\ndef my_flow():\n    markdown_task()\n\n\nif __name__ == \"__main__\":\n    my_flow()\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_44036/3501414838.py:42' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n21:58:42.196 | INFO    | prefect.engine - Created flow run 'sociable-jaguarundi' for flow 'my-flow'\n\n\n\n21:58:42.266 | INFO    | Flow run 'sociable-jaguarundi' - Created task run 'markdown_task-0' for task 'markdown_task'\n\n\n\n21:58:42.267 | INFO    | Flow run 'sociable-jaguarundi' - Executing 'markdown_task-0' immediately...\n\n\n\n21:58:42.360 | INFO    | Task run 'markdown_task-0' - Finished in state Completed()\n\n\n\n21:58:42.392 | INFO    | Flow run 'sociable-jaguarundi' - Finished in state Completed('All states completed.')",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#states",
    "href": "prefect.html#states",
    "title": "Prefect",
    "section": "States",
    "text": "States\nWhen calling a task or a flow, there are three types of returned values:\n\nData: A Python object (such as int, str, dict, list, and so on).\nState: A Prefect object indicating the state of a flow or task run.\nPrefectFuture: A Prefect object that contains both data and State.\n\nReturning data‚Ää is the default behavior any time you call your_task().\nReturning Prefect State occurs anytime you call your task or flow with the argument return_state=True.\nReturning PrefectFuture is achieved by calling your_task.submit().\n\nfrom prefect import flow\n\ndef my_success_hook(flow, flow_run, state):\n    print(\"Flow run succeeded!\")\n\n@flow(on_completion=[my_success_hook])\ndef my_flow():\n    return 42\n\nmy_flow()\n\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/prefect/flows.py:357: UserWarning: A flow named 'my-flow' and defined at '/tmp/ipykernel_44036/2923164121.py:6' conflicts with another flow. Consider specifying a unique `name` parameter in the flow definition:\n\n `@flow(name='my_unique_name', ...)`\n  warnings.warn(\n\n\n22:27:55.866 | INFO    | prefect.engine - Created flow run 'lime-bullmastiff' for flow 'my-flow'\n\n\n\n22:27:55.935 | INFO    | Flow run 'lime-bullmastiff' - Running hook 'my_success_hook' in response to entering state 'Completed'\n\n\n\nFlow run succeeded!\n\n\n22:27:55.939 | INFO    | Flow run 'lime-bullmastiff' - Hook 'my_success_hook' finished running successfully\n\n\n\n22:27:55.941 | INFO    | Flow run 'lime-bullmastiff' - Finished in state Completed()\n\n\n\n42\n\n\nCreate flow run state change hooks¬∂\ndef my_flow_hook(flow: Flow, flow_run: FlowRun, state: State):\n    \"\"\"This is the required signature for a flow run state\n    change hook. This hook can only be passed into flows.\n    \"\"\"\n\n# pass hook as a list of callables\n@flow(on_completion=[my_flow_hook])\nCreate task run state change hooks¬∂\ndef my_task_hook(task: Task, task_run: TaskRun, state: State):\n    \"\"\"This is the required signature for a task run state change\n    hook. This hook can only be passed into tasks.\n    \"\"\"\n\n# pass hook as a list of callables\n@task(on_failure=[my_task_hook])",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "prefect.html#serve",
    "href": "prefect.html#serve",
    "title": "Prefect",
    "section": "Serve",
    "text": "Serve\nfrom prefect import flow\n\n\n@flow(log_prints=True)\ndef hello_world(name: str = \"world\", goodbye: bool = False):\n    print(f\"Hello {name} from Prefect! ü§ó\")\n\n    if goodbye:\n        print(f\"Goodbye {name}!\")\n\n\nif __name__ == \"__main__\":\n    # creates a deployment and stays running to monitor for work instructions generated on the server\n\n    hello_world.serve(name=\"my-first-deployment\",\n                      tags=[\"onboarding\"],\n                      parameters={\"goodbye\": True},\n                      interval=60)\n\nimport time\nfrom prefect import flow, serve\n\n\n@flow\ndef slow_flow(sleep: int = 60):\n    \"Sleepy flow - sleeps the provided amount of time (in seconds).\"\n    time.sleep(sleep)\n\n\n@flow\ndef fast_flow():\n    \"Fastest flow this side of the Mississippi.\"\n    return\n\n\nif __name__ == \"__main__\":\n    slow_deploy = slow_flow.to_deployment(name=\"sleeper\", interval=45)\n    fast_deploy = fast_flow.to_deployment(name=\"fast\")\n    serve(slow_deploy, fast_deploy)",
    "crumbs": [
      "Blog",
      "Prefect"
    ]
  },
  {
    "objectID": "Back_end/Django/custom_commands.html",
    "href": "Back_end/Django/custom_commands.html",
    "title": "Custom Commands",
    "section": "",
    "text": "Inside your Django app, create a directory named management/commands/.\n\nmkdir -p myapp/management/commands/\n\n\n\n\nAdd __init__.py files to the management and commands directories to make them Python packages.\n\ntouch myapp/management/__init__.py\ntouch myapp/management/commands/__init__.py\n\n\n\n\nCreate a new Python file in the commands directory. The file name will be the command name.\n\ntouch myapp/management/commands/my_custom_command.py",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Back_end/Django/custom_commands.html#basic-setup",
    "href": "Back_end/Django/custom_commands.html#basic-setup",
    "title": "Custom Commands",
    "section": "",
    "text": "Inside your Django app, create a directory named management/commands/.\n\nmkdir -p myapp/management/commands/\n\n\n\n\nAdd __init__.py files to the management and commands directories to make them Python packages.\n\ntouch myapp/management/__init__.py\ntouch myapp/management/commands/__init__.py\n\n\n\n\nCreate a new Python file in the commands directory. The file name will be the command name.\n\ntouch myapp/management/commands/my_custom_command.py",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Back_end/Django/custom_commands.html#writing-the-custom-command",
    "href": "Back_end/Django/custom_commands.html#writing-the-custom-command",
    "title": "Custom Commands",
    "section": "Writing the Custom Command",
    "text": "Writing the Custom Command\n\nBasic Command Structure\n\nDefine the command by creating a subclass of BaseCommand or AppCommand from django.core.management.base\n\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = 'Description of your custom command'\n\n    def handle(self, *args, **kwargs):\n        self.stdout.write('Executing custom command...')\n\n\nAdding Arguments\n\nAdd arguments and options to the command.\n\nfrom django.core.management.base import BaseCommand\n\nclass Command(BaseCommand):\n    help = 'Description of your custom command'\n\n    def add_arguments(self, parser):\n        parser.add_argument('arg1', type=str, help='Argument 1 description')\n        parser.add_argument('--option1', type=str, help='Option 1 description', default='default_value')\n\n    def handle(self, *args, **kwargs):\n        arg1 = kwargs['arg1']\n        option1 = kwargs['option1']\n        self.stdout.write(f'Argument: {arg1}')\n        self.stdout.write(f'Option: {option1}')\n\n\nHandling Command Logic\n\nImplement the logic inside the handle method.\n\nfrom django.core.management.base import BaseCommand\nfrom myapp.models import ExampleModel\n\nclass Command(BaseCommand):\n    help = 'Update ExampleModel instances'\n\n    def handle(self, *args, **kwargs):\n        examples = ExampleModel.objects.all()\n        for example in examples:\n            example.description = 'Updated description'\n            example.save()\n        self.stdout.write(self.style.SUCCESS('Successfully updated all ExampleModel instances'))",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Back_end/Django/custom_commands.html#advanced-command-features",
    "href": "Back_end/Django/custom_commands.html#advanced-command-features",
    "title": "Custom Commands",
    "section": "Advanced Command Features",
    "text": "Advanced Command Features\n\nUsing Transactions\n\nEnsure atomicity using database transactions.\n\nfrom django.core.management.base import BaseCommand\nfrom django.db import transaction\nfrom myapp.models import ExampleModel\n\nclass Command(BaseCommand):\n    help = 'Update ExampleModel instances'\n\n    @transaction.atomic\n    def handle(self, *args, **kwargs):\n        examples = ExampleModel.objects.all()\n        for example in examples:\n            example.description = 'Updated description'\n            example.save()\n        self.stdout.write(self.style.SUCCESS('Successfully updated all ExampleModel instances'))\n\n\nError Handling\n\nImplement error handling within your command\n\nfrom django.core.management.base import BaseCommand\nfrom django.db import transaction, DatabaseError\nfrom myapp.models import ExampleModel\n\nclass Command(BaseCommand):\n    help = 'Update ExampleModel instances'\n\n    @transaction.atomic\n    def handle(self, *args, **kwargs):\n        try:\n            examples = ExampleModel.objects.all()\n            for example in examples:\n                example.description = 'Updated description'\n                example.save()\n            self.stdout.write(self.style.SUCCESS('Successfully updated all ExampleModel instances'))\n        except DatabaseError as e:\n            self.stdout.write(self.style.ERROR(f'Error updating ExampleModel instances: {str(e)}'))\n\n\nScheduling Commands\n\nUse task schedulers like cron or Windows Task Scheduler to run your custom commands at scheduled intervals.\n\n# Example cron job to run custom command every day at midnight\n0 0 * * * /path/to/your/virtualenv/bin/python /path/to/your/project/manage.py my_custom_command",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Custom Commands"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html",
    "href": "Back_end/Django/authentication.html",
    "title": "Authentication",
    "section": "",
    "text": "DRF comes with several built-in authentication classes:\n\nBasicAuthentication: Uses HTTP Basic Authentication. It‚Äôs simple but not very secure as it sends credentials in plain text.\nSessionAuthentication: Uses Django‚Äôs session framework. It‚Äôs suitable for browser-based clients that have a CSRF token.\nTokenAuthentication: Uses token-based authentication. A token is provided to the client after the initial login, which must be included in the Authorization header of subsequent requests.\nRemoteUserAuthentication: Useful for integrating with existing authentication frameworks that rely on the REMOTE_USER environment variable.\nCustom Authentication: You can create custom authentication classes by subclassing BaseAuthentication.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#built-in-authentication-classes",
    "href": "Back_end/Django/authentication.html#built-in-authentication-classes",
    "title": "Authentication",
    "section": "",
    "text": "DRF comes with several built-in authentication classes:\n\nBasicAuthentication: Uses HTTP Basic Authentication. It‚Äôs simple but not very secure as it sends credentials in plain text.\nSessionAuthentication: Uses Django‚Äôs session framework. It‚Äôs suitable for browser-based clients that have a CSRF token.\nTokenAuthentication: Uses token-based authentication. A token is provided to the client after the initial login, which must be included in the Authorization header of subsequent requests.\nRemoteUserAuthentication: Useful for integrating with existing authentication frameworks that rely on the REMOTE_USER environment variable.\nCustom Authentication: You can create custom authentication classes by subclassing BaseAuthentication.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#configure-settings",
    "href": "Back_end/Django/authentication.html#configure-settings",
    "title": "Authentication",
    "section": "Configure Settings",
    "text": "Configure Settings\n# settings.py\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',  # Use session authentication\n        'rest_framework.authentication.TokenAuthentication',    # Use token authentication\n        # Add other authentication classes as needed\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',  # Ensure authenticated users have access\n    ],\n}",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#implement-authentication",
    "href": "Back_end/Django/authentication.html#implement-authentication",
    "title": "Authentication",
    "section": "Implement Authentication",
    "text": "Implement Authentication\n\nSession Authentication\n\nFor session authentication, ensure you have ‚Äòrest_framework.authentication.SessionAuthentication‚Äô in your DEFAULT_AUTHENTICATION_CLASSES. This relies on Django‚Äôs session framework and requires users to log in via the web interface or obtain a session cookie through a login view.\n\n\n\nToken Authentication\nFor token authentication:\n\nGenerate Tokens: Use Django‚Äôs Token model to generate tokens for users. You can create tokens manually via Django admin or automatically when a user is created.\nInclude Token in Requests: Clients must include the token in the Authorization header of API requests:\n\n\nInstall the package\npip install djangorestframework\npip install djangorestframework-simplejwt\n\n\nAdd rest_framework and rest_framework.authtoken to your INSTALLED_APPS:\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'rest_framework.authtoken',\n]\n\n\nRun migrations to create the token model\npython manage.py migrate\n\n\nCreate a view to generate tokens\nfrom rest_framework.authtoken.views import obtain_auth_token\nfrom django.urls import path\n\nurlpatterns = [\n    path('api-token-auth/', obtain_auth_token, name='api_token_auth'),\n]\n\n\nUse tokens in your API requests\nAuthorization: Token &lt;your_token_key&gt;\nDRF provides a built-in view (ObtainAuthToken) to obtain tokens via POST requests to /api/token/.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#custom-authentication",
    "href": "Back_end/Django/authentication.html#custom-authentication",
    "title": "Authentication",
    "section": "Custom Authentication",
    "text": "Custom Authentication\n\nYou can implement custom authentication by subclassing BaseAuthentication and overriding the authenticate method.\n\nfrom rest_framework.authentication import BaseAuthentication\nfrom rest_framework.exceptions import AuthenticationFailed\n\nclass CustomAuthentication(BaseAuthentication):\n    def authenticate(self, request):\n        auth = request.headers.get('Authorization')\n        if not auth:\n            return None\n        if auth != 'expected_token':\n            raise AuthenticationFailed('Invalid token')\n        return (None, None)  # Return a tuple of (user, auth)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#permission-classes",
    "href": "Back_end/Django/authentication.html#permission-classes",
    "title": "Authentication",
    "section": "Permission Classes",
    "text": "Permission Classes\n\nIn addition to authentication, you need to handle permissions. DRF provides several built-in permission classes like IsAuthenticated, IsAdminUser, and IsAuthenticatedOrReadOnly. You can also create custom permission classes by subclassing BasePermission.\n\nfrom rest_framework.permissions import BasePermission\n\nclass IsOwner(BasePermission):\n    def has_object_permission(self, request, view, obj):\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#using-authentication-and-permissions-together",
    "href": "Back_end/Django/authentication.html#using-authentication-and-permissions-together",
    "title": "Authentication",
    "section": "Using Authentication and Permissions Together",
    "text": "Using Authentication and Permissions Together\n\nYou typically use both authentication and permissions in your views or viewsets.\n\nfrom rest_framework.views import APIView\nfrom rest_framework.permissions import IsAuthenticated\n\nclass MyView(APIView):\n    authentication_classes = [TokenAuthentication]\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        return Response({'message': 'Hello, world!'})",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/authentication.html#set-up-views-and-permissions",
    "href": "Back_end/Django/authentication.html#set-up-views-and-permissions",
    "title": "Authentication",
    "section": "Set Up Views and Permissions",
    "text": "Set Up Views and Permissions\n\nViews\n\nDefine views using DRF‚Äôs APIView, ViewSet, or @api_view decorator, and apply authentication requirements:\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated\n\nclass ExampleView(APIView):\n    permission_classes = [IsAuthenticated]  # Requires authenticated access\n\n    def get(self, request):\n        content = {'message': 'Hello, World!'}\n        return Response(content)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Authentication"
    ]
  },
  {
    "objectID": "Back_end/Django/serialization.html",
    "href": "Back_end/Django/serialization.html",
    "title": "Serialization",
    "section": "",
    "text": "Model -&gt; Serializer -&gt; View -&gt; URL -&gt; Project URL",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Back_end/Django/serialization.html#basic-config",
    "href": "Back_end/Django/serialization.html#basic-config",
    "title": "Serialization",
    "section": "Basic config",
    "text": "Basic config\nclass ClientSerializer(serializers.ModelSerializer):\n    # practitioners = PractitionerSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Client\n        fields = '__all__'",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Back_end/Django/serialization.html#adding-custom-fields",
    "href": "Back_end/Django/serialization.html#adding-custom-fields",
    "title": "Serialization",
    "section": "Adding Custom Fields",
    "text": "Adding Custom Fields\nclass PractitionerSerializer(serializers.ModelSerializer):\n    client_ids = serializers.PrimaryKeyRelatedField(many=True, read_only=True, source='clients')\n\n    class Meta:\n        model = Practitioner\n        fields = '__all__'",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Back_end/Django/serialization.html#adding-relations-fields",
    "href": "Back_end/Django/serialization.html#adding-relations-fields",
    "title": "Serialization",
    "section": "Adding Relations Fields",
    "text": "Adding Relations Fields\nclass QuestionnaireSerializer(serializers.ModelSerializer):\n    questions = QuestionSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Questionnaire\n        fields = '__all__'",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Serialization"
    ]
  },
  {
    "objectID": "Back_end/Django/users.html",
    "href": "Back_end/Django/users.html",
    "title": "User Models",
    "section": "",
    "text": "Create a custom user model by extending AbstractUser\n\n# base/models.py\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass CustomUser(AbstractUser):\n    # Add additional fields if necessary\n    phone_number = models.CharField(max_length=15, blank=True)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Back_end/Django/users.html#custom-user-model",
    "href": "Back_end/Django/users.html#custom-user-model",
    "title": "User Models",
    "section": "",
    "text": "Create a custom user model by extending AbstractUser\n\n# base/models.py\nfrom django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\nclass CustomUser(AbstractUser):\n    # Add additional fields if necessary\n    phone_number = models.CharField(max_length=15, blank=True)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Back_end/Django/users.html#update-settings.py-to-use-the-custom-user-model",
    "href": "Back_end/Django/users.html#update-settings.py-to-use-the-custom-user-model",
    "title": "User Models",
    "section": "Update settings.py to use the custom user model",
    "text": "Update settings.py to use the custom user model\n# myproject/settings.py\nAUTH_USER_MODEL = 'base.CustomUser'",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Back_end/Django/users.html#user-registration-and-authentication",
    "href": "Back_end/Django/users.html#user-registration-and-authentication",
    "title": "User Models",
    "section": "User Registration and Authentication",
    "text": "User Registration and Authentication\n\nSerializers\n\nCreate serializers for user registration and authentication\n\n# base/serializers.py\nfrom rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.password_validation import validate_password\n\nUser = get_user_model()\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])\n    password2 = serializers.CharField(write_only=True, required=True)\n\n    class Meta:\n        model = User\n        fields = ('username', 'password', 'password2', 'email', 'first_name', 'last_name')\n\n    def validate(self, attrs):\n        if attrs['password'] != attrs['password2']:\n            raise serializers.ValidationError({\"password\": \"Password fields didn't match.\"})\n        return attrs\n\n    def create(self, validated_data):\n        user = User.objects.create(\n            username=validated_data['username'],\n            email=validated_data['email'],\n            first_name=validated_data['first_name'],\n            last_name=validated_data['last_name']\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name', 'last_name', 'phone_number')\n\nclass CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        # Add custom claims\n        token['email'] = user.email\n        return token\n        \n\n\nViews\n# base/views.py\nfrom rest_framework import generics, permissions\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework_simplejwt.views import TokenObtainPairView\nfrom django.contrib.auth import get_user_model\nfrom .serializers import UserRegistrationSerializer, UserSerializer, CustomTokenObtainPairSerializer\n\nUser = get_user_model()\n\nclass UserRegistrationView(generics.CreateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserRegistrationSerializer\n    permission_classes = [permissions.AllowAny]\n\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    serializer_class = CustomTokenObtainPairSerializer\n\nclass UserProfileView(APIView):\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        serializer = UserSerializer(user)\n        return Response(serializer.data)\n\n\n\nURLs\n# base/urls.py\nfrom django.urls import path\nfrom rest_framework_simplejwt.views import TokenRefreshView\nfrom .views import UserRegistrationView, CustomTokenObtainPairView, UserProfileView\n\nurlpatterns = [\n    path('register/', UserRegistrationView.as_view(), name='register'),\n    path('login/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n    path('profile/', UserProfileView.as_view(), name='profile'),\n]\n\nInclude these URLs in the project‚Äôs main urls.py:\n\n# myproject/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('base.urls')),\n    # Other URLs...\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Back_end/Django/users.html#api-endpoints",
    "href": "Back_end/Django/users.html#api-endpoints",
    "title": "User Models",
    "section": "API Endpoints",
    "text": "API Endpoints\nPOST /api/auth/register/: Register a new user.\nPOST /api/auth/login/: Login and obtain a JWT token.\nPOST /api/auth/token/refresh/: Refresh the JWT token.\nGET /api/auth/profile/: Get the current user's profile.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Back_end/Django/users.html#example-requests",
    "href": "Back_end/Django/users.html#example-requests",
    "title": "User Models",
    "section": "Example Requests",
    "text": "Example Requests\ncurl -X POST http://127.0.0.1:8000/api/auth/register/ -d '{\"username\": \"testuser\", \"password\": \"testpass123\", \"email\": \"testuser@example.com\"}' -H \"Content-Type: application/json\"\ncurl -X POST http://127.0.0.1:8000/api/auth/login/ -d '{\"username\": \"testuser\", \"password\": \"testpass123\"}' -H \"Content-Type: application/json\"\ncurl -X POST http://127.0.0.1:8000/api/auth/token/refresh/ -d '{\"refresh\": \"your_refresh_token\"}' -H \"Content-Type: application/json\"\ncurl -H \"Authorization: Bearer your_access_token\" http://127.0.0.1:8000/api/auth/profile/",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "User Models"
    ]
  },
  {
    "objectID": "Back_end/Django/django_x.html",
    "href": "Back_end/Django/django_x.html",
    "title": "DjangoX",
    "section": "",
    "text": "Use template\n\nTODO: update template\n\n\n\n Back to top",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DjangoX"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html",
    "href": "Back_end/Django/permissions.html",
    "title": "Permissions",
    "section": "",
    "text": "DRF comes with several built-in permission classes that can be used to restrict access to your API views:\n\n\nAllowAny: Grants access to any user, whether authenticated or not. It is the default permission class.\nIsAuthenticated: Grants access only to authenticated users.\nIsAdminUser: Grants access only to users with admin status.\nIsAuthenticatedOrReadOnly: Grants read-only access to unauthenticated users and full access to authenticated users.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#built-in-permission-classes",
    "href": "Back_end/Django/permissions.html#built-in-permission-classes",
    "title": "Permissions",
    "section": "",
    "text": "DRF comes with several built-in permission classes that can be used to restrict access to your API views:\n\n\nAllowAny: Grants access to any user, whether authenticated or not. It is the default permission class.\nIsAuthenticated: Grants access only to authenticated users.\nIsAdminUser: Grants access only to users with admin status.\nIsAuthenticatedOrReadOnly: Grants read-only access to unauthenticated users and full access to authenticated users.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#using-permission-classes",
    "href": "Back_end/Django/permissions.html#using-permission-classes",
    "title": "Permissions",
    "section": "Using Permission Classes",
    "text": "Using Permission Classes\n\nYou can set permission classes at the view level or globally in your settings.py file.\n\n\nView Level\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.views import APIView\n\nclass MyView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        return Response({\"message\": \"Hello, world!\"})\n\n\nGlobal Level\n# settings.py\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#custom-permission-classes",
    "href": "Back_end/Django/permissions.html#custom-permission-classes",
    "title": "Permissions",
    "section": "Custom Permission Classes",
    "text": "Custom Permission Classes\n\nDRF allows you to define custom permission classes by subclassing BasePermission. Custom permissions can be used to implement more complex logic.\n\n\nExample: Custom Permission Class\nfrom rest_framework.permissions import BasePermission\n\nclass IsOwner(BasePermission):\n    def has_object_permission(self, request, view, obj):\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#permission-methods",
    "href": "Back_end/Django/permissions.html#permission-methods",
    "title": "Permissions",
    "section": "Permission Methods",
    "text": "Permission Methods\nCustom permissions override two main methods: - has_permission(self, request, view): Checks permissions at the view level. - has_object_permission(self, request, view, obj): Checks permissions at the object level.\n\nExample: Custom Permission Methods\nclass IsOwner(BasePermission):\n    def has_permission(self, request, view):\n        # Custom logic for view level permission\n        return True\n\n    def has_object_permission(self, request, view, obj):\n        # Custom logic for object level permission\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#combining-permissions",
    "href": "Back_end/Django/permissions.html#combining-permissions",
    "title": "Permissions",
    "section": "Combining Permissions",
    "text": "Combining Permissions\n\nYou can combine multiple permission classes to apply multiple layers of permission checks.\n\nfrom rest_framework.permissions import IsAuthenticated, IsAdminUser\n\nclass MyView(APIView):\n    permission_classes = [IsAuthenticated, IsAdminUser]\n\n    def get(self, request):\n        return Response({\"message\": \"Hello, world!\"})",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#third-party-permissions",
    "href": "Back_end/Django/permissions.html#third-party-permissions",
    "title": "Permissions",
    "section": "Third-Party Permissions",
    "text": "Third-Party Permissions\nDRF integrates with several third-party libraries to extend the default permissions system. For example:\n\ndjango-guardian: Provides per-object permissions.\ndjango-rules: Allows for rule-based permissions.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#best-practices",
    "href": "Back_end/Django/permissions.html#best-practices",
    "title": "Permissions",
    "section": "Best Practices",
    "text": "Best Practices\n\nLeast Privilege Principle: Only give users the minimum permissions they need to perform their tasks.\nReuse Custom Permissions: Create custom permissions for reusable and consistent permission logic across views.\nObject-Level Permissions: Use object-level permissions to fine-tune access control, especially for models with user-specific data.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/permissions.html#advanced-permissions",
    "href": "Back_end/Django/permissions.html#advanced-permissions",
    "title": "Permissions",
    "section": "Advanced Permissions",
    "text": "Advanced Permissions\n\nFor advanced use cases, you can create permissions that depend on request data, view arguments, or any other contextual information.\n\n\nExample: Permission Based on Query Parameter\n\nclass QueryParameterPermission(BasePermission):\n    def has_permission(self, request, view):\n        return 'allow' in request.query_params",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Permissions"
    ]
  },
  {
    "objectID": "Back_end/Django/admin.html",
    "href": "Back_end/Django/admin.html",
    "title": "Admin",
    "section": "",
    "text": "from django.contrib import admin\nfrom .models import ExampleModel\n\n@admin.register(ExampleModel)\nclass ExampleModelAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name',)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Back_end/Django/admin.html#register-models-in-admin",
    "href": "Back_end/Django/admin.html#register-models-in-admin",
    "title": "Admin",
    "section": "",
    "text": "from django.contrib import admin\nfrom .models import ExampleModel\n\n@admin.register(ExampleModel)\nclass ExampleModelAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name',)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Back_end/Django/admin.html#customize-admin-interface",
    "href": "Back_end/Django/admin.html#customize-admin-interface",
    "title": "Admin",
    "section": "Customize Admin Interface",
    "text": "Customize Admin Interface\n\nModelAdmin Options\nfrom django.contrib import admin\nfrom .models import ExampleModel\n\n@admin.register(ExampleModel)\nclass ExampleModelAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\n    search_fields = ('name',)\n    list_filter = ('name',)\n    ordering = ('name',)\n    fields = ('name', 'description')\n    readonly_fields = ('created_at',)\n\n\nInlines\nfrom django.contrib import admin\nfrom .models import ExampleModel, RelatedModel\n\nclass RelatedModelInline(admin.TabularInline):\n    model = RelatedModel\n    extra = 1\n\n@admin.register(ExampleModel)\nclass ExampleModelAdmin(admin.ModelAdmin):\n    inlines = [RelatedModelInline]\n\n\nCustom Actions\nfrom django.contrib import admin\nfrom .models import ExampleModel\n\n@admin.register(ExampleModel)\nclass ExampleModelAdmin(admin.ModelAdmin):\n    actions = ['make_published']\n\n    def make_published(self, request, queryset):\n        queryset.update(status='published')\n    make_published.short_description = \"Mark selected stories as published\"",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Admin"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html",
    "href": "Back_end/Django/views.html",
    "title": "Views",
    "section": "",
    "text": "Simple functions that take a request and return a response.\nUse decorators like @api_view to specify allowed methods (GET, POST, etc.).\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['GET', 'POST'])\ndef my_view(request):\n    if request.method == 'GET':\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n    elif request.method == 'POST':\n        data = request.data\n        return Response(data)\n\n\n\n\nInherit from Django‚Äôs View or DRF‚Äôs APIView.\nProvide more structure and functionality.\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass MyView(APIView):\n    def get(self, request):\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n\n    def post(self, request):\n        data = request.data\n        return Response(data)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html#types-of-views-in-django",
    "href": "Back_end/Django/views.html#types-of-views-in-django",
    "title": "Views",
    "section": "",
    "text": "Simple functions that take a request and return a response.\nUse decorators like @api_view to specify allowed methods (GET, POST, etc.).\n\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\n\n@api_view(['GET', 'POST'])\ndef my_view(request):\n    if request.method == 'GET':\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n    elif request.method == 'POST':\n        data = request.data\n        return Response(data)\n\n\n\n\nInherit from Django‚Äôs View or DRF‚Äôs APIView.\nProvide more structure and functionality.\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass MyView(APIView):\n    def get(self, request):\n        data = {\"message\": \"Hello, world!\"}\n        return Response(data)\n\n    def post(self, request):\n        data = request.data\n        return Response(data)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html#built-in-generic-views",
    "href": "Back_end/Django/views.html#built-in-generic-views",
    "title": "Views",
    "section": "Built-in Generic Views",
    "text": "Built-in Generic Views\nDjango provides a set of built-in generic views that handle common patterns. Examples include: - ListView: Display a list of objects. - DetailView: Display a single object. - CreateView: Display a form for creating a new object. - UpdateView: Display a form for updating an existing object. - DeleteView: Display a confirmation page for deleting an object.\n\nGeneric Views\n\nSimplify common patterns (CRUD operations) by providing pre-built classes.\nExample: ListAPIView, CreateAPIView, RetrieveAPIView, UpdateAPIView, DestroyAPIView\n\nfrom rest_framework.generics import ListCreateAPIView\nfrom .models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelListCreateView(ListCreateAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html#viewsets",
    "href": "Back_end/Django/views.html#viewsets",
    "title": "Views",
    "section": "ViewSets",
    "text": "ViewSets\n\nCombine logic for multiple views in a single class.\nAutomatically create URLs for CRUD operations using a Router.\n\nfrom rest_framework import viewsets\nfrom .models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html#using-mixins-with-generic-views",
    "href": "Back_end/Django/views.html#using-mixins-with-generic-views",
    "title": "Views",
    "section": "Using Mixins with Generic Views",
    "text": "Using Mixins with Generic Views\nMixins provide reusable chunks of functionality. Common mixins include:\n\nCreateModelMixin: Adds create capability.\nListModelMixin: Adds list capability.\nRetrieveModelMixin: Adds retrieve capability.\nUpdateModelMixin: Adds update capability.\nDestroyModelMixin: Adds delete capability.\n\n\nYou can combine mixins with GenericAPIView for custom behavior:\n\nfrom rest_framework import mixins, generics\nfrom .models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelView(mixins.ListModelMixin, mixins.CreateModelMixin, generics.GenericAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html#url-routing",
    "href": "Back_end/Django/views.html#url-routing",
    "title": "Views",
    "section": "URL Routing",
    "text": "URL Routing\nDRF‚Äôs routers automatically generate URL patterns for ViewSets. Common routers include:\n\nSimpleRouter: Basic router for CRUD operations.\nDefaultRouter: Extends SimpleRouter with additional functionality like a default API root view.\n\nfrom rest_framework.routers import DefaultRouter\nfrom .views import MyModelViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'mymodel', MyModelViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/Django/views.html#customizing-views",
    "href": "Back_end/Django/views.html#customizing-views",
    "title": "Views",
    "section": "Customizing Views",
    "text": "Customizing Views\n\nPermissions\n\nControl access to views.\nUse permission_classes attribute or override get_permissions method.\n\nfrom rest_framework.permissions import IsAuthenticated\n\nclass MyView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        data = {\"message\": \"Hello, authenticated user!\"}\n        return Response(data)\n\n\nThrottling\n\nLimit the rate of requests.\nUse throttle_classes attribute or override get_throttles method.\n\nfrom rest_framework.throttling import UserRateThrottle\n\nclass MyView(APIView):\n    throttle_classes = [UserRateThrottle]\n\n    def get(self, request):\n        data = {\"message\": \"Hello, throttled user!\"}\n        return Response(data)\n\n\nFiltering, Searching, and Ordering\n\nUse DjangoFilterBackend, SearchFilter, and OrderingFilter for filtering, searching, and ordering querysets.\n\nfrom rest_framework import filters\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass MyModelListCreateView(ListCreateAPIView):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['field1', 'field2']\n    search_fields = ['field1', 'field2']\n    ordering_fields = ['field1', 'field2']",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Views"
    ]
  },
  {
    "objectID": "Back_end/influx.html",
    "href": "Back_end/influx.html",
    "title": "Influx",
    "section": "",
    "text": "Inside WSL\n# Ubuntu/Debian AMD64\ncurl -O https://dl.influxdata.com/influxdb/releases/influxdb2_2.7.3-1_amd64.deb\nsudo dpkg -i influxdb2_2.7.3-1_amd64.deb",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#installation",
    "href": "Back_end/influx.html#installation",
    "title": "Influx",
    "section": "",
    "text": "Inside WSL\n# Ubuntu/Debian AMD64\ncurl -O https://dl.influxdata.com/influxdb/releases/influxdb2_2.7.3-1_amd64.deb\nsudo dpkg -i influxdb2_2.7.3-1_amd64.deb",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#to-view-all-services",
    "href": "Back_end/influx.html#to-view-all-services",
    "title": "Influx",
    "section": "To view all Services",
    "text": "To view all Services\nsystemctl --type=service --state=running\npstree | head -5\n\n!ps\n\n    PID TTY          TIME CMD\n2048646 pts/18   00:00:00 ps\n\n\n\n!pstree\n\nsystemd‚îÄ‚î¨‚îÄ2*[agetty]\n        ‚îú‚îÄcron\n        ‚îú‚îÄdbus-daemon\n        ‚îú‚îÄgrafana‚îÄ‚îÄ‚îÄ20*[{grafana}]\n        ‚îú‚îÄinfluxd‚îÄ‚îÄ‚îÄ53*[{influxd}]\n        ‚îú‚îÄinit-systemd(Ub‚îÄ‚î¨‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(400)‚îÄ‚î¨‚îÄbash‚îÄ‚îÄ‚îÄtmux: client\n        ‚îÇ                 ‚îÇ                            ‚îú‚îÄpython‚îÄ‚îÄ‚îÄ22*[{python}]\n        ‚îÇ                 ‚îÇ                            ‚îî‚îÄtmux: server‚îÄ‚î¨‚îÄbash‚îÄ‚îÄ‚îÄ+\n        ‚îÇ                 ‚îÇ                                           ‚îú‚îÄ6*[bash+\n        ‚îÇ                 ‚îÇ                                           ‚îú‚îÄbash‚îÄ‚îÄ‚îÄ+\n        ‚îÇ                 ‚îÇ                                           ‚îî‚îÄbash‚îÄ‚îÄ‚îÄ+\n        ‚îÇ                 ‚îú‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(707)‚îÄ‚îÄ‚îÄbash\n        ‚îÇ                 ‚îú‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(8620)‚îÄ‚îÄ‚îÄbash‚îÄ‚îÄ‚îÄtmux: client\n        ‚îÇ                 ‚îú‚îÄSessionLeader‚îÄ‚îÄ‚îÄRelay(1997513)‚îÄ‚îÄ‚îÄbash‚îÄ‚îÄ‚îÄtmux: clien+\n        ‚îÇ                 ‚îú‚îÄinit‚îÄ‚îÄ‚îÄ{init}\n        ‚îÇ                 ‚îú‚îÄlogin‚îÄ‚îÄ‚îÄbash\n        ‚îÇ                 ‚îî‚îÄ{init-systemd(Ub}\n        ‚îú‚îÄnetworkd-dispat\n        ‚îú‚îÄpackagekitd‚îÄ‚îÄ‚îÄ2*[{packagekitd}]\n        ‚îú‚îÄpolkitd‚îÄ‚îÄ‚îÄ2*[{polkitd}]\n        ‚îú‚îÄrsyslogd‚îÄ‚îÄ‚îÄ3*[{rsyslogd}]\n        ‚îú‚îÄsmtpd‚îÄ‚îÄ‚îÄ6*[smtpd]\n        ‚îú‚îÄsnapd‚îÄ‚îÄ‚îÄ18*[{snapd}]\n        ‚îú‚îÄ16*[snapfuse]\n        ‚îú‚îÄsshd\n        ‚îú‚îÄsubiquity-serve‚îÄ‚îÄ‚îÄpython3.10‚îÄ‚î¨‚îÄpython3\n        ‚îÇ                              ‚îî‚îÄ5*[{python3.10}]\n        ‚îú‚îÄsystemd‚îÄ‚îÄ‚îÄ(sd-pam)\n        ‚îú‚îÄsystemd-journal\n        ‚îú‚îÄsystemd-logind\n        ‚îú‚îÄsystemd-resolve\n        ‚îú‚îÄsystemd-udevd‚îÄ‚îÄ‚îÄ2*[systemd-udevd]\n        ‚îî‚îÄunattended-upgr‚îÄ‚îÄ‚îÄ{unattended-upgr}",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#server-settings",
    "href": "Back_end/influx.html#server-settings",
    "title": "Influx",
    "section": "Server Settings",
    "text": "Server Settings\n\nTo start influx server\nsudo service influxdb start --http-bind-address :8080\n\n\nShow Status of influx server\nsudo service influxdb status\n\n\nTo Stop influx server\nsudo service influxdb stop",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#influxdb-oss-urls",
    "href": "Back_end/influx.html#influxdb-oss-urls",
    "title": "Influx",
    "section": "InfluxDB OSS URLs",
    "text": "InfluxDB OSS URLs\nhttp://localhost:8086/",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#t0-change-ports",
    "href": "Back_end/influx.html#t0-change-ports",
    "title": "Influx",
    "section": "T0 change ports",
    "text": "T0 change ports\ninfluxd --http-bind-address :8080",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#to-setup-influx-server",
    "href": "Back_end/influx.html#to-setup-influx-server",
    "title": "Influx",
    "section": "To setup influx server",
    "text": "To setup influx server\n\nFirst step, Must do\n\ninflux setup \\\n  --username bthek1 \\\n  --password &lt;password&gt; \\\n  --token TOKEN \\\n  --org ORGANIZATION_NAME \\\n  --bucket BUCKET_NAME \\\n  --force",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#organisation-settings",
    "href": "Back_end/influx.html#organisation-settings",
    "title": "Influx",
    "section": "Organisation Settings",
    "text": "Organisation Settings\n\nTo show organisation list\ninflux org ls",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#bucket-settings",
    "href": "Back_end/influx.html#bucket-settings",
    "title": "Influx",
    "section": "Bucket Settings",
    "text": "Bucket Settings\n\nTo show Bucket list\ninflux bucket ls\n\n\nTo create bucket\ninflux bucket create --name &lt;name&gt; -c &lt;config-file&gt;\n\n\nTo enter data to bucket\ninflux write --bucket sample-bucket --url https://influx-testdata.s3.amazonaws.com/air-sensor-data-annotated.csv\ninflux write -b energy_data -f 'energy.lp'\n\n\nTo query data from influx\ninflux query 'from(bucket:\\\"sample-bucket\\\") |&gt; range(start:-30m)'\ninflux query 'from(bucket: \"sample-bucket\")\n  |&gt; range(start:-4h , stop: -0m)\n  |&gt; filter(fn: (r) =&gt; r[\"_measurement\"] == \"airSensors\")\n  |&gt; filter(fn: (r) =&gt; r[\"_field\"] == \"temperature\")\n  |&gt; aggregateWindow(every: 1m, fn: mean, createEmpty: false)\n  |&gt; yield(name: \"mean\")'",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#user-settings",
    "href": "Back_end/influx.html#user-settings",
    "title": "Influx",
    "section": "User settings",
    "text": "User settings\n\nTo create new user\ninflux user create -n &lt;username&gt; -p &lt;password&gt; -o &lt;org-name&gt; \ninflux user create -n ben -p Asdf,mnb1234 -o phisaver\n\n\nTo show user list\ninflux user ls\n\n\nTo delete user\ninflux user delete -i &lt;id&gt;\n\n\nTo delete user\ninflux user update -i &lt;user-id&gt; -n &lt;new-username&gt;",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#task",
    "href": "Back_end/influx.html#task",
    "title": "Influx",
    "section": "Task",
    "text": "Task\nimport influxdata/influxdb/sample\n\n\noption task = {\n  name: \"Collect air sensor sample data\",\n  every: '15m',\n}\n\nsample.data(set: \"airSensor\")\n    |&gt; to(bucket: \"example-bucket\")",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/influx.html#python-version",
    "href": "Back_end/influx.html#python-version",
    "title": "Influx",
    "section": "Python Version",
    "text": "Python Version\n\nCreate config.ini file\n[APP]\nINFLUX_URL = &lt;INFLUX_URL&gt;\nINFLUX_TOKEN = &lt;INFLUX_TOKEN&gt;\nINFLUX_ORG = &lt;INFLUX_ORG_ID&gt;\nINFLUX_BUCKET = iot_center\nINFLUX_BUCKET_AUTH = iot_center_devices\n\n# Import the dependencies.\nimport configparser\nfrom datetime import datetime\nfrom uuid import uuid4\n\n# Import client library classes.\nfrom influxdb_client import Authorization, InfluxDBClient, Permission, PermissionResource, Point, WriteOptions\n\nfrom influxdb_client.client.write_api import SYNCHRONOUS\nimport influxdb_client\n\n# Get the configuration key-value pairs.\n\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')\n\n['config.ini']\n\n\n\n\nConnect to server using InfluxDBClient\n\nclient = InfluxDBClient(url=config.get('APP', 'INFLUX_URL'),\n                        token=config.get('APP', 'INFLUX_TOKEN'),\n                        org=config.get('APP', 'INFLUX_ORG'),)\n\n\nclient.ping()\n\nTrue\n\n\n\n\nAuth: create, list, delete\n\nauthorization_api = client.authorizations_api()\nauth_list = authorization_api.find_authorizations()\n\nfor auth in auth_list:\n    print(auth.token)\n\np_5lZramPcqYC4EPNRVpRhAFs4RvWc8cPXtt9exsIPH8ybJP3lKlf5KMKjLf2ueHFlcmo45ZBxeeU3ZtKQ-LDQ==\nCeAAU2CprLUJoammpG9G7JuGTZ2qosK_shCBdXZvnIai46GFf7VB8jfd8XV6yeAeRjAc8nwAYkyhYL5BhDji2g==\nU1HdRByFCwZJhoNaKqVg9tja0zHw23TO7-pUxSSFhzDxt740WZ1DRUZoRWx6Brs5lDRBJqU-bB11kkVGBxtNfg==\nIPPdYDQH2s43p7jCro1SI_oJ8aGhFjkDEpgMSFuGs-vXuKnOMy1mvQzVLBoth2tKmvJGpy6ePo5c93sO8xTUkg==\n\n\n\n\nBucket: create, list, delete\n\nbuckets_api = client.buckets_api()\nbucket_list = buckets_api.find_buckets()\n\n\nfor bucket in bucket_list.buckets:\n    print(bucket.name)\n\n_tasks\nsample-bucket\n_monitoring\nenergy_data\npower_data\ntest\nWeather\n\n\n\nclient = InfluxDBClient(url=config.get('APP', 'INFLUX_URL'),\n                        token=config.get('APP', 'INFLUX_TOKEN'),\n                        org=config.get('APP', 'INFLUX_ORG'),)\n\nbuckets_api = client.buckets_api()\nbucket_list = buckets_api.find_buckets()\nbucket_name = 'solar_forecast'\n\nif bucket_name not in [bucket.name for bucket in bucket_list.buckets]:\n    buckets_api.create_bucket(bucket_name = bucket_name)\nelse:\n    print('bucket already exists')\n\nbucket already exists\n\n\n\n# Specify the name of the bucket you want to delete\nbucket_name = \"your_bucket_name\"\n\ntry:\n    # Delete the bucket\n    client.buckets_api().delete_bucket(bucket_name=bucket_name)\n    print(f\"Bucket '{bucket_name}' deleted successfully.\")\nexcept ApiException as e:\n    print(f\"Failed to delete bucket '{bucket_name}': {e}\")\n\n\n\nOrganization: create, list, delete\n\nori_api = client.organizations_api()\norganization_list = ori_api.find_organizations()\n\n\nfor ori in organization_list:\n    print(ori.name)\n\nOrg1\n\n\n\n\nUser: create, list, delete\n\nusers_api = client.users_api()\n\n\nusers_list = users_api.find_users()\nusers_list\n\n{'links': {'_self': '/api/v2/users'},\n 'users': [{'id': '0ca78064bac9d000',\n            'links': {'_self': '/api/v2/users/0ca78064bac9d000'},\n            'name': 'ben',\n            'status': 'active'}]}\n\n\n\n\nQuery: create, list, delete\n\nimport pandas as pd\n\n\nquery_api = client.query_api()\n\nquery = '''from(bucket: \"sample-bucket\")\n  |&gt; range(start: 2024-02-28T03:50:00.000Z, stop: 2024-02-28T04:50:00.000Z)\n  |&gt; filter(fn: (r) =&gt; r[\"_measurement\"] == \"airSensors\")\n  |&gt; filter(fn: (r) =&gt; r[\"_field\"] == \"humidity\")\n  |&gt; filter(fn: (r) =&gt; r[\"sensor_id\"] == \"TLM0101\" or r[\"sensor_id\"] == \"TLM0102\")\n  |&gt; aggregateWindow(every: 1s, fn: mean, createEmpty: false)\n  |&gt; yield(name: \"mean\") \n  |&gt; pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")'''\n\n\ndata = query_api.query_data_frame(org=config.get('APP', 'INFLUX_ORG'), query=query)\n\n\ndata1 = data[0]\n\n\ndata1\n\n\n\n\n\n\n\n\nresult\ntable\n_start\n_stop\n_time\n_value\n_field\n_measurement\nsensor_id\n\n\n\n\n0\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:05+00:00\n34.889344\nhumidity\nairSensors\nTLM0101\n\n\n1\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:15+00:00\n34.919323\nhumidity\nairSensors\nTLM0101\n\n\n2\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:25+00:00\n34.929411\nhumidity\nairSensors\nTLM0101\n\n\n3\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:35+00:00\n34.920287\nhumidity\nairSensors\nTLM0101\n\n\n4\nmean\n0\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 03:50:45+00:00\n34.969323\nhumidity\nairSensors\nTLM0101\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n705\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:25+00:00\n35.477672\nhumidity\nairSensors\nTLM0102\n\n\n706\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:35+00:00\n35.434914\nhumidity\nairSensors\nTLM0102\n\n\n707\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:45+00:00\n35.466550\nhumidity\nairSensors\nTLM0102\n\n\n708\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:48:55+00:00\n35.433109\nhumidity\nairSensors\nTLM0102\n\n\n709\nmean\n1\n2024-02-28 03:50:00+00:00\n2024-02-28 04:50:00+00:00\n2024-02-28 04:49:05+00:00\n35.482699\nhumidity\nairSensors\nTLM0102\n\n\n\n\n710 rows √ó 9 columns\n\n\n\n\ndata1.loc[1]\n\nresult                               mean\ntable                                   0\n_start          2024-02-28 03:50:00+00:00\n_stop           2024-02-28 04:50:00+00:00\n_time           2024-02-28 03:50:15+00:00\n_value                          34.919323\n_field                           humidity\n_measurement                   airSensors\nsensor_id                         TLM0101\nName: 1, dtype: object\n\n\n\n\nWrite: create, list, delete\n\nfrom datetime import datetime\n\n\nwrite_Api = client.write_api(write_options=SYNCHRONOUS)\n\n\ndt = '2024-03-01 05:20:09'\ndate = pd.to_datetime(dt).strftime('%Y-%m-%dT%H:%M:%SZ')\ndate\n\n'2024-03-01T05:20:09Z'\n\n\n\ntimestamp = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\ntimestamp\n\n'2024-02-29T09:42:00Z'\n\n\n\ndictionary = {\"measurement\": \"h2o_feet\",\n              \"tags\": {\"location\": \"us-west\"},\n              \"fields\": {\"level\": 150},\n              \"time\": date\n             }\ndictionary\n\n{'measurement': 'h2o_feet',\n 'tags': {'location': 'us-west'},\n 'fields': {'level': 150},\n 'time': '2024-03-01T05:20:09Z'}\n\n\n\nwrite_Api.write(bucket=\"test\",org=\"Org1\", record=dictionary)\n\npath = '/home/ben/BENEDICT_Only/Benedict_Projects/Intership/Phisaver/data_phisaver/energy.lp'\n\n# Open the .lp file\nwith open(path, 'r') as file:\n    # Read the first 5 lines\n    for line in file:\n        write_Api.write(bucket=bucket_name, \n                        org=\"Org1\",\n                        record=line.strip())\nwith open(path, 'r') as file:\n    lp_content = file.read()\nfor line in tqdm(text.split('\\n')):\n        write_Api.write(bucket='test', \n                        org=\"Org1\",\n                        record=line.strip())",
    "crumbs": [
      "Blog",
      "Back End",
      "Influx"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html",
    "href": "Back_end/Databases/mysql_&_mariadb.html",
    "title": "MariaDB and MySQL",
    "section": "",
    "text": "Origin: Developed by MySQL AB in 1995, acquired by Oracle Corporation in 2010.\nLicense: Open-source under the GPL license, with a commercial version available.\nCompatibility: Supports multiple platforms including Linux, Windows, macOS.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#introduction-to-mysql",
    "href": "Back_end/Databases/mysql_&_mariadb.html#introduction-to-mysql",
    "title": "MariaDB and MySQL",
    "section": "",
    "text": "Origin: Developed by MySQL AB in 1995, acquired by Oracle Corporation in 2010.\nLicense: Open-source under the GPL license, with a commercial version available.\nCompatibility: Supports multiple platforms including Linux, Windows, macOS.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#installation",
    "href": "Back_end/Databases/mysql_&_mariadb.html#installation",
    "title": "MariaDB and MySQL",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install mysql-server",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#introduction-to-mariadb",
    "href": "Back_end/Databases/mysql_&_mariadb.html#introduction-to-mariadb",
    "title": "MariaDB and MySQL",
    "section": "Introduction to MariaDB",
    "text": "Introduction to MariaDB\n\nOrigin: Created by the original developers of MySQL after Oracle acquired MySQL.\nCompatibility: Highly compatible with MySQL, allowing easy migration of databases.\nLicense: Open-source under the GPL license.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#installation-1",
    "href": "Back_end/Databases/mysql_&_mariadb.html#installation-1",
    "title": "MariaDB and MySQL",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install mariadb-server",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#configuration",
    "href": "Back_end/Databases/mysql_&_mariadb.html#configuration",
    "title": "MariaDB and MySQL",
    "section": "Configuration",
    "text": "Configuration\n\nConfiguration File: The primary configuration file is my.cnf or my.ini.\nLocation: Typically found in /etc/mysql/ or /etc/ on Linux and in the MariaDB installation directory on Windows.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#basic-usage",
    "href": "Back_end/Databases/mysql_&_mariadb.html#basic-usage",
    "title": "MariaDB and MySQL",
    "section": "Basic Usage",
    "text": "Basic Usage\nsudo systemctl start mariadb\nsudo systemctl stop mariadb\nsudo systemctl enable mariadb\n\nAccessing the MariaDB Shell\nmysql -u root -p\n\n\nCreating a Database\nCREATE DATABASE mydatabase;\n\n\nCreating a User and Granting Permissions\nCREATE USER 'myuser'@'localhost' IDENTIFIED BY 'mypassword';\nGRANT ALL PRIVILEGES ON mydatabase.* TO 'myuser'@'localhost';\nFLUSH PRIVILEGES;",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#database-operations",
    "href": "Back_end/Databases/mysql_&_mariadb.html#database-operations",
    "title": "MariaDB and MySQL",
    "section": "Database Operations",
    "text": "Database Operations\n\nCreating Tables\nUSE mydatabase;\nCREATE TABLE mytable (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100),\n    age INT\n);\n\n\nInserting Data\nINSERT INTO mytable (name, age) VALUES ('Alice', 30);\n\n\nQuerying Data\nSELECT * FROM mytable;\n\n\nUpdating Data\nUPDATE mytable SET age = 31 WHERE name = 'Alice';\n\n\nDeleting Data\nDELETE FROM mytable WHERE name = 'Alice';",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#advanced-features",
    "href": "Back_end/Databases/mysql_&_mariadb.html#advanced-features",
    "title": "MariaDB and MySQL",
    "section": "Advanced Features",
    "text": "Advanced Features\n\nStored Procedures\nDELIMITER //\nCREATE PROCEDURE myprocedure()\nBEGIN\n    SELECT * FROM mytable;\nEND //\nDELIMITER ;\nCALL myprocedure();\n\n\nTriggers\nCREATE TRIGGER before_insert_mytable\nBEFORE INSERT ON mytable\nFOR EACH ROW\nBEGIN\n    SET NEW.age = IF(NEW.age IS NULL, 0, NEW.age);\nEND;\n\n\nViews\nCREATE VIEW myview AS SELECT name, age FROM mytable WHERE age &gt; 25;\nSELECT * FROM myview;",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#security",
    "href": "Back_end/Databases/mysql_&_mariadb.html#security",
    "title": "MariaDB and MySQL",
    "section": "Security",
    "text": "Security\n\nSecure Installation\nsudo mysql_secure_installation\n\n\nUser Privileges\n\nGrant specific privileges to users instead of using GRANT ALL PRIVILEGES.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#performance-tuning",
    "href": "Back_end/Databases/mysql_&_mariadb.html#performance-tuning",
    "title": "MariaDB and MySQL",
    "section": "Performance Tuning",
    "text": "Performance Tuning\n\nIndexes\n\nUse indexes to speed up query performance.\n\nCREATE INDEX idx_name ON mytable (name);\n\n\nQuery Optimization\n\nUse the EXPLAIN statement to analyze query performance.\n\nEXPLAIN SELECT * FROM mytable WHERE name = 'Alice';\n\n\nCaching\n\nEnable query caching in the configuration file.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#backup-and-restore",
    "href": "Back_end/Databases/mysql_&_mariadb.html#backup-and-restore",
    "title": "MariaDB and MySQL",
    "section": "Backup and Restore",
    "text": "Backup and Restore\n\nBackup\nmysqldump -u root -p mydatabase &gt; mydatabase.sql\n\n\nRestore\nmysql -u root -p mydatabase &lt; mydatabase.sql",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#replication",
    "href": "Back_end/Databases/mysql_&_mariadb.html#replication",
    "title": "MariaDB and MySQL",
    "section": "Replication",
    "text": "Replication\n\nMaster-Slave Replication: Set up replication for high availability and scalability.\nConfiguration: Configure my.cnf on both master and slave servers.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#high-availability",
    "href": "Back_end/Databases/mysql_&_mariadb.html#high-availability",
    "title": "MariaDB and MySQL",
    "section": "High Availability",
    "text": "High Availability\n\nGalera Cluster: Use Galera Cluster for synchronous multi-master replication.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/mysql_&_mariadb.html#monitoring-and-maintenance",
    "href": "Back_end/Databases/mysql_&_mariadb.html#monitoring-and-maintenance",
    "title": "MariaDB and MySQL",
    "section": "Monitoring and Maintenance",
    "text": "Monitoring and Maintenance\n\nMonitoring Tools: Use tools like MySQLTuner and Percona Monitoring and Management (PMM) to monitor performance.\nLog Files: Monitor log files (error.log, slow-query.log) for troubleshooting.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "MariaDB and MySQL"
    ]
  },
  {
    "objectID": "Environments/poetry.html",
    "href": "Environments/poetry.html",
    "title": "Poetry",
    "section": "",
    "text": "curl -sSL https://install.python-poetry.org | python3 -\nOr\npip install poetry",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#install-poetry",
    "href": "Environments/poetry.html#install-poetry",
    "title": "Poetry",
    "section": "",
    "text": "curl -sSL https://install.python-poetry.org | python3 -\nOr\npip install poetry",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#config-poetry",
    "href": "Environments/poetry.html#config-poetry",
    "title": "Poetry",
    "section": "Config Poetry",
    "text": "Config Poetry\npoetry config --list\n\n!poetry config --list\n\ncache-dir = \"/home/ben/.cache/pypoetry\"\nexperimental.system-git-client = false\ninstaller.max-workers = null\ninstaller.modern-installation = true\ninstaller.no-binary = null\ninstaller.parallel = true\nkeyring.enabled = true\nsolver.lazy-wheel = true\nvirtualenvs.create = true\nvirtualenvs.in-project = true\nvirtualenvs.options.always-copy = false\nvirtualenvs.options.no-pip = false\nvirtualenvs.options.no-setuptools = false\nvirtualenvs.options.system-site-packages = false\nvirtualenvs.path = \"{cache-dir}/virtualenvs\"  # /home/ben/.cache/pypoetry/virtualenvs\nvirtualenvs.prefer-active-python = false\nvirtualenvs.prompt = \"{project_name}-py{python_version}\"\nwarnings.export = true\n\n\n\n!poetry config virtualenvs.in-project true",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#initallise-poetry",
    "href": "Environments/poetry.html#initallise-poetry",
    "title": "Poetry",
    "section": "Initallise Poetry",
    "text": "Initallise Poetry\npoetry init",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#managing-dependencies",
    "href": "Environments/poetry.html#managing-dependencies",
    "title": "Poetry",
    "section": "Managing Dependencies",
    "text": "Managing Dependencies\npoetry add requests",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#managing-development-dependencies",
    "href": "Environments/poetry.html#managing-development-dependencies",
    "title": "Poetry",
    "section": "Managing Development Dependencies",
    "text": "Managing Development Dependencies\npoetry add --dev pytest",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#updating-dependencies",
    "href": "Environments/poetry.html#updating-dependencies",
    "title": "Poetry",
    "section": "Updating Dependencies",
    "text": "Updating Dependencies\npoetry update",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#managing-virtual-environments",
    "href": "Environments/poetry.html#managing-virtual-environments",
    "title": "Poetry",
    "section": "Managing Virtual Environments",
    "text": "Managing Virtual Environments\npoetry install",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#activating-the-virtual-environment",
    "href": "Environments/poetry.html#activating-the-virtual-environment",
    "title": "Poetry",
    "section": "Activating the Virtual Environment",
    "text": "Activating the Virtual Environment\npoetry shell",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#deactivating-the-virtual-environment",
    "href": "Environments/poetry.html#deactivating-the-virtual-environment",
    "title": "Poetry",
    "section": "Deactivating the Virtual Environment",
    "text": "Deactivating the Virtual Environment\nexit",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#running-scripts-and-commands",
    "href": "Environments/poetry.html#running-scripts-and-commands",
    "title": "Poetry",
    "section": "Running Scripts and Commands",
    "text": "Running Scripts and Commands\n\nYou can run scripts or commands within the Poetry-managed environment without activating it explicitly:\n\npoetry run python my_script.py",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#publishing-packages",
    "href": "Environments/poetry.html#publishing-packages",
    "title": "Poetry",
    "section": "Publishing Packages",
    "text": "Publishing Packages\npoetry build  # Builds the package\npoetry publish  # Publishes the package to PyPI",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/poetry.html#exporting-to-requirements.txt",
    "href": "Environments/poetry.html#exporting-to-requirements.txt",
    "title": "Poetry",
    "section": "Exporting to requirements.txt",
    "text": "Exporting to requirements.txt\npoetry self add poetry-plugin-export\npoetry export -f requirements.txt -o requirements.txt --without-hashes",
    "crumbs": [
      "Blog",
      "Environments",
      "Poetry"
    ]
  },
  {
    "objectID": "Environments/pipenv.html",
    "href": "Environments/pipenv.html",
    "title": "Pipenv",
    "section": "",
    "text": "pip install pipenv",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#installation-of-pipenv",
    "href": "Environments/pipenv.html#installation-of-pipenv",
    "title": "Pipenv",
    "section": "",
    "text": "pip install pipenv",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#create-a-env",
    "href": "Environments/pipenv.html#create-a-env",
    "title": "Pipenv",
    "section": "Create a env",
    "text": "Create a env\npipenv install",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#create-a-env-1",
    "href": "Environments/pipenv.html#create-a-env-1",
    "title": "Pipenv",
    "section": "Create a env",
    "text": "Create a env\npipenv install django",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#remove-an-env",
    "href": "Environments/pipenv.html#remove-an-env",
    "title": "Pipenv",
    "section": "Remove an env",
    "text": "Remove an env\npipenv --rm",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#activate-already-created-pipenv-environment",
    "href": "Environments/pipenv.html#activate-already-created-pipenv-environment",
    "title": "Pipenv",
    "section": "Activate already created pipenv environment",
    "text": "Activate already created pipenv environment\npipenv shell",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#to-deactivate",
    "href": "Environments/pipenv.html#to-deactivate",
    "title": "Pipenv",
    "section": "To Deactivate",
    "text": "To Deactivate\ndeactivate",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/pipenv.html#installuninstall-dependencies",
    "href": "Environments/pipenv.html#installuninstall-dependencies",
    "title": "Pipenv",
    "section": "Install/Uninstall dependencies",
    "text": "Install/Uninstall dependencies\npipenv install django\npipenv uninstall django\n\nInstall dev dependencies\npipenv install nose --dev\n\n\nInstall from requirements.txt\npipenv install -r requirements.txt\n\n\nCheck security vulnerabilities\npipenv check\n\n\nCheck dependency graph\npipenv graph",
    "crumbs": [
      "Blog",
      "Environments",
      "Pipenv"
    ]
  },
  {
    "objectID": "Environments/venv.html",
    "href": "Environments/venv.html",
    "title": "Venv",
    "section": "",
    "text": "Standard Library: venv is part of the Python standard library, so it doesn‚Äôt require additional installation.\nLightweight: It provides a minimal and straightforward way to create isolated environments.\nNo Dependency Management: venv focuses solely on environment isolation. You still need to use pip to manage dependencies manually.",
    "crumbs": [
      "Blog",
      "Environments",
      "Venv"
    ]
  },
  {
    "objectID": "Environments/venv.html#create-a-virtual-enviroment",
    "href": "Environments/venv.html#create-a-virtual-enviroment",
    "title": "Venv",
    "section": "Create a Virtual Enviroment",
    "text": "Create a Virtual Enviroment\npython -m venv venv",
    "crumbs": [
      "Blog",
      "Environments",
      "Venv"
    ]
  },
  {
    "objectID": "Environments/venv.html#activate-the-virtual-environment",
    "href": "Environments/venv.html#activate-the-virtual-environment",
    "title": "Venv",
    "section": "Activate the Virtual Environment",
    "text": "Activate the Virtual Environment\nsource myenv/bin/activate",
    "crumbs": [
      "Blog",
      "Environments",
      "Venv"
    ]
  },
  {
    "objectID": "Environments/venv.html#deactivate-the-virtual-enviroment",
    "href": "Environments/venv.html#deactivate-the-virtual-enviroment",
    "title": "Venv",
    "section": "Deactivate the Virtual Enviroment",
    "text": "Deactivate the Virtual Enviroment\ndeactivate",
    "crumbs": [
      "Blog",
      "Environments",
      "Venv"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "GIT",
    "section": "",
    "text": "!git -h\n\nunknown option: -h\nusage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n           [--super-prefix=&lt;path&gt;] [--config-env=&lt;name&gt;=&lt;envvar&gt;]\n           &lt;command&gt; [&lt;args&gt;]",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#git-files",
    "href": "git.html#git-files",
    "title": "GIT",
    "section": "Git Files",
    "text": "Git Files\n.git : main file managing git stuff\n.gitignore : list of files and files types to ignore\n.github : git hub automation",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#install",
    "href": "git.html#install",
    "title": "GIT",
    "section": "Install",
    "text": "Install\nsudo apt install git",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#configure-git",
    "href": "git.html#configure-git",
    "title": "GIT",
    "section": "Configure Git",
    "text": "Configure Git\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#creating-new-repo",
    "href": "git.html#creating-new-repo",
    "title": "GIT",
    "section": "Creating New Repo",
    "text": "Creating New Repo\n\nOption 1: Create repo in Github and clone it\ngit clone &lt;ssh url&gt;\n\n\nOption 2: Create a Git repository locally\ngit init\n\nOptional\n\ngit branch -m main\n\nAdd and commit files\ngit add . \ngit commit -m \"Your commit message\"\n\n\nSet up a remote repository\ngit remote add &lt;name&gt; &lt;url&gt;\nExample:\ngit remote add origin your_remote_repository_url\n\n\nSync\ngit branch --set-upstream-to=&lt;remote name&gt;/&lt;remote branch&gt; &lt;local branch&gt;\n\nExample\n\ngit branch --set-upstream-to=origin/main master\n\nsync\n\ngit pull\n\n\nPush changes to remote\ngit push\n\n\nVerify remote connection\ngit remote -v",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#basic-commands",
    "href": "git.html#basic-commands",
    "title": "GIT",
    "section": "Basic Commands",
    "text": "Basic Commands\n\nChecking git status\ngit status\n\n\nAdding files to git repo\ngit add &lt;filenames&gt; \nFor adding all the files in the folder\ngit add * \n\n\nCommit it to local repo\ngit commit -m \"&lt;message&gt;\"\n\n\nFor pushing to github\ngit push",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#git-branches",
    "href": "git.html#git-branches",
    "title": "GIT",
    "section": "Git Branches",
    "text": "Git Branches\n\nFor viewing Braches\n\n!git branch\n\n* main\n\n\n\n\nAdding branches\ngit branch &lt;name&gt;\n\n\nSwitching branches\ngit checkout &lt;branch name&gt;\ncreate branch and move into it\ngit checkout -b &lt;branch name&gt;\n\n\nPush branch to github\ngit push --set-upstream &lt;online branch name&gt; &lt;local branch name&gt;\n\n\nDelete branch\ngit branch -d &lt;branch name&gt;",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#review-history",
    "href": "git.html#review-history",
    "title": "GIT",
    "section": "Review History",
    "text": "Review History\n\ngit log: Lists version history for the current branch\ngit log --follow [file]: Lists version history for a file, including renames\ngit diff [first-branch]...[second-branch]: Shows content differences between two branches\ngit show [commit]: Outputs metadata and content changes of the specified commit",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#git-forking",
    "href": "git.html#git-forking",
    "title": "GIT",
    "section": "Git Forking",
    "text": "Git Forking",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "git.html#git-submodules",
    "href": "git.html#git-submodules",
    "title": "GIT",
    "section": "Git submodules",
    "text": "Git submodules",
    "crumbs": [
      "Blog",
      "GIT"
    ]
  },
  {
    "objectID": "pip&git_release.html",
    "href": "pip&git_release.html",
    "title": "PIP and GIT release",
    "section": "",
    "text": "create ssh on computer\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nAdd it to ssh agent\nssh-add /c/Users/YOU/.ssh/id_ed25519\nConnect it to github\nssh -T git@github.com",
    "crumbs": [
      "Blog",
      "PIP and GIT release"
    ]
  },
  {
    "objectID": "pip&git_release.html#github-connection",
    "href": "pip&git_release.html#github-connection",
    "title": "PIP and GIT release",
    "section": "",
    "text": "create ssh on computer\nssh-keygen -t ed25519 -C \"your_email@example.com\"\nAdd it to ssh agent\nssh-add /c/Users/YOU/.ssh/id_ed25519\nConnect it to github\nssh -T git@github.com",
    "crumbs": [
      "Blog",
      "PIP and GIT release"
    ]
  },
  {
    "objectID": "pip&git_release.html#github-release",
    "href": "pip&git_release.html#github-release",
    "title": "PIP and GIT release",
    "section": "Github release",
    "text": "Github release\nAdd github token to .bashrc\nGenerate personal access classic token from github\nexport GITHUB_TOKEN=&lt;github_token&gt;\nbump version\nnbdev_bump_version\nnbdev_release_git",
    "crumbs": [
      "Blog",
      "PIP and GIT release"
    ]
  },
  {
    "objectID": "pip&git_release.html#install-twine",
    "href": "pip&git_release.html#install-twine",
    "title": "PIP and GIT release",
    "section": "Install twine",
    "text": "Install twine\npip install twine",
    "crumbs": [
      "Blog",
      "PIP and GIT release"
    ]
  },
  {
    "objectID": "pip&git_release.html#add-pypi-token-to-.pypirc",
    "href": "pip&git_release.html#add-pypi-token-to-.pypirc",
    "title": "PIP and GIT release",
    "section": "Add pypi token to ./pypirc",
    "text": "Add pypi token to ./pypirc\nGenerate token from Pypi\n[pypi]\n  username = __token__\n  password = &lt;pypi-token&gt;",
    "crumbs": [
      "Blog",
      "PIP and GIT release"
    ]
  },
  {
    "objectID": "pip&git_release.html#nbdev-command",
    "href": "pip&git_release.html#nbdev-command",
    "title": "PIP and GIT release",
    "section": "Nbdev Command",
    "text": "Nbdev Command\n\nFirst bump version\nnbdev_bump_version\n\n\npip upload\nnbdev_pypi",
    "crumbs": [
      "Blog",
      "PIP and GIT release"
    ]
  },
  {
    "objectID": "Environments/conda.html",
    "href": "Environments/conda.html",
    "title": "Conda",
    "section": "",
    "text": "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#install-conda",
    "href": "Environments/conda.html#install-conda",
    "title": "Conda",
    "section": "",
    "text": "wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#run-the-installer",
    "href": "Environments/conda.html#run-the-installer",
    "title": "Conda",
    "section": "Run the Installer",
    "text": "Run the Installer\nbash Miniconda3-latest-Linux-x86_64.sh",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#initialize-conda",
    "href": "Environments/conda.html#initialize-conda",
    "title": "Conda",
    "section": "Initialize Conda",
    "text": "Initialize Conda\nsource ~/.bashrc\nconda init",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#creating-and-managing-environments",
    "href": "Environments/conda.html#creating-and-managing-environments",
    "title": "Conda",
    "section": "Creating and Managing Environments",
    "text": "Creating and Managing Environments\nconda create --name myenv\n\nExample\n\nconda create --name myenv python=3.8 numpy pandas",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#activating-an-environment",
    "href": "Environments/conda.html#activating-an-environment",
    "title": "Conda",
    "section": "Activating an Environment",
    "text": "Activating an Environment\nconda activate myenv",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#deactivating-an-environment",
    "href": "Environments/conda.html#deactivating-an-environment",
    "title": "Conda",
    "section": "Deactivating an Environment",
    "text": "Deactivating an Environment\nconda deactivate",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#listing-environments",
    "href": "Environments/conda.html#listing-environments",
    "title": "Conda",
    "section": "Listing Environments",
    "text": "Listing Environments\nconda env list",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#installing-and-managing-packages",
    "href": "Environments/conda.html#installing-and-managing-packages",
    "title": "Conda",
    "section": "Installing and Managing Packages",
    "text": "Installing and Managing Packages\nconda install scipy",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#updating-packages",
    "href": "Environments/conda.html#updating-packages",
    "title": "Conda",
    "section": "Updating Packages",
    "text": "Updating Packages\nconda update numpy",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#removing-packages",
    "href": "Environments/conda.html#removing-packages",
    "title": "Conda",
    "section": "Removing Packages",
    "text": "Removing Packages\nconda remove scipy",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#removing-an-environment",
    "href": "Environments/conda.html#removing-an-environment",
    "title": "Conda",
    "section": "Removing an Environment",
    "text": "Removing an Environment\nconda env remove --name myenv",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#searching-for-packages",
    "href": "Environments/conda.html#searching-for-packages",
    "title": "Conda",
    "section": "Searching for Packages",
    "text": "Searching for Packages\nconda search beautifulsoup4",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/conda.html#using-channels",
    "href": "Environments/conda.html#using-channels",
    "title": "Conda",
    "section": "Using Channels",
    "text": "Using Channels\n\nConda channels are locations where packages are stored. By default, Conda uses the defaults channel, but you can add others like conda-forge.\n\n\nAdding a Channel\nconda config --add channels conda-forge\n\n\nInstalling from a Specific Channel\nconda install -c conda-forge opencv\n\n\nListing Conda Channels\nconda config --show channels\n\n!conda config --show channels\n\nchannels:\n  - defaults",
    "crumbs": [
      "Blog",
      "Environments",
      "Conda"
    ]
  },
  {
    "objectID": "Environments/direnv.html",
    "href": "Environments/direnv.html",
    "title": "Direnv",
    "section": "",
    "text": "sudo apt-get install direnv",
    "crumbs": [
      "Blog",
      "Environments",
      "Direnv"
    ]
  },
  {
    "objectID": "Environments/direnv.html#install",
    "href": "Environments/direnv.html#install",
    "title": "Direnv",
    "section": "",
    "text": "sudo apt-get install direnv",
    "crumbs": [
      "Blog",
      "Environments",
      "Direnv"
    ]
  },
  {
    "objectID": "Environments/direnv.html#configure-your-shell",
    "href": "Environments/direnv.html#configure-your-shell",
    "title": "Direnv",
    "section": "Configure Your Shell",
    "text": "Configure Your Shell\n\nAdd to bash\n\neval \"$(direnv hook bash)\"\n\nReload bash\n\nsource ~/.bashrc",
    "crumbs": [
      "Blog",
      "Environments",
      "Direnv"
    ]
  },
  {
    "objectID": "Environments/direnv.html#create-a-.envrc-file-in-your-project-directory",
    "href": "Environments/direnv.html#create-a-.envrc-file-in-your-project-directory",
    "title": "Direnv",
    "section": "Create a .envrc File in Your Project Directory",
    "text": "Create a .envrc File in Your Project Directory\n\nNavigate to your project directory and create a .envrc file:\n\ncd /path/to/your/project\necho 'export POETRY_ACTIVE=1' &gt; .envrc\necho 'source \"$(poetry env info --path)/bin/activate\"' &gt;&gt; .envrc",
    "crumbs": [
      "Blog",
      "Environments",
      "Direnv"
    ]
  },
  {
    "objectID": "Environments/direnv.html#allow-the-.envrc-file",
    "href": "Environments/direnv.html#allow-the-.envrc-file",
    "title": "Direnv",
    "section": "Allow the .envrc File",
    "text": "Allow the .envrc File\ndirenv allow",
    "crumbs": [
      "Blog",
      "Environments",
      "Direnv"
    ]
  },
  {
    "objectID": "Back_end/Databases/postgresql.html",
    "href": "Back_end/Databases/postgresql.html",
    "title": "PostgreSQL",
    "section": "",
    "text": "Update the package list before installing PostgreSQL\n\nsudo apt-get update\n\n\n\n\nInstall PostgreSQL and its client packages:\n\nsudo apt-get install postgresql postgresql-contrib\n\n\n\n\nCheck the PostgreSQL version to verify installation:\n\npsql --version",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "PostgreSQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/postgresql.html#install-postgresql",
    "href": "Back_end/Databases/postgresql.html#install-postgresql",
    "title": "PostgreSQL",
    "section": "",
    "text": "Update the package list before installing PostgreSQL\n\nsudo apt-get update\n\n\n\n\nInstall PostgreSQL and its client packages:\n\nsudo apt-get install postgresql postgresql-contrib\n\n\n\n\nCheck the PostgreSQL version to verify installation:\n\npsql --version",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "PostgreSQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/postgresql.html#initialize-and-configure-postgresql",
    "href": "Back_end/Databases/postgresql.html#initialize-and-configure-postgresql",
    "title": "PostgreSQL",
    "section": "Initialize and Configure PostgreSQL",
    "text": "Initialize and Configure PostgreSQL\n\nInitialize PostgreSQL Cluster:\n\nPostgreSQL installation typically initializes a cluster automatically. If not, you can do it manually:\n\nsudo pg_createcluster 13 main --start\n\n\nStart PostgreSQL Service:\nsudo service postgresql start\n\n\nConfigure PostgreSQL User and Password\n\nBy default, PostgreSQL creates a user postgres with no password. Set a password for the postgres user if needed:\n\nsudo -u postgres psql\n\\password postgres\n\\q",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "PostgreSQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/postgresql.html#access-postgresql",
    "href": "Back_end/Databases/postgresql.html#access-postgresql",
    "title": "PostgreSQL",
    "section": "Access PostgreSQL",
    "text": "Access PostgreSQL\n\nAccess PostgreSQL Shell (psql):\nsudo -u postgres psql\n\n\nBasic Commands\n\nOnce in psql, you can execute SQL commands. Here are a few essential commands:\n\n\n: List all databases.\natabase_name: Connect to a specific database.\n: List all tables in the current database.\n: Quit psql.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "PostgreSQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/postgresql.html#configure-postgresql-for-use-with-applications",
    "href": "Back_end/Databases/postgresql.html#configure-postgresql-for-use-with-applications",
    "title": "PostgreSQL",
    "section": "Configure PostgreSQL for Use with Applications",
    "text": "Configure PostgreSQL for Use with Applications\n\nEdit PostgreSQL Configuration (if necessary):\n\nModify PostgreSQL configuration files (postgresql.conf and pg_hba.conf) located typically in /etc/postgresql//main/ to adjust settings like authentication methods, listen addresses, etc.\n\n\n\nConnect PostgreSQL with Django or Other Applications\n\nUpdate your application‚Äôs database settings (settings.py for Django) to use PostgreSQL with the appropriate credentials (USER, PASSWORD, HOST, PORT).",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "PostgreSQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/postgresql.html#remove-postgresql",
    "href": "Back_end/Databases/postgresql.html#remove-postgresql",
    "title": "PostgreSQL",
    "section": "Remove PostgreSQL",
    "text": "Remove PostgreSQL\n\nStop\n\nIf PostgreSQL is running, stop the service:\n\nsudo service postgresql stop\n\n\nRemove\n\nRemove PostgreSQL and its configuration files:\n\nsudo apt-get remove --purge postgresql\\*\n\n\nClean up\n\nRemove any remaining configuration files:\n\nsudo rm -r /etc/postgresql/\nsudo rm -r /etc/postgresql-common/\nsudo rm -r /var/lib/postgresql/\n\n\n\n\nAdditional Tips\n\nBackup and Restore: Use tools like pg_dump and pg_restore for database backups and restoration.\nSecurity: Ensure PostgreSQL is configured securely, especially if accessible from outside WSL.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "PostgreSQL"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html",
    "href": "Back_end/Databases/sqlite.html",
    "title": "SQLite",
    "section": "",
    "text": "Origin: Created by D. Richard Hipp in 2000.\nLicense: Public domain.\nCharacteristics:\n\nServerless: No need for a separate server process.\nZero Configuration: No setup or administration required.\nSelf-contained: A single library file.\nCross-platform: Works on many operating systems.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#introduction-to-sqlite",
    "href": "Back_end/Databases/sqlite.html#introduction-to-sqlite",
    "title": "SQLite",
    "section": "",
    "text": "Origin: Created by D. Richard Hipp in 2000.\nLicense: Public domain.\nCharacteristics:\n\nServerless: No need for a separate server process.\nZero Configuration: No setup or administration required.\nSelf-contained: A single library file.\nCross-platform: Works on many operating systems.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#installation",
    "href": "Back_end/Databases/sqlite.html#installation",
    "title": "SQLite",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install sqlite3",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#basic-usage",
    "href": "Back_end/Databases/sqlite.html#basic-usage",
    "title": "SQLite",
    "section": "Basic Usage",
    "text": "Basic Usage\n\nCreating a Database\nsqlite3 mydatabase.db\n\n\nBasic Commands\n\nOpen an existing database\nsqlite3 mydatabase.db\n\n\nCreating a Table\nCREATE TABLE mytable (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL,\n    age INTEGER\n);\n\n\nInserting Data\nINSERT INTO mytable (name, age) VALUES ('Alice', 30);\n\n\nQuerying Data\nSELECT * FROM mytable;\n\n\nUpdating Data\nUPDATE mytable SET age = 31 WHERE name = 'Alice';\n\n\nDeleting Data\nDELETE FROM mytable WHERE name = 'Alice';",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#features",
    "href": "Back_end/Databases/sqlite.html#features",
    "title": "SQLite",
    "section": "Features",
    "text": "Features\n\nData Types\n\nSQLite uses dynamic typing. The data types it supports are:\n\n\nNULL\nINTEGER\nREAL\nTEXT\nBLOB\n\n\n\nTransactions\nBEGIN TRANSACTION;\nINSERT INTO mytable (name, age) VALUES ('Bob', 25);\nCOMMIT;\n\n\nIndexes\nCREATE INDEX idx_name ON mytable (name);\n\n\nViews\nCREATE VIEW myview AS SELECT name, age FROM mytable WHERE age &gt; 25;\nSELECT * FROM myview;\n\n\nTriggers\nCREATE TRIGGER before_insert_mytable\nBEFORE INSERT ON mytable\nFOR EACH ROW\nBEGIN\n    SELECT RAISE(FAIL, \"Duplicate name\") WHERE EXISTS (SELECT 1 FROM mytable WHERE name = NEW.name);\nEND;\n\n\nStored Procedures\n\nSQLite does not support stored procedures like other RDBMSs. However, you can use triggers and user-defined functions to achieve similar functionality.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#security",
    "href": "Back_end/Databases/sqlite.html#security",
    "title": "SQLite",
    "section": "Security",
    "text": "Security\n\nDatabase Encryption: Use SQLCipher for database encryption.\nAccess Control: SQLite does not provide built-in user management and access control.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#performance-tuning",
    "href": "Back_end/Databases/sqlite.html#performance-tuning",
    "title": "SQLite",
    "section": "Performance Tuning",
    "text": "Performance Tuning\n\nIndexes: Proper indexing can significantly improve query performance.\nPRAGMA Statements: Use PRAGMA commands to modify the database behavior.\n\nPRAGMA synchronous = OFF;\nPRAGMA journal_mode = WAL;",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#backup-and-restore",
    "href": "Back_end/Databases/sqlite.html#backup-and-restore",
    "title": "SQLite",
    "section": "Backup and Restore",
    "text": "Backup and Restore\n\nBackup\nsqlite3 mydatabase.db \".backup 'backup.db'\"\n\n\nRestore\nsqlite3 backup.db \".restore 'mydatabase.db'\"",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#integration-with-programming-languages",
    "href": "Back_end/Databases/sqlite.html#integration-with-programming-languages",
    "title": "SQLite",
    "section": "Integration with Programming Languages",
    "text": "Integration with Programming Languages\n\nPython\n\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('mydatabase.db')\n\n# Create a cursor object\ncursor = conn.cursor()\n\n# Execute SQL commands\ncursor.execute(\"CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\ncursor.execute(\"INSERT INTO mytable (name, age) VALUES ('Alice', 30)\")\nconn.commit()\n\n# Query the database\ncursor.execute(\"SELECT * FROM mytable\")\nrows = cursor.fetchall()\nfor row in rows:\n    print(row)\n\n# Close the connection\nconn.close()\n\nJavaScript\n\nconst sqlite3 = require('sqlite3').verbose();\n\n// Connect to the database\nlet db = new sqlite3.Database('mydatabase.db');\n\n// Create a table\ndb.run('CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)');\n\n// Insert data\ndb.run('INSERT INTO mytable (name, age) VALUES (?, ?)', ['Alice', 30]);\n\n// Query the database\ndb.all('SELECT * FROM mytable', [], (err, rows) =&gt; {\n  if (err) {\n    throw err;\n  }\n  rows.forEach((row) =&gt; {\n    console.log(row);\n  });\n});\n\n// Close the database connection\ndb.close();",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#tools-and-utilities",
    "href": "Back_end/Databases/sqlite.html#tools-and-utilities",
    "title": "SQLite",
    "section": "Tools and Utilities",
    "text": "Tools and Utilities\n\nSQLite Command Line: The primary tool for interacting with SQLite databases.\nDB Browser for SQLite: A visual tool to manage SQLite databases.\nSQLiteStudio: Another powerful SQLite database manager.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Databases/sqlite.html#best-practices",
    "href": "Back_end/Databases/sqlite.html#best-practices",
    "title": "SQLite",
    "section": "Best Practices",
    "text": "Best Practices\n\nNormalization: Properly normalize your database schema.\nIndexes: Use indexes to optimize query performance but avoid over-indexing.\nBackups: Regularly back up your database.\nTesting: Thoroughly test database schema changes.",
    "crumbs": [
      "Blog",
      "Back End",
      "Databases",
      "SQLite"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html",
    "href": "Back_end/Django/django_basics.html",
    "title": "Django Basics",
    "section": "",
    "text": "Admin site\nObject-relational mapper\nAuthentication\nCaching\n\nHTTP : Hypertext Transfer Protocol",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#features",
    "href": "Back_end/Django/django_basics.html#features",
    "title": "Django Basics",
    "section": "",
    "text": "Admin site\nObject-relational mapper\nAuthentication\nCaching\n\nHTTP : Hypertext Transfer Protocol",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#installation",
    "href": "Back_end/Django/django_basics.html#installation",
    "title": "Django Basics",
    "section": "Installation",
    "text": "Installation\npip install django\n\n!pip list | grep django\n\n\nHelp\ndjango-admin\n\n\nCode\n!django-admin\n\n\n\nType 'django-admin help &lt;subcommand&gt;' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    optimizemigration\n    runserver\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\nNote that only Django core commands are listed as settings are not properly configured (error: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.).",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#create-a-new-project",
    "href": "Back_end/Django/django_basics.html#create-a-new-project",
    "title": "Django Basics",
    "section": "Create a new project",
    "text": "Create a new project\ndjango-admin startproject &lt;name&gt; &lt;location&gt;\nExample\ndjango-admin startproject test_django\n\n1. Project Structure\nmyproject/\n‚îú‚îÄ‚îÄ manage.py\n‚îî‚îÄ‚îÄ myproject/\n    ‚îú‚îÄ‚îÄ __init__.py\n    ‚îú‚îÄ‚îÄ settings.py\n    ‚îú‚îÄ‚îÄ urls.py\n    ‚îî‚îÄ‚îÄ wsgi.py\n\nmanage.py: This small but mighty script serves as the gateway to various Django management commands.\nmy_project/settings.py: As the name suggests, this file houses the settings that configure your Django project.\nmy_project/urls.py: The URL dispatcher ‚Äî encoded within urls.py‚Äîmaps URLs to views. This file determines which view is displayed when a specific URL is accessed.\nmy_project/wsgi.py: Short for Web Server Gateway Interface, wsgi.py serves as the entry point for your application when deployed on a production server. It‚Äôs the bridge connecting your application to the web server, enabling it to handle incoming requests.\nmy_project/asgi.py: Similar to wsgi.py, asgi.py is the entry point for asynchronous web servers. It stands for Asynchronous Server Gateway Interface and facilitates the handling of asynchronous HTTP requests.\nmy_project/__init__.py: This seemingly unassuming file holds the magic that transforms a directory into a Python package. It‚Äôs essential for organizing and importing modules across your project\n\n\n\n2. Start the Development Server\n\n!cd ../../test_django/ && python manage.py -h\n\n\nType 'manage.py help &lt;subcommand&gt;' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[auth]\n    changepassword\n    createsuperuser\n\n[contenttypes]\n    remove_stale_contenttypes\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    optimizemigration\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\n\n[sessions]\n    clearsessions\n\n[staticfiles]\n    collectstatic\n    findstatic\n    runserver\n\n\npython manage.py runserver\non http://127.0.0.1:8000/",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#creating-new-app",
    "href": "Back_end/Django/django_basics.html#creating-new-app",
    "title": "Django Basics",
    "section": "Creating new app",
    "text": "Creating new app\npython manage.py startapp &lt;appname&gt;\nExample\npython manage.py startapp myapp\nmy_project/\n‚îú‚îÄ‚îÄ manage.py\n‚îú‚îÄ‚îÄ my_project/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ asgi.py\n‚îÇ   ‚îú‚îÄ settings.py\n‚îÇ   ‚îú‚îÄ urls.py\n‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py\n‚îú‚îÄ‚îÄ my_app/\n    ‚îú‚îÄ‚îÄ migrations/\n    ‚îÇ   ‚îî‚îÄ‚îÄ __init__.py\n    ‚îú‚îÄ‚îÄ __init__.py\n    ‚îú‚îÄ‚îÄ admin.py\n    ‚îú‚îÄ‚îÄ apps.py\n    ‚îú‚îÄ‚îÄ models.py\n    ‚îú‚îÄ‚îÄ tests.py\n    ‚îú‚îÄ‚îÄ urls.py\n    ‚îî‚îÄ‚îÄ views.py\n\nmodels.py: At the heart of every application lies the models.py file. This is where you define the data structures using Django‚Äôs ORM (Object-Relational Mapping). Each model class represents a table in the database. This file forms the foundation of your application‚Äôs data management.\nviews.py: The views.py file encapsulates the logic that defines how your application interacts with users‚Äô requests. Views handle data processing, rendering templates, and responding to actions. This file transforms user interactions into tangible responses.\ntests.py: Test-driven development gains momentum through the tests.py file. Here, you write unit tests to ensure your application‚Äôs components function as expected. These tests bolster the reliability and stability of your codebase.\nadmin.py: The admin.py file isn‚Äôt just for administrators‚Äîit configures how your application‚Äôs models are presented in Django‚Äôs admin interface. This file allows administrators to manage data seamlessly.\nmigrations: This directory is a blueprint of all changes in your application models.\nOther Files: Additional files might surface based on your application‚Äôs needs. For instance, forms.py houses form classes for data input, urls.py maps URLs to views, and apps.py manages application-specific configurations.\n\n\n1. Define Model\n\nEdit the models.py file in your app directory (myapp/models.py) to define your database models. For example:\n\nmyapp/models.py\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\n\n2. Create Database Tables\npython manage.py makemigrations\npython manage.py migrate\n\n\n3. Create Views\n\nCreate views to handle HTTP requests. Edit the views.py file in your app directory (myapp/views.py). For example:\n\nmyapp/views.py\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world!\")\n\n\n4. Map URLs to Views\n\nEdit the urls.py file in your app directory (myapp/urls.py) to map URLs to your views. For example:\n\nmyapp/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n\n5. Include App URLs in Project URLs\ntest_django/urls.py\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('myapp/', include('myapp.urls')),\n]\nRun the Development Server",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#directory-hierarchy",
    "href": "Back_end/Django/django_basics.html#directory-hierarchy",
    "title": "Django Basics",
    "section": "Directory Hierarchy",
    "text": "Directory Hierarchy\n\nA well-organized project structure typically follows this hierarchy:\n\nproject_name/\n‚îú‚îÄ‚îÄ manage.py\n‚îú‚îÄ‚îÄ project_name/\n‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n‚îÇ   ‚îú‚îÄ‚îÄ asgi.py\n‚îÇ   ‚îú‚îÄ settings.py\n‚îÇ   ‚îú‚îÄ urls.py\n‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py\n‚îú‚îÄ‚îÄ app1/\n‚îú‚îÄ‚îÄ app2/\n  ...\n‚îú‚îÄ‚îÄ static/\n‚îú‚îÄ‚îÄ media/\n‚îú‚îÄ‚îÄ templates/\n\nproject_name: The root directory of your project.\nproject_name/project_name: This inner directory holds core project settings and configuration.\napp1, app2: These are the individual apps you create within the project.\nstatic: Houses static files like CSS, JavaScript, and images.\nmedia: Stores user-uploaded files.\ntemplates: Contains HTML templates.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#url-dispatcher",
    "href": "Back_end/Django/django_basics.html#url-dispatcher",
    "title": "Django Basics",
    "section": "URL dispatcher",
    "text": "URL dispatcher\nThe path() function is passed four arguments, two required: route and view, and two optional: kwargs, and name. At this point, it‚Äôs worth reviewing what these arguments are for.\n\npath() argument: route\nroute is a string that contains a URL pattern. When processing a request, Django starts at the first pattern in urlpatterns and makes its way down the list, comparing the requested URL against each pattern until it finds one that matches.\nPatterns don‚Äôt search GET and POST parameters, or the domain name. For example, in a request to https://www.example.com/myapp/, the URLconf will look for myapp/. In a request to https://www.example.com/myapp/?page=3, the URLconf will also look for myapp/.\n\n\npath() argument: view\nWhen Django finds a matching pattern, it calls the specified view function with an HttpRequest object as the first argument and any ‚Äúcaptured‚Äù values from the route as keyword arguments. We‚Äôll give an example of this in a bit.\n\n\npath() argument: kwargs\nArbitrary keyword arguments can be passed in a dictionary to the target view. We aren‚Äôt going to use this feature of Django in the tutorial\n\n\npath() argument: name\nNaming your URL lets you refer to it unambiguously from elsewhere in Django, especially from within templates. This powerful feature allows you to make global changes to the URL patterns of your project while only touching a single file.\nWhen you‚Äôre comfortable with the basic request and response flow, read part 2 of this tutorial to start working with the database.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#database-settings",
    "href": "Back_end/Django/django_basics.html#database-settings",
    "title": "Django Basics",
    "section": "Database settings",
    "text": "Database settings\nNow, open up mysite/settings.py. It‚Äôs a normal Python module with module-level variables representing Django settings.\nBy default, the configuration uses SQLite. If you‚Äôre new to databases, or you‚Äôre just interested in trying Django, this is the easiest choice. SQLite is included in Python, so you won‚Äôt need to install anything else to support your database. When starting your first real project, however, you may want to use a more scalable database like PostgreSQL, to avoid database-switching headaches down the road.\nIf you wish to use another database, install the appropriate database bindings and change the following keys in the DATABASES ‚Äòdefault‚Äô item to match your database connection settings:\n\nENGINE ‚Äì Either ‚Äòdjango.db.backends.sqlite3‚Äô, ‚Äòdjango.db.backends.postgresql‚Äô, ‚Äòdjango.db.backends.mysql‚Äô, or ‚Äòdjango.db.backends.oracle‚Äô. Other backends are also available.\nNAME ‚Äì The name of your database. If you‚Äôre using SQLite, the database will be a file on your computer; in that case, NAME should be the full absolute path, including filename, of that file. The default value, BASE_DIR / ‚Äòdb.sqlite3‚Äô, will store the file in your project directory.\n\nWhile you‚Äôre editing mysite/settings.py, set TIME_ZONE to your time zone.\nAlso, note the INSTALLED_APPS setting at the top of the file. That holds the names of all Django applications that are activated in this Django instance. Apps can be used in multiple projects, and you can package and distribute them for use by others in their projects.\nBy default, INSTALLED_APPS contains the following apps, all of which come with Django:\ndjango.contrib.admin ‚Äì The admin site. You‚Äôll use it shortly.\ndjango.contrib.auth ‚Äì An authentication system.\ndjango.contrib.contenttypes ‚Äì A framework for content types.\ndjango.contrib.sessions ‚Äì A session framework.\ndjango.contrib.messages ‚Äì A messaging framework.\ndjango.contrib.staticfiles ‚Äì A framework for managing static files.\nThese applications are included by default as a convenience for the common case.\nSome of these applications make use of at least one database table, though, so we need to create the tables in the database before we can use them. To do that, run the following command:\npython manage.py migrate\nThe migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file and the database migrations shipped with the app (we‚Äôll cover those later). You‚Äôll see a message for each migration it applies. If you‚Äôre interested, run the command-line client for your database and type (PostgreSQL), SHOW TABLES; (MariaDB, MySQL), .tables (SQLite), or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to display the tables Django created.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#creating-models",
    "href": "Back_end/Django/django_basics.html#creating-models",
    "title": "Django Basics",
    "section": "Creating models",
    "text": "Creating models\n\nNow we‚Äôll define your models ‚Äì essentially, your database layout, with additional metadata.\n\nIn our poll app, we‚Äôll create two models: Question and Choice. A Question has a question and a publication date. A Choice has two fields: the text of the choice and a vote tally. Each Choice is associated with a Question.\nThese concepts are represented by Python classes. Edit the polls/models.py file so it looks like this:\npolls/models.py\nfrom django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\nHere, each model is represented by a class that subclasses django.db.models.Model. Each model has a number of class variables, each of which represents a database field in the model.\nEach field is represented by an instance of a Field class ‚Äì e.g., CharField for character fields and DateTimeField for datetimes. This tells Django what type of data each field holds.\nThe name of each Field instance (e.g.¬†question_text or pub_date) is the field‚Äôs name, in machine-friendly format. You‚Äôll use this value in your Python code, and your database will use it as the column name.\nYou can use an optional first positional argument to a Field to designate a human-readable name. That‚Äôs used in a couple of introspective parts of Django, and it doubles as documentation. If this field isn‚Äôt provided, Django will use the machine-readable name. In this example, we‚Äôve only defined a human-readable name for Question.pub_date. For all other fields in this model, the field‚Äôs machine-readable name will suffice as its human-readable name.\nSome Field classes have required arguments. CharField, for example, requires that you give it a max_length. That‚Äôs used not only in the database schema, but in validation, as we‚Äôll soon see.\nA Field can also have various optional arguments; in this case, we‚Äôve set the default value of votes to 0.\nFinally, note a relationship is defined, using ForeignKey. That tells Django each Choice is related to a single Question. Django supports all the common database relationships: many-to-one, many-to-many, and one-to-one.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#relationships-between-entities",
    "href": "Back_end/Django/django_basics.html#relationships-between-entities",
    "title": "Django Basics",
    "section": "Relationships between entities",
    "text": "Relationships between entities\nDealing with relationships between entities is one of the more challenging aspects of Web API design. There are a number of different ways that we might choose to represent a relationship:\nUsing primary keys.\nUsing hyperlinking between entities.\nUsing a unique identifying slug field on the related entity.\nUsing the default string representation of the related entity.\nNesting the related entity inside the parent representation.\nSome other custom representation.\nREST framework supports all of these styles, and can apply them across forward or reverse relationships, or apply them across custom managers such as generic foreign keys.\nIn this case we‚Äôd like to use a hyperlinked style between entities. In order to do so, we‚Äôll modify our serializers to extend HyperlinkedModelSerializer instead of the existing ModelSerializer.\nThe HyperlinkedModelSerializer has the following differences from ModelSerializer:\nIt does not include the id field by default.\nIt includes a url field, using HyperlinkedIdentityField.\nRelationships use HyperlinkedRelatedField, instead of PrimaryKeyRelatedField.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#activating-models",
    "href": "Back_end/Django/django_basics.html#activating-models",
    "title": "Django Basics",
    "section": "Activating models",
    "text": "Activating models\nThat small bit of model code gives Django a lot of information. With it, Django is able to:\n\nCreate a database schema (CREATE TABLE statements) for this app.\nCreate a Python database-access API for accessing Question and Choice objects.\n\nBut first we need to tell our project that the polls app is installed.\nTo include the app in our project, we need to add a reference to its configuration class in the INSTALLED_APPS setting. The PollsConfig class is in the polls/apps.py file, so its dotted path is ‚Äòpolls.apps.PollsConfig‚Äô. Edit the mysite/settings.py file and add that dotted path to the INSTALLED_APPS setting. It‚Äôll look like this:\ntest_django/settings.py\nINSTALLED_APPS = [\n    \"myapp.aps.MyappConfig\"\n    \"polls.apps.PollsConfig\",\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n]\nNow Django knows to include the polls app. Let‚Äôs run another command:\npython manage.py makemigrations polls\nBy running makemigrations, you‚Äôre telling Django that you‚Äôve made some changes to your models (in this case, you‚Äôve made new ones) and that you‚Äôd like the changes to be stored as a migration.\nMigrations are how Django stores changes to your models (and thus your database schema) - they‚Äôre files on disk. You can read the migration for your new model if you like; it‚Äôs the file polls/migrations/0001_initial.py. Don‚Äôt worry, you‚Äôre not expected to read them every time Django makes one, but they‚Äôre designed to be human-editable in case you want to manually tweak how Django changes things.\n\nSQL\nThere‚Äôs a command that will run the migrations for you and manage your database schema automatically - that‚Äôs called migrate, and we‚Äôll come to it in a moment - but first, let‚Äôs see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL:\npython manage.py sqlmigrate polls 0001\nBEGIN;\n--\n-- Create model Question\n--\nCREATE TABLE \"polls_question\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"question_text\" varchar(200) NOT NULL,\n    \"pub_date\" timestamp with time zone NOT NULL\n);\n--\n-- Create model Choice\n--\nCREATE TABLE \"polls_choice\" (\n    \"id\" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    \"choice_text\" varchar(200) NOT NULL,\n    \"votes\" integer NOT NULL,\n    \"question_id\" bigint NOT NULL\n);\nALTER TABLE \"polls_choice\"\n  ADD CONSTRAINT \"polls_choice_question_id_c5b4b260_fk_polls_question_id\"\n    FOREIGN KEY (\"question_id\")\n    REFERENCES \"polls_question\" (\"id\")\n    DEFERRABLE INITIALLY DEFERRED;\nCREATE INDEX \"polls_choice_question_id_c5b4b260\" ON \"polls_choice\" (\"question_id\");\n\nCOMMIT;\nNote the following:\n\nThe exact output will vary depending on the database you are using. The example above is generated for PostgreSQL.\nTable names are automatically generated by combining the name of the app (polls) and the lowercase name of the model ‚Äì question and choice. (You can override this behavior.)\nPrimary keys (IDs) are added automatically. (You can override this, too.)\nBy convention, Django appends ‚Äú_id‚Äù to the foreign key field name. (Yes, you can override this, as well.)\nThe foreign key relationship is made explicit by a FOREIGN KEY constraint. Don‚Äôt worry about the DEFERRABLE parts; it‚Äôs telling PostgreSQL to not enforce the foreign key until the end of the transaction.\nIt‚Äôs tailored to the database you‚Äôre using, so database-specific field types such as auto_increment (MySQL), bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (PostgreSQL), or integer primary key autoincrement (SQLite) are handled for you automatically. Same goes for the quoting of field names ‚Äì e.g., using double quotes or single quotes.\nThe sqlmigrate command doesn‚Äôt actually run the migration on your database - instead, it prints it to the screen so that you can see what SQL Django thinks is required. It‚Äôs useful for checking what Django is going to do or if you have database administrators who require SQL scripts for changes.\n\nIf you‚Äôre interested, you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#migrate",
    "href": "Back_end/Django/django_basics.html#migrate",
    "title": "Django Basics",
    "section": "Migrate",
    "text": "Migrate\nNow, run migrate again to create those model tables in your database:\npython manage.py migrate\nThe migrate command takes all the migrations that haven‚Äôt been applied (Django tracks which ones are applied using a special table in your database called django_migrations) and runs them against your database - essentially, synchronizing the changes you made to your models with the schema in the database.\nMigrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. We‚Äôll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:\n\nChange your models (in models.py).\nRun python manage.py makemigrations to create migrations for those changes\nRun python manage.py migrate to apply those changes to the database.\n\nThe reason that there are separate commands to make and apply migrations is because you‚Äôll commit migrations to your version control system and ship them with your app; they not only make your development easier, they‚Äôre also usable by other developers and in production.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#playing-with-the-api",
    "href": "Back_end/Django/django_basics.html#playing-with-the-api",
    "title": "Django Basics",
    "section": "Playing with the API",
    "text": "Playing with the API\npython manage.py shell\n&gt;&gt;&gt; from polls.models import Choice, Question  # Import the model classes we just wrote.\n\n# No questions are in the system yet.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet []&gt;\n\n# Create a new Question.\n# Support for time zones is enabled in the default settings file, so\n# Django expects a datetime with tzinfo for pub_date. Use timezone.now()\n# instead of datetime.datetime.now() and it will do the right thing.\n&gt;&gt;&gt; from django.utils import timezone\n&gt;&gt;&gt; q = Question(question_text=\"What's new?\", pub_date=timezone.now())\n\n# Save the object into the database. You have to call save() explicitly.\n&gt;&gt;&gt; q.save()\n\n# Now it has an ID.\n&gt;&gt;&gt; q.id\n1\n\n# Access model field values via Python attributes.\n&gt;&gt;&gt; q.question_text\n\"What's new?\"\n&gt;&gt;&gt; q.pub_date\ndatetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)\n\n# Change values by changing the attributes, then calling save().\n&gt;&gt;&gt; q.question_text = \"What's up?\"\n&gt;&gt;&gt; q.save()\n\n# objects.all() displays all the questions in the database.\n&gt;&gt;&gt; Question.objects.all()\n&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\nWait a minute. &lt;Question: Question object (1)&gt; isn‚Äôt a helpful representation of this object. Let‚Äôs fix that by editing the Question model (in the polls/models.py file) and adding a str() method to both Question and Choice:\n\npolls/models.py\n\nfrom django.db import models\n\n\nclass Question(models.Model):\n    # ...\n    def __str__(self):\n        return self.question_text\n\n\nclass Choice(models.Model):\n    # ...\n    def __str__(self):\n        return self.choice_text\nIt‚Äôs important to add str() methods to your models, not only for your own convenience when dealing with the interactive prompt, but also because objects‚Äô representations are used throughout Django‚Äôs automatically-generated admin.\nLet‚Äôs also add a custom method to this model:\n\npolls/models.py\n\nimport datetime\n\nfrom django.db import models\nfrom django.utils import timezone\n\n\nclass Question(models.Model):\n    # ...\n    def was_published_recently(self):\n        return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1)\nNote the addition of import datetime and from django.utils import timezone, to reference Python‚Äôs standard datetime module and Django‚Äôs time-zone-related utilities in django.utils.timezone, respectively. If you aren‚Äôt familiar with time zone handling in Python, you can learn more in the time zone support docs.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#introducing-the-django-admin",
    "href": "Back_end/Django/django_basics.html#introducing-the-django-admin",
    "title": "Django Basics",
    "section": "Introducing the Django Admin",
    "text": "Introducing the Django Admin\nPhilosophy\nGenerating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn‚Äôt require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.\nDjango was written in a newsroom environment, with a very clear separation between ‚Äúcontent publishers‚Äù and the ‚Äúpublic‚Äù site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.\nThe admin isn‚Äôt intended to be used by site visitors. It‚Äôs for site managers.\n\nCreate a superuser\npython manage.py createsuperuser\nEnter username and password\nUsername: &lt;name&gt;\nEmail address: &lt;email&gt;\nPassword: **********\nPassword (again): *********\nSuperuser created successfully.\n\n\nMake the poll app modifiable in the admin\n\npolls/admin.py\n\nfrom django.contrib import admin\n\nfrom .models import Question\n\nadmin.site.register(Question)\n\nmyapp/admin.py\n\nfrom django.contrib import admin\n\nfrom .models import MyModel\n\nadmin.site.register(MyModel)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#writing-more-views",
    "href": "Back_end/Django/django_basics.html#writing-more-views",
    "title": "Django Basics",
    "section": "Writing more views",
    "text": "Writing more views\n\nNow let‚Äôs add a few more views to polls/views.py. These views are slightly different, because they take an argument:\n\n\npolls/views.py\n\ndef detail(request, question_id):\n    return HttpResponse(\"You're looking at question %s.\" % question_id)\n\n\ndef results(request, question_id):\n    response = \"You're looking at the results of question %s.\"\n    return HttpResponse(response % question_id)\n\n\ndef vote(request, question_id):\n    return HttpResponse(\"You're voting on question %s.\" % question_id)\n\npolls/urls.py\n\n\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    # ex: /polls/\n    path(\"\", views.index, name=\"index\"),\n    # ex: /polls/5/\n    path(\"&lt;int:question_id&gt;/\", views.detail, name=\"detail\"),\n    # ex: /polls/5/results/\n    path(\"&lt;int:question_id&gt;/results/\", views.results, name=\"results\"),\n    # ex: /polls/5/vote/\n    path(\"&lt;int:question_id&gt;/vote/\", views.vote, name=\"vote\"),\n]\nEach view is responsible for doing one of two things: returning an HttpResponse object containing the content for the requested page, or raising an exception such as Http404. The rest is up to you.\n\npolls/views.py¬∂\n\nfrom django.http import HttpResponse\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    output = \", \".join([q.question_text for q in latest_question_list])\n    return HttpResponse(output)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#template-folder",
    "href": "Back_end/Django/django_basics.html#template-folder",
    "title": "Django Basics",
    "section": "Template Folder",
    "text": "Template Folder\nThere‚Äôs a problem here, though: the page‚Äôs design is hard-coded in the view. If you want to change the way the page looks, you‚Äôll have to edit this Python code. So let‚Äôs use Django‚Äôs template system to separate the design from Python by creating a template that the view can use.\nFirst, create a directory called templates in your polls directory. Django will look for templates in there.\nYour project‚Äôs TEMPLATES setting describes how Django will load and render templates. The default settings file configures a DjangoTemplates backend whose APP_DIRS option is set to True. By convention DjangoTemplates looks for a ‚Äútemplates‚Äù subdirectory in each of the INSTALLED_APPS.\nWithin the templates directory you have just created, create another directory called polls, and within that create a file called index.html. In other words, your template should be at polls/templates/polls/index.html. Because of how the app_directories template loader works as described above, you can refer to this template within Django as polls/index.html.\n\npolls/templates/polls/index.html¬∂\n\n{% if latest_question_list %}\n    &lt;ul&gt;\n    {% for question in latest_question_list %}\n        &lt;li&gt;&lt;a href=\"/polls/{{ question.id }}/\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n{% else %}\n    &lt;p&gt;No polls are available.&lt;/p&gt;\n{% endif %}\n\npolls/views.py\n\nfrom django.http import HttpResponse\nfrom django.template import loader\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    template = loader.get_template(\"polls/index.html\")\n    context = {\n        \"latest_question_list\": latest_question_list,\n    }\n    return HttpResponse(template.render(context, request))\n\nA shortcut: render()\nIt‚Äôs a very common idiom to load a template, fill a context and return an HttpResponse object with the result of the rendered template. Django provides a shortcut. Here‚Äôs the full index() view, rewritten:\n\npolls/views.py\n\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\ndef index(request):\n    latest_question_list = Question.objects.order_by(\"-pub_date\")[:5]\n    context = {\"latest_question_list\": latest_question_list}\n    return render(request, \"polls/index.html\", context)\n\n\nRaising a 404 error\n\nNow, let‚Äôs tackle the question detail view ‚Äì the page that displays the question text for a given poll. Here‚Äôs the view:\n\n\npolls/views.py¬∂\n\nfrom django.http import Http404\nfrom django.shortcuts import render\n\nfrom .models import Question\n\n\n# ...\ndef detail(request, question_id):\n    try:\n        question = Question.objects.get(pk=question_id)\n    except Question.DoesNotExist:\n        raise Http404(\"Question does not exist\")\n    return render(request, \"polls/detail.html\", {\"question\": question})\n\n\nA shortcut: get_object_or_404()\n\npolls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\n\nfrom .models import Question\n\n\n# ...\ndef detail(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, \"polls/detail.html\", {\"question\": question})\nThe get_object_or_404() function takes a Django model as its first argument and an arbitrary number of keyword arguments, which it passes to the get() function of the model‚Äôs manager. It raises Http404 if the object doesn‚Äôt exist.\nPhilosophy\nWhy do we use a helper function get_object_or_404() instead of automatically catching the ObjectDoesNotExist exceptions at a higher level, or having the model API raise Http404 instead of ObjectDoesNotExist?\nBecause that would couple the model layer to the view layer. One of the foremost design goals of Django is to maintain loose coupling. Some controlled coupling is introduced in the django.shortcuts module.\n\npolls/templates/polls/detail.html¬∂\n\n&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n&lt;ul&gt;\n{% for choice in question.choice_set.all %}\n    &lt;li&gt;{{ choice.choice_text }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n\n\nRemoving hardcoded URLs in templates\nRemember, when we wrote the link to a question in the polls/index.html template, the link was partially hardcoded like this:\n&lt;li&gt;&lt;a href=\"/polls/{{ question.id }}/\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\nThe problem with this hardcoded, tightly-coupled approach is that it becomes challenging to change URLs on projects with a lot of templates. However, since you defined the name argument in the path() functions in the polls.urls module, you can remove a reliance on specific URL paths defined in your url configurations by using the {% url %} template tag:\n&lt;li&gt;&lt;a href=\"{% url 'detail' question.id %}\"&gt;{{ question.question_text }}&lt;/a&gt;&lt;/li&gt;\nThe way this works is by looking up the URL definition as specified in the polls.urls module. You can see exactly where the URL name of ‚Äòdetail‚Äô is defined below:\n...\n# the 'name' value as called by the {% url %} template tag\npath(\"&lt;int:question_id&gt;/\", views.detail, name=\"detail\"),\n...",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#namespacing-url-names",
    "href": "Back_end/Django/django_basics.html#namespacing-url-names",
    "title": "Django Basics",
    "section": "Namespacing URL names",
    "text": "Namespacing URL names\nThe tutorial project has just one app, polls. In real Django projects, there might be five, ten, twenty apps or more. How does Django differentiate the URL names between them? For example, the polls app has a detail view, and so might an app on the same project that is for a blog. How does one make it so that Django knows which app view to create for a url when using the {% url %} template tag?\nThe answer is to add namespaces to your URLconf. In the polls/urls.py file, go ahead and add an app_name to set the application namespace:\n\npolls/urls.py\n\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n    path(\"&lt;int:question_id&gt;/\", views.detail, name=\"detail\"),\n    path(\"&lt;int:question_id&gt;/results/\", views.results, name=\"results\"),\n    path(\"&lt;int:question_id&gt;/vote/\", views.vote, name=\"vote\"),\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#write-a-minimal-form",
    "href": "Back_end/Django/django_basics.html#write-a-minimal-form",
    "title": "Django Basics",
    "section": "Write a minimal form",
    "text": "Write a minimal form\n\npolls/templates/polls/detail.html¬∂\n\n&lt;form action=\"{% url 'polls:vote' question.id %}\" method=\"post\"&gt;\n{% csrf_token %}\n&lt;fieldset&gt;\n    &lt;legend&gt;&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;&lt;/legend&gt;\n    {% if error_message %}&lt;p&gt;&lt;strong&gt;{{ error_message }}&lt;/strong&gt;&lt;/p&gt;{% endif %}\n    {% for choice in question.choice_set.all %}\n        &lt;input type=\"radio\" name=\"choice\" id=\"choice{{ forloop.counter }}\" value=\"{{ choice.id }}\"&gt;\n        &lt;label for=\"choice{{ forloop.counter }}\"&gt;{{ choice.choice_text }}&lt;/label&gt;&lt;br&gt;\n    {% endfor %}\n&lt;/fieldset&gt;\n&lt;input type=\"submit\" value=\"Vote\"&gt;\n&lt;/form&gt;\nA quick rundown:\n\nThe above template displays a radio button for each question choice. The value of each radio button is the associated question choice‚Äôs ID. The name of each radio button is ‚Äúchoice‚Äù. That means, when somebody selects one of the radio buttons and submits the form, it‚Äôll send the POST data choice=# where # is the ID of the selected choice. This is the basic concept of HTML forms.\nWe set the form‚Äôs action to {% url ‚Äòpolls:vote‚Äô question.id %}, and we set method=‚Äúpost‚Äù. Using method=‚Äúpost‚Äù (as opposed to method=‚Äúget‚Äù) is very important, because the act of submitting this form will alter data server-side. Whenever you create a form that alters data server-side, use method=‚Äúpost‚Äù. This tip isn‚Äôt specific to Django; it‚Äôs good web development practice in general.\nforloop.counter indicates how many times the for tag has gone through its loop\nSince we‚Äôre creating a POST form (which can have the effect of modifying data), we need to worry about Cross Site Request Forgeries. Thankfully, you don‚Äôt have to worry too hard, because Django comes with a helpful system for protecting against it. In short, all POST forms that are targeted at internal URLs should use the {% csrf_token %} template tag.\n\nWe also created a dummy implementation of the vote() function. Let‚Äôs create a real version. Add the following to polls/views.py:\n\npolls/views.py\n\nfrom django.db.models import F\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\n\nfrom .models import Choice, Question\n\n\n# ...\ndef vote(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    try:\n        selected_choice = question.choice_set.get(pk=request.POST[\"choice\"])\n    except (KeyError, Choice.DoesNotExist):\n        # Redisplay the question voting form.\n        return render(\n            request,\n            \"polls/detail.html\",\n            {\n                \"question\": question,\n                \"error_message\": \"You didn't select a choice.\",\n            },\n        )\n    else:\n        selected_choice.votes = F(\"votes\") + 1\n        selected_choice.save()\n        # Always return an HttpResponseRedirect after successfully dealing\n        # with POST data. This prevents data from being posted twice if a\n        # user hits the Back button.\n        return HttpResponseRedirect(reverse(\"polls:results\", args=(question.id,)))\nThis code includes a few things we haven‚Äôt covered yet in this tutorial:\n\nrequest.POST is a dictionary-like object that lets you access submitted data by key name. In this case, request.POST[‚Äòchoice‚Äô] returns the ID of the selected choice, as a string. request.POST values are always strings.\nNote that Django also provides request.GET for accessing GET data in the same way ‚Äì but we‚Äôre explicitly using request.POST in our code, to ensure that data is only altered via a POST call.\nrequest.POST[‚Äòchoice‚Äô] will raise KeyError if choice wasn‚Äôt provided in POST data. The above code checks for KeyError and redisplays the question form with an error message if choice isn‚Äôt given.\nF(‚Äúvotes‚Äù) + 1 instructs the database to increase the vote count by 1.\nAfter incrementing the choice count, the code returns an HttpResponseRedirect rather than a normal HttpResponse. HttpResponseRedirect takes a single argument: the URL to which the user will be redirected (see the following point for how we construct the URL in this case).\nAs the Python comment above points out, you should always return an HttpResponseRedirect after successfully dealing with POST data. This tip isn‚Äôt specific to Django; it‚Äôs good web development practice in general.\nWe are using the reverse() function in the HttpResponseRedirect constructor in this example. This function helps avoid having to hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the variable portion of the URL pattern that points to that view. In this case, using the URLconf we set up in Tutorial 3, this reverse() call will return a string like\n\n\npolls/views.py\n\nfrom django.shortcuts import get_object_or_404, render\n\n\ndef results(request, question_id):\n    question = get_object_or_404(Question, pk=question_id)\n    return render(request, \"polls/results.html\", {\"question\": question})\n\npolls/templates/polls/results.html¬∂\n\n&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n\n&lt;ul&gt;\n{% for choice in question.choice_set.all %}\n    &lt;li&gt;{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n\n&lt;a href=\"{% url 'polls:detail' question.id %}\"&gt;Vote again?&lt;/a&gt;",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#use-generic-views-less-code-is-better",
    "href": "Back_end/Django/django_basics.html#use-generic-views-less-code-is-better",
    "title": "Django Basics",
    "section": "Use generic views: Less code is better",
    "text": "Use generic views: Less code is better\n\nAmend URLconf\n\npolls/urls.py\n\nfrom django.urls import path\n\nfrom . import views\n\napp_name = \"polls\"\nurlpatterns = [\n    path(\"\", views.IndexView.as_view(), name=\"index\"),\n    path(\"&lt;int:pk&gt;/\", views.DetailView.as_view(), name=\"detail\"),\n    path(\"&lt;int:pk&gt;/results/\", views.ResultsView.as_view(), name=\"results\"),\n    path(\"&lt;int:question_id&gt;/vote/\", views.vote, name=\"vote\"),\n]\nNote that the name of the matched pattern in the path strings of the second and third patterns has changed from  to . This is necessary because we‚Äôll use the DetailView generic view to replace our detail() and results() views, and it expects the primary key value captured from the URL to be called ‚Äúpk‚Äù.\n\n\nAmend views\n\npolls/views.py\n\nfrom django.db.models import F\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import get_object_or_404, render\nfrom django.urls import reverse\nfrom django.views import generic\n\nfrom .models import Choice, Question\n\n\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]\n\n\nclass DetailView(generic.DetailView):\n    model = Question\n    template_name = \"polls/detail.html\"\n\n\nclass ResultsView(generic.DetailView):\n    model = Question\n    template_name = \"polls/results.html\"\n\n\ndef vote(request, question_id):\n    # same as above, no changes needed.\n    ...\nEach generic view needs to know what model it will be acting upon. This is provided using either the model attribute (in this example, model = Question for DetailView and ResultsView) or by defining the get_queryset() method (as shown in IndexView).\nBy default, the DetailView generic view uses a template called /_detail.html. In our case, it would use the template ‚Äúpolls/question_detail.html‚Äù. The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name. We also specify the template_name for the results list view ‚Äì this ensures that the results view and the detail view have a different appearance when rendered, even though they‚Äôre both a DetailView behind the scenes.\nSimilarly, the ListView generic view uses a default template called /_list.html; we use template_name to tell ListView to use our existing ‚Äúpolls/index.html‚Äù template.\nIn previous parts of the tutorial, the templates have been provided with a context that contains the question and latest_question_list context variables. For DetailView the question variable is provided automatically ‚Äì since we‚Äôre using a Django model (Question), Django is able to determine an appropriate name for the context variable. However, for ListView, the automatically generated context variable is question_list. To override this we provide the context_object_name attribute, specifying that we want to use latest_question_list instead. As an alternative approach, you could change your templates to match the new default context variables ‚Äì but it‚Äôs a lot easier to tell Django to use the variable you want.\nRun the server, and use your new polling app based on generic views.\nFor full details on generic views, see the generic views documentation.\nWhen you‚Äôre comfortable with forms and generic views, read part 5 of this tutorial to learn about testing our polls app.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#writing-our-first-test",
    "href": "Back_end/Django/django_basics.html#writing-our-first-test",
    "title": "Django Basics",
    "section": "Writing our first test",
    "text": "Writing our first test\n\nCreate a test to expose the bug\n\npolls/tests.py\n\nimport datetime\n\nfrom django.test import TestCase\nfrom django.utils import timezone\n\nfrom .models import Question\n\n\nclass QuestionModelTests(TestCase):\n    def test_was_published_recently_with_future_question(self):\n        \"\"\"\n        was_published_recently() returns False for questions whose pub_date\n        is in the future.\n        \"\"\"\n        time = timezone.now() + datetime.timedelta(days=30)\n        future_question = Question(pub_date=time)\n        self.assertIs(future_question.was_published_recently(), False)\nHere we have created a django.test.TestCase subclass with a method that creates a Question instance with a pub_date in the future. We then check the output of was_published_recently() - which ought to be False.\n\n\nRunning tests\nIn the terminal, we can run our test:\npython manage.py test polls\nand you‚Äôll see something like:\n\n\nFixing the bug\n\ndef was_published_recently(self):\n    now = timezone.now()\n    return now - datetime.timedelta(days=1) &lt;= self.pub_date &lt;= now\n\n\nMore comprehensive tests\n\npolls/tests.py\n\ndef test_was_published_recently_with_old_question(self):\n    \"\"\"\n    was_published_recently() returns False for questions whose pub_date\n    is older than 1 day.\n    \"\"\"\n    time = timezone.now() - datetime.timedelta(days=1, seconds=1)\n    old_question = Question(pub_date=time)\n    self.assertIs(old_question.was_published_recently(), False)\n\n\ndef test_was_published_recently_with_recent_question(self):\n    \"\"\"\n    was_published_recently() returns True for questions whose pub_date\n    is within the last day.\n    \"\"\"\n    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)\n    recent_question = Question(pub_date=time)\n    self.assertIs(recent_question.was_published_recently(), True)\n\n\nImproving our view\n\npolls/views.py\n\nclass IndexView(generic.ListView):\n    template_name = \"polls/index.html\"\n    context_object_name = \"latest_question_list\"\n\n    def get_queryset(self):\n        \"\"\"Return the last five published questions.\"\"\"\n        return Question.objects.order_by(\"-pub_date\")[:5]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#static-folder",
    "href": "Back_end/Django/django_basics.html#static-folder",
    "title": "Django Basics",
    "section": "Static folder",
    "text": "Static folder\nFirst, create a directory called static in your polls directory. Django will look for static files there, similarly to how Django finds templates inside polls/templates/.\nDjango‚Äôs STATICFILES_FINDERS setting contains a list of finders that know how to discover static files from various sources. One of the defaults is AppDirectoriesFinder which looks for a ‚Äústatic‚Äù subdirectory in each of the INSTALLED_APPS, like the one in polls we just created. The admin site uses the same directory structure for its static files.\nWithin the static directory you have just created, create another directory called polls and within that create a file called style.css. In other words, your stylesheet should be at polls/static/polls/style.css. Because of how the AppDirectoriesFinder staticfile finder works, you can refer to this static file in Django as polls/style.css, similar to how you reference the path for templates.\n\npolls/static/polls/style.css¬∂\n\nli a {\n    color: green;\n}\n\nAdding a background-image\nNext, we‚Äôll create a subdirectory for images. Create an images subdirectory in the polls/static/polls/ directory. Inside this directory, add any image file that you‚Äôd like to use as a background. For the purposes of this tutorial, we‚Äôre using a file named background.png, which will have the full path polls/static/polls/images/background.png.\nThen, add a reference to your image in your stylesheet (polls/static/polls/style.css):\nbody {\n    background: white url(\"images/background.png\") no-repeat;\n}\n\npolls/templates/polls/index.html¬∂\n\n{% load static %}\n\n&lt;link rel=\"stylesheet\" href=\"{% static 'polls/style.css' %}\"&gt;\nThe {% static %} template tag generates the absolute URL of static files.\nThat‚Äôs all you need to do for development.\nStart the server (or restart it if it‚Äôs already running):",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#customize-the-admin-form",
    "href": "Back_end/Django/django_basics.html#customize-the-admin-form",
    "title": "Django Basics",
    "section": "Customize the admin form",
    "text": "Customize the admin form\nBy registering the Question model with admin.site.register(Question), Django was able to construct a default form representation. Often, you‚Äôll want to customize how the admin form looks and works. You‚Äôll do this by telling Django the options you want when you register the object.\nLet‚Äôs see how this works by reordering the fields on the edit form. Replace the admin.site.register(Question) line with:\n\npolls/admin.py¬∂\n\nfrom django.contrib import admin\n\nfrom .models import Choice, Question\n\n\nclass ChoiceInline(admin.TabularInline):\n    model = Choice\n    extra = 3\n\n\nclass QuestionAdmin(admin.ModelAdmin):\n    fieldsets = [\n        (None, {\"fields\": [\"question_text\"]}),\n        (\"Date information\", {\"fields\": [\"pub_date\"], \"classes\": [\"collapse\"]}),\n    ]\n    inlines = [ChoiceInline]\n    list_display = [\"question_text\", \"pub_date\", \"was_published_recently\"]\n    list_filter = [\"pub_date\"]\n\n\nadmin.site.register(Question, QuestionAdmin)\nYou can click on the column headers to sort by those values ‚Äì except in the case of the was_published_recently header, because sorting by the output of an arbitrary method is not supported. Also note that the column header for was_published_recently is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output.\nYou can improve that by using the display() decorator on that method (in polls/models.py), as follows:\n\npolls/models.py¬∂\n\nfrom django.contrib import admin\n\n\nclass Question(models.Model):\n    # ...\n    @admin.display(\n        boolean=True,\n        ordering=\"pub_date\",\n        description=\"Published recently?\",\n    )\n    def was_published_recently(self):\n        now = timezone.now()\n        return now - datetime.timedelta(days=1) &lt;= self.pub_date &lt;= now",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/django_basics.html#installing-django-debug-toolbar",
    "href": "Back_end/Django/django_basics.html#installing-django-debug-toolbar",
    "title": "Django Basics",
    "section": "Installing Django Debug Toolbar",
    "text": "Installing Django Debug Toolbar\npython -m pip install django-debug-toolbar",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django Basics"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html",
    "href": "Back_end/Django/models_design.html",
    "title": "Model Design",
    "section": "",
    "text": "Django models are defined as Python classes that inherit from django.db.models.Model. Each attribute of the class represents a database field.\n\nfrom django.db import models\n\nclass MyModel(models.Model):\n    my_field = models.CharField(max_length=100)\n    my_number = models.IntegerField()",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#basic-model-definition",
    "href": "Back_end/Django/models_design.html#basic-model-definition",
    "title": "Model Design",
    "section": "",
    "text": "Django models are defined as Python classes that inherit from django.db.models.Model. Each attribute of the class represents a database field.\n\nfrom django.db import models\n\nclass MyModel(models.Model):\n    my_field = models.CharField(max_length=100)\n    my_number = models.IntegerField()",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#field-types",
    "href": "Back_end/Django/models_design.html#field-types",
    "title": "Model Design",
    "section": "Field Types",
    "text": "Field Types\n\nDjango provides a wide range of field types to represent different data types:\n\n\nCharField for short text.\nTextField for large text.\nIntegerField for integers.\nFloatField for floating-point numbers.\nBooleanField for boolean values.\nDateField and DateTimeField for dates and timestamps.\nForeignKey, OneToOneField, ManyToManyField for relationships between models.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#meta-options",
    "href": "Back_end/Django/models_design.html#meta-options",
    "title": "Model Design",
    "section": "Meta Options",
    "text": "Meta Options\n\nMeta options are used to define model-level metadata, such as ordering, verbose names, and database table names.\n\nclass MyModel(models.Model):\n    my_field = models.CharField(max_length=100)\n\n    class Meta:\n        ordering = ['my_field']\n        verbose_name = 'My Model'\n        verbose_name_plural = 'My Models'",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#model-relationships",
    "href": "Back_end/Django/models_design.html#model-relationships",
    "title": "Model Design",
    "section": "Model Relationships",
    "text": "Model Relationships\nDjango ORM supports three types of relationships: - One-to-One (OneToOneField): Each instance of a model is related to one instance of another model. - Many-to-One (ForeignKey): Many instances of a model are related to one instance of another model. - Many-to-Many (ManyToManyField): Many instances of a model are related to many instances of another model.\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#field-options",
    "href": "Back_end/Django/models_design.html#field-options",
    "title": "Model Design",
    "section": "Field Options",
    "text": "Field Options\n\nField options allow you to specify constraints and attributes for model fields.\n\n\nmax_length: Maximum length of the field (for CharField and TextField).\ndefault: Default value for the field.\nnull: If True, Django will store empty values as NULL in the database.\nblank: If True, the field is allowed to be blank.\nchoices: A list of valid choices for this field.\nunique: If True, this field must be unique throughout the table.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#model-methods",
    "href": "Back_end/Django/models_design.html#model-methods",
    "title": "Model Design",
    "section": "Model Methods",
    "text": "Model Methods\n\nYou can add methods to your model to encapsulate business logic or utility functions.\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.title\n\n    def get_absolute_url(self):\n        return f\"/books/{self.id}/\"",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#custom-managers-and-querysets",
    "href": "Back_end/Django/models_design.html#custom-managers-and-querysets",
    "title": "Model Design",
    "section": "Custom Managers and QuerySets",
    "text": "Custom Managers and QuerySets\n\nCustom managers and querysets allow you to define reusable query logic.\n\nclass BookManager(models.Manager):\n    def published(self):\n        return self.filter(published=True)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    published = models.BooleanField(default=False)\n\n    objects = BookManager()",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#model-inheritance",
    "href": "Back_end/Django/models_design.html#model-inheritance",
    "title": "Model Design",
    "section": "Model Inheritance",
    "text": "Model Inheritance\n\nDjango supports model inheritance, allowing you to reuse common fields and methods.\n\n\nAbstract Base Classes: Used when you want to put some common information into a base class.\nMulti-table Inheritance: Each model in the hierarchy gets its own database table.\nProxy Models: Used to modify the Python-level behavior without changing the model‚Äôs fields.\n\nclass CommonInfo(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        abstract = True\n\nclass Student(CommonInfo):\n    grade = models.CharField(max_length=2)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#signals",
    "href": "Back_end/Django/models_design.html#signals",
    "title": "Model Design",
    "section": "Signals",
    "text": "Signals\n\nSignals allow decoupled applications to get notified when certain actions occur (e.g., a model instance is saved or deleted).\n\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=Book)\ndef book_saved(sender, instance, **kwargs):\n    print(f\"Book saved: {instance.title}\")",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/models_design.html#model-validations",
    "href": "Back_end/Django/models_design.html#model-validations",
    "title": "Model Design",
    "section": "Model Validations",
    "text": "Model Validations\n\nYou can define custom validation logic within your model.\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    publication_date = models.DateField()\n\n    def clean(self):\n        if self.publication_date &gt; datetime.date.today():\n            raise ValidationError('Publication date cannot be in the future.')",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Model Design"
    ]
  },
  {
    "objectID": "Back_end/Django/testing.html",
    "href": "Back_end/Django/testing.html",
    "title": "Testing",
    "section": "",
    "text": "direct testing (python api)\nDRF testing (direct json)\nserver testing (full json api)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Testing"
    ]
  },
  {
    "objectID": "Back_end/Django/testing.html#levels",
    "href": "Back_end/Django/testing.html#levels",
    "title": "Testing",
    "section": "",
    "text": "direct testing (python api)\nDRF testing (direct json)\nserver testing (full json api)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Testing"
    ]
  },
  {
    "objectID": "Back_end/Django/testing.html#setting-up-the-testing-environment",
    "href": "Back_end/Django/testing.html#setting-up-the-testing-environment",
    "title": "Testing",
    "section": "Setting Up the Testing Environment",
    "text": "Setting Up the Testing Environment\n\nEnsure you have pytest and pytest-django installed. These are popular packages that enhance Django‚Äôs built-in testing framework.\n\npip install pytest pytest-django\n\nConfigure pytest:\n\nCreate a pytest.ini file in the root of your project to configure pytest:\n\n[pytest]\nDJANGO_SETTINGS_MODULE = myproject.settings\npython_files = tests.py test_*.py *_tests.py\nOr &gt; Add to pyproject.toml\n[tool.pytest.ini_options]\nDJANGO_SETTINGS_MODULE = \"rm.settings\"\npython_files = [\"*test*.py\"]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Testing"
    ]
  },
  {
    "objectID": "Back_end/Django/testing.html#writing-tests",
    "href": "Back_end/Django/testing.html#writing-tests",
    "title": "Testing",
    "section": "Writing Tests",
    "text": "Writing Tests\n\nModel Tests\n\nModel tests ensure that your models behave as expected.\n\n# questionnaire/tests/test_models.py\nimport pytest\nfrom questionnaire.models import Questionnaire, Question, Choice, Response, Answer\nfrom base.models import Client\n\n@pytest.mark.django_db\ndef test_create_questionnaire():\n    questionnaire = Questionnaire.objects.create(title=\"Test Questionnaire\", description=\"A test questionnaire.\")\n    assert questionnaire.title == \"Test Questionnaire\"\n    assert questionnaire.description == \"A test questionnaire.\"\n\n\nSerializer Tests\n# questionnaire/tests/test_serializers.py\nimport pytest\nfrom questionnaire.serializers import QuestionnaireSerializer\nfrom questionnaire.models import Questionnaire\n\n@pytest.mark.django_db\ndef test_questionnaire_serializer():\n    data = {\"title\": \"Test Questionnaire\", \"description\": \"A test questionnaire.\"}\n    serializer = QuestionnaireSerializer(data=data)\n    assert serializer.is_valid()\n    questionnaire = serializer.save()\n    assert questionnaire.title == \"Test Questionnaire\"\n\n\n\nTesting Views and Endpoints\n# questionnaire/tests/test_views.py\nimport pytest\nfrom django.urls import reverse\nfrom rest_framework import status\nfrom questionnaire.models import Questionnaire\n\n@pytest.mark.django_db\ndef test_create_questionnaire(api_client):\n    url = reverse('questionnaire-list')\n    data = {\"title\": \"Test Questionnaire\", \"description\": \"A test questionnaire.\"}\n    response = api_client.post(url, data, format='json')\n    assert response.status_code == status.HTTP_201_CREATED\n    assert Questionnaire.objects.count() == 1\n    assert Questionnaire.objects.get().title == \"Test Questionnaire\"",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Testing"
    ]
  },
  {
    "objectID": "Back_end/Django/testing.html#testing-with-fixtures",
    "href": "Back_end/Django/testing.html#testing-with-fixtures",
    "title": "Testing",
    "section": "Testing with Fixtures",
    "text": "Testing with Fixtures\n# questionnaire/tests/test_views_with_fixtures.py\nimport pytest\nfrom django.urls import reverse\nfrom rest_framework import status\nfrom base.models import Client\nfrom questionnaire.models import Questionnaire, Question, Response\n\n@pytest.fixture\ndef client_data():\n    return {\"name\": \"Test Client\", \"email\": \"testclient@example.com\", \"sex\": \"M\", \"dob\": \"1990-01-01\"}\n\n@pytest.fixture\ndef client(client_data):\n    return Client.objects.create(**client_data)\n\n@pytest.fixture\ndef questionnaire():\n    return Questionnaire.objects.create(title=\"Test Questionnaire\", description=\"A test questionnaire.\")\n\n@pytest.mark.django_db\ndef test_create_response(api_client, client, questionnaire):\n    url = reverse('response-list')\n    data = {\"questionnaire\": questionnaire.id, \"client\": client.id}\n    response = api_client.post(url, data, format='json')\n    assert response.status_code == status.HTTP_201_CREATED\n    assert Response.objects.count() == 1\n    assert Response.objects.get().client == client",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Testing"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_basic.html",
    "href": "Back_end/Django/drf_basic.html",
    "title": "DRF Basic",
    "section": "",
    "text": "pip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering suppor\nAdd rest_framework to your INSTALLED_APPS setting.\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\nAdd the following to your root urls.py file.\n\nurlpatterns = [\n    ...\n    path('api-auth/', include('rest_framework.urls'))\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Basic"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_basic.html#installation",
    "href": "Back_end/Django/drf_basic.html#installation",
    "title": "DRF Basic",
    "section": "",
    "text": "pip install djangorestframework\npip install markdown       # Markdown support for the browsable API.\npip install django-filter  # Filtering suppor\nAdd rest_framework to your INSTALLED_APPS setting.\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]\nAdd the following to your root urls.py file.\n\nurlpatterns = [\n    ...\n    path('api-auth/', include('rest_framework.urls'))\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Basic"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_basic.html#example",
    "href": "Back_end/Django/drf_basic.html#example",
    "title": "DRF Basic",
    "section": "Example",
    "text": "Example\nAny global settings for a REST framework API are kept in a single configuration dictionary named REST_FRAMEWORK. Start off by adding the following to your settings.py module:\nREST_FRAMEWORK = {\n    # Use Django's standard `django.contrib.auth` permissions,\n    # or allow read-only access for unauthenticated users.\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'\n    ]\n}\nHere‚Äôs our project‚Äôs root urls.py module:\nfrom django.urls import path, include\nfrom django.contrib.auth.models import User\nfrom rest_framework import routers, serializers, viewsets\n\n# Serializers define the API representation.\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'is_staff']\n\n# ViewSets define the view behavior.\nclass UserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n# Routers provide an easy way of automatically determining the URL conf.\nrouter = routers.DefaultRouter()\nrouter.register(r'users', UserViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Basic"
    ]
  },
  {
    "objectID": "Back_end/Django/secrets.html",
    "href": "Back_end/Django/secrets.html",
    "title": "Secrets",
    "section": "",
    "text": "# .env file\nDJANGO_SECRET_KEY='your-secret-key'\nDB_NAME='your-database-name'\nDB_USER='your-database-user'\nDB_PASSWORD='your-database-password'\nDB_HOST='your-database-host'\nDB_PORT='your-database-port'\n\n\n\npoetry add django-environ\n\n\n\n\nModify settings.py file\n\nimport environ\nimport os\n\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\nSECRET_KEY = env('DJANGO_SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST', default='localhost'),\n        'PORT': env('DB_PORT', default='5432'),\n    }\n}",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Back_end/Django/secrets.html#use-environment-variables",
    "href": "Back_end/Django/secrets.html#use-environment-variables",
    "title": "Secrets",
    "section": "",
    "text": "# .env file\nDJANGO_SECRET_KEY='your-secret-key'\nDB_NAME='your-database-name'\nDB_USER='your-database-user'\nDB_PASSWORD='your-database-password'\nDB_HOST='your-database-host'\nDB_PORT='your-database-port'\n\n\n\npoetry add django-environ\n\n\n\n\nModify settings.py file\n\nimport environ\nimport os\n\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\nSECRET_KEY = env('DJANGO_SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST', default='localhost'),\n        'PORT': env('DB_PORT', default='5432'),\n    }\n}",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Back_end/Django/secrets.html#use-github-secrets-for-cicd",
    "href": "Back_end/Django/secrets.html#use-github-secrets-for-cicd",
    "title": "Secrets",
    "section": "Use GitHub Secrets for CI/CD",
    "text": "Use GitHub Secrets for CI/CD\n\nAdd Secrets to GitHub\n\nNavigate to your repository on GitHub.\nGo to Settings &gt; Secrets and variables &gt; Actions.\nAdd your secrets (e.g., DJANGO_SECRET_KEY, DB_NAME).\n\n\n\nAccess Secrets in GitHub Actions\n\nExample workflow file\n\nname: Django CI/CD\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Set environment variables\n      run: echo \"DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}\" &gt;&gt; $GITHUB_ENV\n\n    - name: Run migrations\n      env:\n        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}\n        DB_NAME: ${{ secrets.DB_NAME }}\n        DB_USER: ${{ secrets.DB_USER }}\n        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n        DB_HOST: ${{ secrets.DB_HOST }}\n        DB_PORT: ${{ secrets.DB_PORT }}\n      run: |\n        python manage.py migrate\n\n    - name: Run tests\n      env:\n        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}\n        DB_NAME: ${{ secrets.DB_NAME }}\n        DB_USER: ${{ secrets.DB_USER }}\n        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}\n        DB_HOST: ${{ secrets.DB_HOST }}\n        DB_PORT: ${{ secrets.DB_PORT }}\n      run: |\n        python manage.py test",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Back_end/Django/secrets.html#use-a-secret-management-service",
    "href": "Back_end/Django/secrets.html#use-a-secret-management-service",
    "title": "Secrets",
    "section": "Use a Secret Management Service",
    "text": "Use a Secret Management Service\nFor large projects, consider using secret management services like: - AWS Secrets Manager - Azure Key Vault - HashiCorp Vault.",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Back_end/Django/secrets.html#use-config.settings-structure",
    "href": "Back_end/Django/secrets.html#use-config.settings-structure",
    "title": "Secrets",
    "section": "Use config.settings Structure",
    "text": "Use config.settings Structure\n\nFor more advanced setups, you can structure your settings using the config.settings module approach to separate settings for different environments (development, production, etc.).\n\n\nBase Settings (config/settings/base.py)\nimport environ\nimport os\n\nenv = environ.Env()\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = env('DJANGO_SECRET_KEY')\nDEBUG = env.bool('DEBUG', default=False)\nALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env('DB_NAME'),\n        'USER': env('DB_USER'),\n        'PASSWORD': env('DB_PASSWORD'),\n        'HOST': env('DB_HOST', default='localhost'),\n        'PORT': env('DB_PORT', default='5432'),\n    }\n}\n\n\nDevelopment Settings (config/settings/development.py)\nfrom .base import *\n\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n\n\nProduction Settings (config/settings/production.py)\nfrom .base import *\n\nDEBUG = False\nALLOWED_HOSTS = ['yourdomain.com']\n\n\nSpecify Settings Module:\n\nSet the DJANGO_SETTINGS_MODULE environment variable to specify the settings module to use.\nFor development: export DJANGO_SETTINGS_MODULE=config.settings.development\nFor production: export DJANGO_SETTINGS_MODULE=config.settings.production",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Secrets"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html",
    "href": "Back_end/Django/drf_quickstart.html",
    "title": "DRF Quickstart",
    "section": "",
    "text": "# Create the project directory\nmkdir tutorial\ncd tutorial\n\n# Create a virtual environment to isolate our package dependencies locally\npython3 -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n\n# Install Django and Django REST framework into the virtual environment\npip install djangorestframework\n\n# Set up a new project with a single application\ndjango-admin startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin startapp quickstart\ncd ..\n\nNow sync your database for the first time:\n\npython manage.py migrate\n\nWe‚Äôll also create an initial user named admin with a password. We‚Äôll authenticate as that user later in our example.\n\npython manage.py createsuperuser --username bthek1 --email admin@gmail.com",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#project-setup",
    "href": "Back_end/Django/drf_quickstart.html#project-setup",
    "title": "DRF Quickstart",
    "section": "",
    "text": "# Create the project directory\nmkdir tutorial\ncd tutorial\n\n# Create a virtual environment to isolate our package dependencies locally\npython3 -m venv env\nsource env/bin/activate  # On Windows use `env\\Scripts\\activate`\n\n# Install Django and Django REST framework into the virtual environment\npip install djangorestframework\n\n# Set up a new project with a single application\ndjango-admin startproject tutorial .  # Note the trailing '.' character\ncd tutorial\ndjango-admin startapp quickstart\ncd ..\n\nNow sync your database for the first time:\n\npython manage.py migrate\n\nWe‚Äôll also create an initial user named admin with a password. We‚Äôll authenticate as that user later in our example.\n\npython manage.py createsuperuser --username bthek1 --email admin@gmail.com",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#serializers",
    "href": "Back_end/Django/drf_quickstart.html#serializers",
    "title": "DRF Quickstart",
    "section": "Serializers",
    "text": "Serializers\n\nFirst up we‚Äôre going to define some serializers. Let‚Äôs create a new module named tutorial/quickstart/serializers.py that we‚Äôll use for our data representations.\n\n\nNotice that we‚Äôre using hyperlinked relations in this case with HyperlinkedModelSerializer. You can also use primary key and various other relationships, but hyperlinking is good RESTful design.\n\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ['url', 'username', 'email', 'groups']\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ['url', 'name']",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#views",
    "href": "Back_end/Django/drf_quickstart.html#views",
    "title": "DRF Quickstart",
    "section": "Views",
    "text": "Views\nfrom django.contrib.auth.models import Group, User\nfrom rest_framework import permissions, viewsets\n\nfrom tutorial.quickstart.serializers import GroupSerializer, UserSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all().order_by('name')\n    serializer_class = GroupSerializer\n    permission_classes = [permissions.IsAuthenticated]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#urls",
    "href": "Back_end/Django/drf_quickstart.html#urls",
    "title": "DRF Quickstart",
    "section": "URLs",
    "text": "URLs\n\nBecause we‚Äôre using viewsets instead of views, we can automatically generate the URL conf for our API, by simply registering the viewsets with a router class.\n\n\nAgain, if we need more control over the API URLs we can simply drop down to using regular class-based views, and writing the URL conf explicitly.\n\n\nFinally, we‚Äôre including default login and logout views for use with the browsable API. That‚Äôs optional, but useful if your API requires authentication and you want to use the browsable API.\n\nfrom django.urls import include, path\nfrom rest_framework import routers\n\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#pagination",
    "href": "Back_end/Django/drf_quickstart.html#pagination",
    "title": "DRF Quickstart",
    "section": "Pagination",
    "text": "Pagination\n\nPagination allows you to control how many objects per page are returned. To enable it add the following lines to tutorial/settings.py\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#settings",
    "href": "Back_end/Django/drf_quickstart.html#settings",
    "title": "DRF Quickstart",
    "section": "Settings",
    "text": "Settings\nAdd rest_framework to your INSTALLED_APPS setting.\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_quickstart.html#testing-our-api",
    "href": "Back_end/Django/drf_quickstart.html#testing-our-api",
    "title": "DRF Quickstart",
    "section": "Testing our API",
    "text": "Testing our API\npython manage.py runserver\n\nWe can now access our API, both from the command-line, using tools like curl...\n\nbash: curl -u admin -H 'Accept: application/json; indent=4' http://127.0.0.1:8000/users/\nEnter host password for user 'admin':\n{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\",\n            \"email\": \"admin@example.com\",\n            \"groups\": []\n        }\n    ]\n}\n\nOr using the httpie, command line tool‚Ä¶\n\nbash: http -a admin http://127.0.0.1:8000/users/\nhttp: password for admin@127.0.0.1:8000:: \n$HTTP/1.1 200 OK\n...\n{\n    \"count\": 1,\n    \"next\": null,\n    \"previous\": null,\n    \"results\": [\n        {\n            \"email\": \"admin@example.com\",\n            \"groups\": [],\n            \"url\": \"http://127.0.0.1:8000/users/1/\",\n            \"username\": \"admin\"\n        }\n    ]\n}",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Quickstart"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html",
    "href": "Back_end/Django/drf_tutorial.html",
    "title": "DRF Tutorial",
    "section": "",
    "text": "mkdir tut_drf2\npython3 -m venv env\nsource env/bin/activate\npip install django\npip install djangorestframework\npip install pygments  # We'll be using this for the code highlighting\ndjango-admin startproject tut2\ncd tut2\npython manage.py startapp snippets",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#getting-started",
    "href": "Back_end/Django/drf_tutorial.html#getting-started",
    "title": "DRF Tutorial",
    "section": "",
    "text": "mkdir tut_drf2\npython3 -m venv env\nsource env/bin/activate\npip install django\npip install djangorestframework\npip install pygments  # We'll be using this for the code highlighting\ndjango-admin startproject tut2\ncd tut2\npython manage.py startapp snippets",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#tutorialsettings.py",
    "href": "Back_end/Django/drf_tutorial.html#tutorialsettings.py",
    "title": "DRF Tutorial",
    "section": "tutorial/settings.py",
    "text": "tutorial/settings.py\n\nedit\n\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'snippets',\n]\n\nadd\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}\n\npython manage.py makemigrations snippets\npython manage.py migrate snippets",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#snippetsmodel.py",
    "href": "Back_end/Django/drf_tutorial.html#snippetsmodel.py",
    "title": "DRF Tutorial",
    "section": "snippets/model.py",
    "text": "snippets/model.py\nfrom django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters.html import HtmlFormatter\nfrom pygments import highlight\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted([(item, item) for item in get_all_styles()])\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n    owner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\n    highlighted = models.TextField()\n    class Meta:\n        ordering = ['created']\n        \n    def save(self, *args, **kwargs):\n        \"\"\"\n        Use the `pygments` library to create a highlighted HTML\n        representation of the code snippet.\n        \"\"\"\n        lexer = get_lexer_by_name(self.language)\n        linenos = 'table' if self.linenos else False\n        options = {'title': self.title} if self.title else {}\n        formatter = HtmlFormatter(style=self.style, linenos=linenos,\n                                full=True, **options)\n        self.highlighted = highlight(self.code, lexer, formatter)\n        super().save(*args, **kwargs)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#snippetsurls.py",
    "href": "Back_end/Django/drf_tutorial.html#snippetsurls.py",
    "title": "DRF Tutorial",
    "section": "snippets/urls.py",
    "text": "snippets/urls.py\nfrom django.urls import path\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n# API endpoints\nurlpatterns = format_suffix_patterns([\n    path('', views.api_root),\n    path('snippets/',\n        views.SnippetList.as_view(),\n        name='snippet-list'),\n    path('snippets/&lt;int:pk&gt;/',\n        views.SnippetDetail.as_view(),\n        name='snippet-detail'),\n    path('snippets/&lt;int:pk&gt;/highlight/',\n        views.SnippetHighlight.as_view(),\n        name='snippet-highlight'),\n    path('users/',\n        views.UserList.as_view(),\n        name='user-list'),\n    path('users/&lt;int:pk&gt;/',\n        views.UserDetail.as_view(),\n        name='user-detail')\n])",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#tut2urls.py",
    "href": "Back_end/Django/drf_tutorial.html#tut2urls.py",
    "title": "DRF Tutorial",
    "section": "tut2/urls.py",
    "text": "tut2/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('snippets.urls')),\n]\n\nurlpatterns += [\n    path('api-auth/', include('rest_framework.urls')),\n]",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#snippetsviews.py",
    "href": "Back_end/Django/drf_tutorial.html#snippetsviews.py",
    "title": "DRF Tutorial",
    "section": "snippets/views.py",
    "text": "snippets/views.py\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\nfrom rest_framework import permissions\nfrom snippets.permissions import IsOwnerOrReadOnly\n\nclass SnippetList(generics.ListCreateAPIView):\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly]\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly]\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    \n    \nfrom django.contrib.auth.models import User\nfrom snippets.serializers import UserSerializer\n\nclass UserList(generics.ListAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n\nclass UserDetail(generics.RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    \n    \nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom rest_framework.reverse import reverse\n\n\n@api_view(['GET'])\ndef api_root(request, format=None):\n    return Response({\n        'users': reverse('user-list', request=request, format=format),\n        'snippets': reverse('snippet-list', request=request, format=format)\n    })\n    \nfrom rest_framework import renderers\n\nclass SnippetHighlight(generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    renderer_classes = [renderers.StaticHTMLRenderer]\n\n    def get(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#snippetsserializers.py",
    "href": "Back_end/Django/drf_tutorial.html#snippetsserializers.py",
    "title": "DRF Tutorial",
    "section": "snippets/serializers.py",
    "text": "snippets/serializers.py\nfrom rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\nfrom django.contrib.auth.models import User\n\n\nclass SnippetSerializer(serializers.HyperlinkedModelSerializer):\n    owner = serializers.ReadOnlyField(source='owner.username')\n    highlight = serializers.HyperlinkedIdentityField(view_name='snippet-highlight', format='html')\n\n    class Meta:\n        model = Snippet\n        fields = ['url', 'id', 'highlight', 'owner',\n                  'title', 'code', 'linenos', 'language', 'style']\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ['url', 'id', 'username', 'snippets']",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/drf_tutorial.html#snippetspermissions.pyt",
    "href": "Back_end/Django/drf_tutorial.html#snippetspermissions.pyt",
    "title": "DRF Tutorial",
    "section": "snippets/permissions.pyt",
    "text": "snippets/permissions.pyt\nfrom rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\"\n    Custom permission to only allow owners of an object to edit it.\n    \"\"\"\n\n    def has_object_permission(self, request, view, obj):\n        # Read permissions are allowed to any request,\n        # so we'll always allow GET, HEAD or OPTIONS requests.\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        # Write permissions are only allowed to the owner of the snippet.\n        return obj.owner == request.user",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "DRF Tutorial"
    ]
  },
  {
    "objectID": "Back_end/Django/rm_django_setup.html",
    "href": "Back_end/Django/rm_django_setup.html",
    "title": "Django For Recovery Metrics",
    "section": "",
    "text": "Add to bash\n\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\nReload bash\n\nsource ~/.bashrc",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Back_end/Django/rm_django_setup.html#install-poetry",
    "href": "Back_end/Django/rm_django_setup.html#install-poetry",
    "title": "Django For Recovery Metrics",
    "section": "",
    "text": "Add to bash\n\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\nReload bash\n\nsource ~/.bashrc",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Back_end/Django/rm_django_setup.html#install-direnv",
    "href": "Back_end/Django/rm_django_setup.html#install-direnv",
    "title": "Django For Recovery Metrics",
    "section": "Install direnv",
    "text": "Install direnv",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Back_end/Django/rm_django_setup.html#add-libraries",
    "href": "Back_end/Django/rm_django_setup.html#add-libraries",
    "title": "Django For Recovery Metrics",
    "section": "Add libraries",
    "text": "Add libraries\npoetry add django\npoetry add djangorestframework\npoetry add pygments  \npoetry add django-filter\npoetry add --dev pytest",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Back_end/Django/rm_django_setup.html#create-default-project",
    "href": "Back_end/Django/rm_django_setup.html#create-default-project",
    "title": "Django For Recovery Metrics",
    "section": "Create Default Project",
    "text": "Create Default Project\ndjango-admin startproject RM_django\ncd RM_django\npython manage.py startapp Users\n\nadd model code\n\npoetry run python manage.py makemigrations\npoetry run python manage.py migrate\n\nrun server\n\npython manage.py runserver\n\nWorkflows\nname: Django CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.12'\n\n\n    - name: Install Poetry\n      run: |\n        curl -sSL https://install.python-poetry.org | python3 -\n        export PATH=\"$HOME/.local/bin:$PATH\"\n    - name: Install dependencies\n      run: poetry install\n    - name: List files in the repository\n      run: |\n        ls ${{ github.workspace }}\n    - name: Run migrations\n      run: poetry run python RM_Django/manage.py migrate\n    - name: Run tests\n      run: poetry run python RM_Django/manage.py test",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "Back_end/Django/rm_django_setup.html#djangox---postgresql",
    "href": "Back_end/Django/rm_django_setup.html#djangox---postgresql",
    "title": "Django For Recovery Metrics",
    "section": "DjangoX - postgresql",
    "text": "DjangoX - postgresql\n\nUse djanogx template to create repo\nSetup poetry\nadd .envrc file for direnv\nadd .env\n\n\nSetup Poetry\n\nadd required libraries into poetry env\n\npoetry add $(cat requirements.txt | awk '{print $1}')\n\n\nSetup postgresql using .env\nsudo -u postgres createuser --interactive\nsudo -u postgres createdb rm_db\nsudo -u postgres psql\nALTER USER x_user WITH PASSWORD 'x_password';\nGRANT ALL PRIVILEGES ON DATABASE x_db TO x_user;\n\\q\n\ndb check:\n# load env vars with export if req'd\npsql -d $DB_NAME -U $DB_USER -W\npython manage.py startapp base\npython manage.py startapp questionnaire\n\nAdd to settings -&gt; Installed Apps\n\nINSTALLED_APPS = [\n    \"rest_framework\",\n    # Local\n    \"accounts\",\n    \"pages\",\n    \"base\",\n    \"questionnaire\",\n]\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',  # Use session authentication\n        'rest_framework.authentication.TokenAuthentication',    # Use token authentication\n        # Add other authentication classes as needed\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',  # Ensure authenticated users have access\n    ],\n}\n\nadd model code\n\npoetry run python manage.py makemigrations base\npoetry run python manage.py makemigrations questionniare\npoetry run python manage.py migrate\n\nrun server\n\npython manage.py runserver\n\n\n\nFull Prompt",
    "crumbs": [
      "Blog",
      "Back End",
      "Django",
      "Django For Recovery Metrics"
    ]
  },
  {
    "objectID": "gunicorn.html",
    "href": "gunicorn.html",
    "title": "Gunicorn",
    "section": "",
    "text": "pip install gunicorn",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#installation",
    "href": "gunicorn.html#installation",
    "title": "Gunicorn",
    "section": "",
    "text": "pip install gunicorn",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#basic-usage",
    "href": "gunicorn.html#basic-usage",
    "title": "Gunicorn",
    "section": "Basic Usage",
    "text": "Basic Usage\n\nTo run your Django application using Gunicorn, navigate to your project‚Äôs root directory and use the following command\n\ngunicorn your_project_name.wsgi:application\n\nReplace your_project_name with the name of your Django project.",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#configuration-options",
    "href": "gunicorn.html#configuration-options",
    "title": "Gunicorn",
    "section": "Configuration Options",
    "text": "Configuration Options\n\nGunicorn provides various options to configure the server:\n\n\nBinding to a Specific Address and Port\ngunicorn --bind 0.0.0.0:8000 your_project_name.wsgi:application\n\n\nNumber of Workers\n\nThe number of worker processes for handling requests. More workers can handle more requests concurrently but consume more memory.\n\ngunicorn --workers 3 your_project_name.wsgi:application\n\n\nTimeout\n\nThe maximum number of seconds a worker can spend handling a request before it is killed and restarted.\n\ngunicorn --timeout 30 your_project_name.wsgi:application\n\n\nLogging\n\nYou can specify log files for Gunicorn\n\ngunicorn --access-logfile access.log --error-logfile error.log your_project_name.wsgi:application",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#deployment-with-systemd",
    "href": "gunicorn.html#deployment-with-systemd",
    "title": "Gunicorn",
    "section": "Deployment with Systemd",
    "text": "Deployment with Systemd\n\nFor a production deployment, it‚Äôs common to use systemd to manage Gunicorn. Here‚Äôs an example of a systemd service file\n\n[Unit]\nDescription=gunicorn daemon\nAfter=network.target\n\n[Service]\nUser=your_user\nGroup=www-data\nWorkingDirectory=/path/to/your/project\nExecStart=/path/to/your/venv/bin/gunicorn --workers 3 --bind unix:/path/to/your/project/gunicorn.sock your_project_name.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n\nReplace your_user with your system username.\nReplace /path/to/your/project with the path to your Django project.\nReplace /path/to/your/venv with the path to your virtual environment.\n\n\nAfter creating the service file, enable and start the service\nsudo systemctl enable gunicorn\nsudo systemctl start gunicorn",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#serving-static-and-media-files",
    "href": "gunicorn.html#serving-static-and-media-files",
    "title": "Gunicorn",
    "section": "Serving Static and Media Files",
    "text": "Serving Static and Media Files\n\nGunicorn does not serve static or media files in production. Use a web server like Nginx to handle static files and reverse proxy requests to Gunicorn\n\n\nExample Nginx configuration\n\nserver {\n    listen 80;\n    server_name your_domain_or_IP;\n\n    location / {\n        proxy_pass http://unix:/path/to/your/project/gunicorn.sock;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static/ {\n        alias /path/to/your/project/static/;\n    }\n\n    location /media/ {\n        alias /path/to/your/project/media/;\n    }\n}",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#security-considerations",
    "href": "gunicorn.html#security-considerations",
    "title": "Gunicorn",
    "section": "Security Considerations",
    "text": "Security Considerations\n\nKeep Gunicorn and your Django project dependencies up to date.\nUse HTTPS for secure communication.\nUse a firewall to restrict access to the Gunicorn server, allowing only the web server (e.g., Nginx) to communicate with it.",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#performance-tuning",
    "href": "gunicorn.html#performance-tuning",
    "title": "Gunicorn",
    "section": "Performance Tuning",
    "text": "Performance Tuning\n\nNumber of Workers: Start with (2 x $num_cores) + 1 workers. Monitor and adjust based on your application‚Äôs performance and server‚Äôs resource availability.\nWorker Class: Use different worker classes based on your application‚Äôs nature, e.g., gevent for async applications.\nKeep-Alive: Adjust the keep-alive setting for persistent connections, especially in high-traffic scenarios.",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#monitoring-and-logging",
    "href": "gunicorn.html#monitoring-and-logging",
    "title": "Gunicorn",
    "section": "Monitoring and Logging",
    "text": "Monitoring and Logging\n\nUse monitoring tools like New Relic, Datadog, or Prometheus to keep an eye on the performance and health of your application.\nLog files should be monitored for errors and access patterns.",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "gunicorn.html#common-issues-and-troubleshooting",
    "href": "gunicorn.html#common-issues-and-troubleshooting",
    "title": "Gunicorn",
    "section": "Common Issues and Troubleshooting",
    "text": "Common Issues and Troubleshooting\n\n502 Bad Gateway: Often due to Gunicorn not running or configuration issues with the reverse proxy server.\nSlow Performance: Could be due to insufficient worker processes or server resources. Profiling the application can help identify bottlenecks.\nMemory Leaks: Regularly monitor memory usage and ensure proper resource management in the application.",
    "crumbs": [
      "Blog",
      "Gunicorn"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Webdevelopment Documentation",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "Blog",
      "[Webdevelopment Documentation](https://bthek1.github.io/webdevelopment_doc/)"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Webdevelopment Documentation",
    "section": "Install",
    "text": "Install\npip install webdevelopment_doc",
    "crumbs": [
      "Blog",
      "[Webdevelopment Documentation](https://bthek1.github.io/webdevelopment_doc/)"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Webdevelopment Documentation",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don‚Äôt forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "Blog",
      "[Webdevelopment Documentation](https://bthek1.github.io/webdevelopment_doc/)"
    ]
  },
  {
    "objectID": "ssh&vnc&ftp.html",
    "href": "ssh&vnc&ftp.html",
    "title": "SSH, VNC and FTP",
    "section": "",
    "text": "sudo apt install openssh-server openssh-client\nsudo systemctl restart sshd\nsudo systemctl status sshd\n\n\nedit\ncat ~/.ssh/config\nadd\nHost &lt;code name&gt;\n        HostName 192.168.1.108\n        User &lt;user name&gt;\n        Port 22\nssh &lt;code name&gt;",
    "crumbs": [
      "Blog",
      "SSH, VNC and FTP"
    ]
  },
  {
    "objectID": "ssh&vnc&ftp.html#install-ssh",
    "href": "ssh&vnc&ftp.html#install-ssh",
    "title": "SSH, VNC and FTP",
    "section": "",
    "text": "sudo apt install openssh-server openssh-client\nsudo systemctl restart sshd\nsudo systemctl status sshd\n\n\nedit\ncat ~/.ssh/config\nadd\nHost &lt;code name&gt;\n        HostName 192.168.1.108\n        User &lt;user name&gt;\n        Port 22\nssh &lt;code name&gt;",
    "crumbs": [
      "Blog",
      "SSH, VNC and FTP"
    ]
  },
  {
    "objectID": "ssh&vnc&ftp.html#install-tightvnc",
    "href": "ssh&vnc&ftp.html#install-tightvnc",
    "title": "SSH, VNC and FTP",
    "section": "Install tightVNC",
    "text": "Install tightVNC\n\nonline install on windows\n\nsudo apt update\nsudo apt install lightdm\nsudo reboot\nsudo apt install x11vnc\nsudo nano /lib/systemd/system/x11vnc.service\n\nCopy and paste these commands - change the password\n[Unit]\nDescription=x11vnc service\nAfter=display-manager.service network.target syslog.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/x11vnc -forever -display :0 -auth guess -passwd password\nExecStop=/usr/bin/killall x11vnc\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n\n\nRun these commands after\nsystemctl daemon-reload\nsystemctl enable x11vnc.service\nsystemctl start x11vnc.service\nsystemctl status x11vnc.service\n\n\nTo connect\nuse ipaddress: 192.168.1.108\nuse",
    "crumbs": [
      "Blog",
      "SSH, VNC and FTP"
    ]
  },
  {
    "objectID": "ssh&vnc&ftp.html#transfer-files",
    "href": "ssh&vnc&ftp.html#transfer-files",
    "title": "SSH, VNC and FTP",
    "section": "Transfer Files",
    "text": "Transfer Files\nrsync filename username@ip_address:/home/username",
    "crumbs": [
      "Blog",
      "SSH, VNC and FTP"
    ]
  },
  {
    "objectID": "ssh&vnc&ftp.html#ftp",
    "href": "ssh&vnc&ftp.html#ftp",
    "title": "SSH, VNC and FTP",
    "section": "FTP",
    "text": "FTP\n\nhttps://linuxconfig.org/setup-ftp-server-on-linux\n\nInstall FTP server\nsudo apt install vsftpd\ncreate a backup copy\nsudo mv /etc/vsftpd.conf /etc/vsftpd.conf_orig\nedit the config file\nsudo nano /etc/vsftpd.conf\nlisten=NO\nlisten_ipv6=YES\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\nlocal_umask=022\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\nchroot_local_user=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\npasv_enable=Yes\npasv_min_port=10000\npasv_max_port=10100\nallow_writeable_chroot=YES\ncreate a user (optional)\n$ sudo useradd -m ftpuser\n$ sudo passwd ftpuser\nNew password: \nRetype new password: \npasswd: password updated successfully",
    "crumbs": [
      "Blog",
      "SSH, VNC and FTP"
    ]
  },
  {
    "objectID": "Cloud /aws-amazon.html",
    "href": "Cloud /aws-amazon.html",
    "title": "AMS - Amazon",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Blog",
      "Cloud ",
      "AMS - Amazon"
    ]
  },
  {
    "objectID": "nginx.html",
    "href": "nginx.html",
    "title": "Nginx",
    "section": "",
    "text": "Admin site\nObject-relational mapper\nAuthentication\nCaching\n\nHTTP : Hypertext Transfer Protocol",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#features",
    "href": "nginx.html#features",
    "title": "Nginx",
    "section": "",
    "text": "Admin site\nObject-relational mapper\nAuthentication\nCaching\n\nHTTP : Hypertext Transfer Protocol",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#why-use-nginx-with-django",
    "href": "nginx.html#why-use-nginx-with-django",
    "title": "Nginx",
    "section": "Why Use Nginx with Django?",
    "text": "Why Use Nginx with Django?\n\nReverse Proxy: Nginx can serve as a reverse proxy, forwarding client requests to a Django application server and serving responses back to the client.\nStatic and Media File Handling: Nginx can serve static and media files more efficiently than Django‚Äôs built-in server.\nLoad Balancing: Nginx can distribute incoming traffic across multiple instances of your Django application.\nSecurity and Performance: Nginx can handle SSL/TLS termination, provide rate limiting, and improve overall performance through caching and compression.",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#installation",
    "href": "nginx.html#installation",
    "title": "Nginx",
    "section": "Installation",
    "text": "Installation\nsudo apt update\nsudo apt install nginx\n\nStart\nsudo systemctl start nginx\n\n\nStatus\nsudo systemctl status nginx\n\n\nStop\nsudo systemctl stop nginx\n\n\nReload\nsudo nginx -s reload",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#default-html-file-in",
    "href": "nginx.html#default-html-file-in",
    "title": "Nginx",
    "section": "Default html file in",
    "text": "Default html file in\ncd /var/www/html",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#nginx",
    "href": "nginx.html#nginx",
    "title": "Nginx",
    "section": "Nginx",
    "text": "Nginx\ncd /etc/nginx/sites-enables\n\nCreate a new configuration file for your Django project in /etc/nginx/sites-available/\nsudo nano /etc/nginx/sites-available/myproject\n\n\nAdd the following basic configuration\nserver {\n    listen 80;\n    server_name example.com www.example.com;  # Replace with your domain\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /path/to/your/static/files;  # Replace with your static files path\n    }\n\n    location /media/ {\n        root /path/to/your/media/files;  # Replace with your media files path\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/path/to/your/project.sock;  # Replace with your socket file path\n    }\n}\n\n\nserver_name: Replace with your domain name.\nroot: Set the paths to your static and media files.\nproxy_pass: This should point to your application server (e.g., Gunicorn) using a Unix socket or an IP address and port.\n\n\n\nLink the Configuration and Test Nginx\n\nLink your configuration file to the sites-enabled directory\n\nsudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#test-the-nginx-configuration-for-syntax-errors",
    "href": "nginx.html#test-the-nginx-configuration-for-syntax-errors",
    "title": "Nginx",
    "section": "Test the Nginx configuration for syntax errors",
    "text": "Test the Nginx configuration for syntax errors\nsudo nginx -t\n\nIf the test is successful, reload Nginx\nsudo systemctl reload nginx",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#serving-static-and-media-files",
    "href": "nginx.html#serving-static-and-media-files",
    "title": "Nginx",
    "section": "Serving Static and Media Files",
    "text": "Serving Static and Media Files\n\nFor production, Django doesn‚Äôt serve static files; Nginx handles them. Set up Django to collect all static files into a single directory\n\n\nIn settings.py\nSTATIC_URL = '/static/'\nSTATIC_ROOT = '/path/to/your/static/files'\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = '/path/to/your/media/files'\n\n\nRun the command to collect static files\npython manage.py collectstatic",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#using-gunicorn-with-nginx",
    "href": "nginx.html#using-gunicorn-with-nginx",
    "title": "Nginx",
    "section": "Using Gunicorn with Nginx",
    "text": "Using Gunicorn with Nginx\n\nGunicorn is a WSGI HTTP server for Python applications. To use Gunicorn with Nginx",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#securing-your-django-project-with-nginx",
    "href": "nginx.html#securing-your-django-project-with-nginx",
    "title": "Nginx",
    "section": "Securing Your Django Project with Nginx",
    "text": "Securing Your Django Project with Nginx\n\nSSL/TLS: Use Let‚Äôs Encrypt to obtain a free SSL/TLS certificate and configure Nginx to use HTTPS.\nSecurity Headers: Add security headers like Content-Security-Policy, X-Content-Type-Options, X-Frame-Options, and X-XSS-Protection to enhance security.\nRate Limiting: Implement rate limiting to protect your site from brute force attacks.",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#optimizing-performance",
    "href": "nginx.html#optimizing-performance",
    "title": "Nginx",
    "section": "Optimizing Performance",
    "text": "Optimizing Performance\n\nCaching: Use Nginx to cache static files and other resources.\nCompression: Enable gzip compression in Nginx to reduce the size of responses.",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "nginx.html#monitoring-and-logging",
    "href": "nginx.html#monitoring-and-logging",
    "title": "Nginx",
    "section": "Monitoring and Logging",
    "text": "Monitoring and Logging\n\nNginx provides extensive logging capabilities. Configure access and error logs for monitoring\n\naccess_log /var/log/nginx/myproject_access.log;\nerror_log /var/log/nginx/myproject_error.log;\n\n\nUsing Nginx with Django can significantly improve your project‚Äôs performance, scalability, and security. Make sure to test your configuration thoroughly before deploying it to production.",
    "crumbs": [
      "Blog",
      "Nginx"
    ]
  },
  {
    "objectID": "Front_end/React/react.html",
    "href": "Front_end/React/react.html",
    "title": "React + typescript",
    "section": "",
    "text": "need node version &gt;16 ==&gt; goto node for instructions",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React + typescript"
    ]
  },
  {
    "objectID": "Front_end/React/react.html#setup-using-vite",
    "href": "Front_end/React/react.html#setup-using-vite",
    "title": "React + typescript",
    "section": "Setup using vite",
    "text": "Setup using vite\nnpm create vite@4.1.0",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React + typescript"
    ]
  },
  {
    "objectID": "Front_end/React/react.html#settings",
    "href": "Front_end/React/react.html#settings",
    "title": "React + typescript",
    "section": "settings",
    "text": "settings\nProject name: ‚Ä¶ react-app\n‚úî Select a framework: ‚Ä∫ React\n‚úî Select a variant: ‚Ä∫ TypeScript",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React + typescript"
    ]
  },
  {
    "objectID": "Front_end/React/react.html#setup-react-app",
    "href": "Front_end/React/react.html#setup-react-app",
    "title": "React + typescript",
    "section": "Setup React app",
    "text": "Setup React app\ncd react-app\nnpm install",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React + typescript"
    ]
  },
  {
    "objectID": "Front_end/React/react.html#localhost",
    "href": "Front_end/React/react.html#localhost",
    "title": "React + typescript",
    "section": "Localhost",
    "text": "Localhost\nnpm run dev\nhttp://127.0.0.1:5173/",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React + typescript"
    ]
  },
  {
    "objectID": "Front_end/React/react.html#using-bootstrap",
    "href": "Front_end/React/react.html#using-bootstrap",
    "title": "React + typescript",
    "section": "Using Bootstrap",
    "text": "Using Bootstrap\n\ncss classes for rapid style\n\nnpm i bootstrap@5.2.3",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React + typescript"
    ]
  },
  {
    "objectID": "Front_end/React/react_native.html",
    "href": "Front_end/React/react_native.html",
    "title": "React-Native",
    "section": "",
    "text": "sudo npm  i -g expo-cli\nInstall expo app",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React-Native"
    ]
  },
  {
    "objectID": "Front_end/React/react_native.html#installation",
    "href": "Front_end/React/react_native.html#installation",
    "title": "React-Native",
    "section": "",
    "text": "sudo npm  i -g expo-cli\nInstall expo app",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React-Native"
    ]
  },
  {
    "objectID": "Front_end/React/react_native.html#starting-a-new-project",
    "href": "Front_end/React/react_native.html#starting-a-new-project",
    "title": "React-Native",
    "section": "Starting a new project",
    "text": "Starting a new project\nexpo init DoneWithIt",
    "crumbs": [
      "Blog",
      "Front End",
      "React",
      "React-Native"
    ]
  },
  {
    "objectID": "Front_end/gradio.html",
    "href": "Front_end/gradio.html",
    "title": "Gradio",
    "section": "",
    "text": "!pip list | grep gradio\n\ngradio                              4.27.0\ngradio_client                       0.15.1",
    "crumbs": [
      "Blog",
      "Front End",
      "Gradio"
    ]
  },
  {
    "objectID": "Front_end/gradio.html#basic-interface-text-slider---text",
    "href": "Front_end/gradio.html#basic-interface-text-slider---text",
    "title": "Gradio",
    "section": "Basic Interface: text, slider -> text",
    "text": "Basic Interface: text, slider -&gt; text\n\nimport gradio as gr\n\ndef greet(name, intensity):\n    return \"Hello, \" + name + \"!\" * int(intensity)\n\ndemo = gr.Interface(\n    fn=greet,\n    inputs=[\"text\", \"slider\"],\n    outputs=[\"text\"],\n)\n\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7860\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\ngr.Interface(\n    fn: 'Callable',\n    inputs: 'str | Component | list[str | Component] | None',\n    outputs: 'str | Component | list[str | Component] | None',\n    examples: 'list[Any] | list[list[Any]] | str | None' = None,\n    cache_examples: \"bool | Literal['lazy'] | None\" = None,\n    examples_per_page: 'int' = 10,\n    live: 'bool' = False,\n    title: 'str | None' = None,\n    description: 'str | None' = None,\n    article: 'str | None' = None,\n    thumbnail: 'str | None' = None,\n    theme: 'Theme | str | None' = None,\n    css: 'str | None' = None,\n    allow_flagging: \"Literal['never'] | Literal['auto'] | Literal['manual'] | None\" = None,\n    flagging_options: 'list[str] | list[tuple[str, str]] | None' = None,\n    flagging_dir: 'str' = 'flagged',\n    flagging_callback: 'FlaggingCallback | None' = None,\n    analytics_enabled: 'bool | None' = None,\n    batch: 'bool' = False,\n    max_batch_size: 'int' = 4,\n    api_name: 'str | Literal[False] | None' = 'predict',\n    _api_mode: 'bool' = False,\n    allow_duplication: 'bool' = False,\n    concurrency_limit: \"int | None | Literal['default']\" = 'default',\n    js: 'str | None' = None,\n    head: 'str | None' = None,\n    additional_inputs: 'str | Component | list[str | Component] | None' = None,\n    additional_inputs_accordion: 'str | Accordion | None' = None,\n    *,\n    submit_btn: 'str | Button' = 'Submit',\n    stop_btn: 'str | Button' = 'Stop',\n    clear_btn: 'str | Button' = 'Clear',\n    delete_cache: 'tuple[int, int] | None' = None,\n    **kwargs,\n)",
    "crumbs": [
      "Blog",
      "Front End",
      "Gradio"
    ]
  },
  {
    "objectID": "Front_end/gradio.html#image-output-slider---image",
    "href": "Front_end/gradio.html#image-output-slider---image",
    "title": "Gradio",
    "section": "Image output: slider -> image",
    "text": "Image output: slider -&gt; image\n\nimport gradio as gr\nimport numpy as np\nimport time\n\ndef fake_diffusion(steps):\n    rng = np.random.default_rng()\n    for i in range(steps):\n        time.sleep(1)\n        image = rng.random(size=(600, 600, 3))\n        yield image\n    image = np.ones((1000,1000,3), np.uint8)\n    image[:] = [255, 124, 0]\n    yield image\n\n\ndemo = gr.Interface(fake_diffusion,\n                    inputs=gr.Slider(1, 10, 3, step=1),\n                    outputs=\"image\")\n\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7861\n\nTo create a public link, set `share=True` in `launch()`.",
    "crumbs": [
      "Blog",
      "Front End",
      "Gradio"
    ]
  },
  {
    "objectID": "Front_end/gradio.html#progress-bar-text---text",
    "href": "Front_end/gradio.html#progress-bar-text---text",
    "title": "Gradio",
    "section": "Progress bar: text -> text",
    "text": "Progress bar: text -&gt; text\n\nimport gradio as gr\nimport time\n\ndef slowly_reverse(word, progress=gr.Progress()):\n    progress(0, desc=\"Starting\")\n    time.sleep(1)\n    progress(0.05)\n    new_string = \"\"\n    for letter in progress.tqdm(word, desc=\"Reversing\"):\n        time.sleep(0.25)\n        new_string = letter + new_string\n    return new_string\n\ndemo = gr.Interface(slowly_reverse, gr.Text(), gr.Text())\n\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7862\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\n\nimport gradio as gr\n\nsecret_word = \"gradio\"\n\nwith gr.Blocks() as demo:    \n    used_letters_var = gr.State([])\n    with gr.Row() as row:\n        with gr.Column():\n            input_letter = gr.Textbox(label=\"Enter letter\")\n            btn = gr.Button(\"Guess Letter\")\n        with gr.Column():\n            hangman = gr.Textbox(\n                label=\"Hangman\",\n                value=\"_\"*len(secret_word)\n            )\n            used_letters_box = gr.Textbox(label=\"Used Letters\")\n\n    def guess_letter(letter, used_letters):\n        used_letters.append(letter)\n        answer = \"\".join([\n            (letter if letter in used_letters else \"_\")\n            for letter in secret_word\n        ])\n        return {\n            used_letters_var: used_letters,\n            used_letters_box: \", \".join(used_letters),\n            hangman: answer\n        }\n    btn.click(\n        guess_letter, \n        [input_letter, used_letters_var],\n        [used_letters_var, used_letters_box, hangman]\n        )\ndemo.launch()\n\nRunning on local URL:  http://127.0.0.1:7863\n\nTo create a public link, set `share=True` in `launch()`.",
    "crumbs": [
      "Blog",
      "Front End",
      "Gradio"
    ]
  },
  {
    "objectID": "Front_end/gradio.html#audio-audio---audio",
    "href": "Front_end/gradio.html#audio-audio---audio",
    "title": "Gradio",
    "section": "Audio: audio -> audio",
    "text": "Audio: audio -&gt; audio\n\nimport gradio as gr\nfrom pydub import AudioSegment\nfrom time import sleep\n\nwith gr.Blocks() as demo:\n    input_audio = gr.Audio(label=\"Input Audio\", type=\"filepath\", format=\"mp3\")\n    with gr.Row():\n        with gr.Column():\n            stream_as_file_btn = gr.Button(\"Stream as File\")\n            format = gr.Radio([\"wav\", \"mp3\"], value=\"wav\", label=\"Format\")\n            stream_as_file_output = gr.Audio(streaming=True)\n\n            def stream_file(audio_file, format):\n                audio = AudioSegment.from_file(audio_file)\n                i = 0\n                chunk_size = 1000\n                while chunk_size * i &lt; len(audio):\n                    chunk = audio[chunk_size * i : chunk_size * (i + 1)]\n                    i += 1\n                    if chunk:\n                        file = f\"/tmp/{i}.{format}\"\n                        chunk.export(file, format=format)\n                        yield file\n                        sleep(0.5)\n\n            stream_as_file_btn.click(\n                stream_file, [input_audio, format], stream_as_file_output\n            )\n\n            gr.Examples(\n                [[\"audio/cantina.wav\", \"wav\"], [\"audio/cantina.wav\", \"mp3\"]],\n                [input_audio, format],\n                fn=stream_file,\n                outputs=stream_as_file_output,\n            )\n\n        with gr.Column():\n            stream_as_bytes_btn = gr.Button(\"Stream as Bytes\")\n            stream_as_bytes_output = gr.Audio(format=\"bytes\", streaming=True)\n\n            def stream_bytes(audio_file):\n                chunk_size = 20_000\n                with open(audio_file, \"rb\") as f:\n                    while True:\n                        chunk = f.read(chunk_size)\n                        if chunk:\n                            yield chunk\n                            sleep(1)\n                        else:\n                            break\n            stream_as_bytes_btn.click(stream_bytes, input_audio, stream_as_bytes_output)\n\nif __name__ == \"__main__\":\n    demo.queue().launch()\n\nRunning on local URL:  http://127.0.0.1:7865\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/queueing.py\", line 527, in process_events\n    response = await route_utils.call_process_api(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/route_utils.py\", line 261, in call_process_api\n    output = await app.get_blocks().process_api(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1784, in process_api\n    inputs = await self.preprocess_data(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1506, in preprocess_data\n    processed_input.append(block.preprocess(inputs_cached))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/components/audio.py\", line 231, in preprocess\n    processing_utils.audio_to_file(\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/processing_utils.py\", line 560, in audio_to_file\n    file = audio.export(filename, format=format)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/pydub/audio_segment.py\", line 970, in export\n    raise CouldntEncodeError(\npydub.exceptions.CouldntEncodeError: Encoding failed. ffmpeg/avlib returned error code: 127\n\nCommand:['ffmpeg', '-y', '-f', 'wav', '-i', '/tmp/tmplaiefr8j', '-f', 'mp3', '/tmp/tmpiojnrpsx']\n\nOutput from ffmpeg/avlib:\n\nffmpeg: error while loading shared libraries: libopenh264.so.5: cannot open shared object file: No such file or directory\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/queueing.py\", line 527, in process_events\n    response = await route_utils.call_process_api(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/route_utils.py\", line 261, in call_process_api\n    output = await app.get_blocks().process_api(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1784, in process_api\n    inputs = await self.preprocess_data(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1506, in preprocess_data\n    processed_input.append(block.preprocess(inputs_cached))\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/components/audio.py\", line 231, in preprocess\n    processing_utils.audio_to_file(\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/processing_utils.py\", line 560, in audio_to_file\n    file = audio.export(filename, format=format)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/pydub/audio_segment.py\", line 970, in export\n    raise CouldntEncodeError(\npydub.exceptions.CouldntEncodeError: Encoding failed. ffmpeg/avlib returned error code: 127\n\nCommand:['ffmpeg', '-y', '-f', 'wav', '-i', '/tmp/tmpuqq4b20d', '-f', 'mp3', '/tmp/tmphx041ptn']\n\nOutput from ffmpeg/avlib:\n\nffmpeg: error while loading shared libraries: libopenh264.so.5: cannot open shared object file: No such file or directory\n\n\n\n\nimport torch\n\nmodel = torch.hub.load('pytorch/vision:v0.6.0', 'resnet18', pretrained=True).eval()\n\nDownloading: \"https://github.com/pytorch/vision/zipball/v0.6.0\" to /home/ben/.cache/torch/hub/v0.6.0.zip\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\n\nimport requests\nfrom PIL import Image\nfrom torchvision import transforms\n\n# Download human-readable labels for ImageNet.\nresponse = requests.get(\"https://git.io/JJkYN\")\nlabels = response.text.split(\"\\n\")\n\ndef predict(inp):\n  inp = transforms.ToTensor()(inp).unsqueeze(0)\n  with torch.no_grad():\n    prediction = torch.nn.functional.softmax(model(inp)[0], dim=0)\n    confidences = {labels[i]: float(prediction[i]) for i in range(1000)}\n  return confidences\n\n\nimport gradio as gr\n\ngr.Interface(fn=predict,\n             inputs=gr.Image(type=\"pil\"),\n             outputs=gr.Label(num_top_classes=3),\n             examples=[\"tiger.jpg\", \"cheetah.jpg\"]).launch()\n\nRunning on local URL:  http://127.0.0.1:7869\n\nThanks for being a Gradio user! If you have questions or feedback, please join our Discord server and chat with us: https://discord.gg/feTf9x3ZSB\n\nTo create a public link, set `share=True` in `launch()`.\n\n\n\n\n\n\n\n\nTraceback (most recent call last):\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/queueing.py\", line 527, in process_events\n    response = await route_utils.call_process_api(\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/route_utils.py\", line 261, in call_process_api\n    output = await app.get_blocks().process_api(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1788, in process_api\n    result = await self.call_function(\n             ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/blocks.py\", line 1340, in call_function\n    prediction = await anyio.to_thread.run_sync(\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/anyio/to_thread.py\", line 33, in run_sync\n    return await get_asynclib().run_sync_in_worker_thread(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 877, in run_sync_in_worker_thread\n    return await future\n           ^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/anyio/_backends/_asyncio.py\", line 807, in run\n    result = context.run(func, *args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/gradio/utils.py\", line 759, in wrapper\n    response = f(*args, **kwargs)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/tmp/ipykernel_145374/855710716.py\", line 10, in predict\n    inp = transforms.ToTensor()(inp).unsqueeze(0)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/transforms/transforms.py\", line 137, in __call__\n    return F.to_tensor(pic)\n           ^^^^^^^^^^^^^^^^\n  File \"/home/ben/mambaforge/envs/cfast/lib/python3.11/site-packages/torchvision/transforms/functional.py\", line 140, in to_tensor\n    raise TypeError(f\"pic should be PIL Image or ndarray. Got {type(pic)}\")\nTypeError: pic should be PIL Image or ndarray. Got &lt;class 'NoneType'&gt;",
    "crumbs": [
      "Blog",
      "Front End",
      "Gradio"
    ]
  },
  {
    "objectID": "Front_end/Flutter/riverpod.html",
    "href": "Front_end/Flutter/riverpod.html",
    "title": "Riverpod",
    "section": "",
    "text": "Back to top",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Riverpod"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html",
    "href": "Front_end/Flutter/flutter_setup.html",
    "title": "Flutter Setup",
    "section": "",
    "text": "https://docs.flutter.dev/get-started/install/linux\n\nsudo snap install flutter --classic\nflutter sdk-path",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#install-flutter-in-wsl",
    "href": "Front_end/Flutter/flutter_setup.html#install-flutter-in-wsl",
    "title": "Flutter Setup",
    "section": "",
    "text": "https://docs.flutter.dev/get-started/install/linux\n\nsudo snap install flutter --classic\nflutter sdk-path",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#check-flutter-install-status",
    "href": "Front_end/Flutter/flutter_setup.html#check-flutter-install-status",
    "title": "Flutter Setup",
    "section": "Check FLutter install status",
    "text": "Check FLutter install status\nflutter doctor",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#install-android-studio-in-wsl",
    "href": "Front_end/Flutter/flutter_setup.html#install-android-studio-in-wsl",
    "title": "Flutter Setup",
    "section": "Install Android Studio in WSL",
    "text": "Install Android Studio in WSL\nInstall android studio linux tar gz file\n\n\n\nandroid.png\n\n\n\nInstall using snap\n\ninstall java if needed\n\nsudo apt install openjdk-18-jdk\n\nsudo snap install android-studio --classic\n\ncheck android studio status\n\nsnap list android-studio\n\nadd andriod sdk path to flutter\n\nflutter config --android-sdk ~/Android/Sdk/\n\n\nManually download and install\ngo into usr/local and unzip the tar gz file\ncd /usr/local/\ntar xf ~/Downloads/android-studio-version-number-linux.tar.gz\n\n\nRestart the computer\n\nRestart the computer\n\nwsl --update\nwsl --shutdown",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#running-android-studio",
    "href": "Front_end/Flutter/flutter_setup.html#running-android-studio",
    "title": "Flutter Setup",
    "section": "Running Android Studio",
    "text": "Running Android Studio\nandroid-studio\ncd /usr/local/\nandroid-studio/bin/studio.sh\nOpen Android Studio -&gt; More Actions -&gt; SDK manager -&gt; SDK Tools -&gt; Android SDK Command line\n\n\n\nsdk_manager.png\n\n\n\nConfigure Android\nStart Android Studio.\n\nThe Welcome to Android Studio dialog displays.\n\nFollow the Android Studio Setup Wizard.\n\nInstall the following components:\n    Android SDK Platform, API 33.0.0\n    Android SDK Command-line Tools\n    Android SDK Build-Tools\n    Android SDK Platform-Tools\n    Android Emulator\n\nTo fix android licencing\n\nflutter doctor --android-licenses",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#install-xming",
    "href": "Front_end/Flutter/flutter_setup.html#install-xming",
    "title": "Flutter Setup",
    "section": "Install Xming",
    "text": "Install Xming\n\nNeeded to render graphic applications\n\nsudo apt update\nsudo apt install x11-apps -y\n\nxeyes",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#install-chrome",
    "href": "Front_end/Flutter/flutter_setup.html#install-chrome",
    "title": "Flutter Setup",
    "section": "Install Chrome",
    "text": "Install Chrome\nsudo apt install -y chromium-browser",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#connect-phone",
    "href": "Front_end/Flutter/flutter_setup.html#connect-phone",
    "title": "Flutter Setup",
    "section": "Connect Phone",
    "text": "Connect Phone\n\nEnable Developer options\n\nSettings -&gt; About phone -&gt; Software Information -&gt; Build Number\n\n\n\nUSB debugging\n\nSettings -&gt; Developer Options -&gt; USB debugging && Wireless debugging",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/Flutter/flutter_setup.html#connect-phone-to-flutter-in-wsl",
    "href": "Front_end/Flutter/flutter_setup.html#connect-phone-to-flutter-in-wsl",
    "title": "Flutter Setup",
    "section": "Connect Phone to Flutter in WSL",
    "text": "Connect Phone to Flutter in WSL\n\nInstall adb in windows\n\nhttps://developer.android.com/tools/releases/platform-tools\n\nadd path to windows environment path variable\nC:\\Users\\bthek\\OneDrive\\Documents\\platform-tools\nCheck for device connected\nadb devices\nTry restarting adb if device doesn‚Äôt show up\nadb kill-server\nadb start-server\n\n\nOnce your device is connected via USB, run the following command to map the desired port to adb.\n\nadb tcpip 5555\nGo to wsl and run\nadb connnect &lt;ip&gt;:&lt;port&gt;\nExample:\nadb connect 192.168.1.4:5555",
    "crumbs": [
      "Blog",
      "Front End",
      "Flutter",
      "Flutter Setup"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html",
    "href": "Front_end/streamlit.html",
    "title": "Streamlit",
    "section": "",
    "text": "!pip list | grep streamlit\n\nstreamlit                           1.33.0",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#display-text",
    "href": "Front_end/streamlit.html#display-text",
    "title": "Streamlit",
    "section": "Display text",
    "text": "Display text\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nAttributeError: partially initialized module 'streamlit' has no attribute 'title' (most likely due to a circular import)\n\n\nst.text('Fixed width text')\nst.markdown('_Markdown_') # see #*\nst.caption('Balloons. Hundreds of them...')\nst.latex(r''' e^{i\\pi} + 1 = 0 ''')\nst.write('Most objects') # df, err, func, keras!\nst.write(['st', 'is &lt;', 3]) # see *\nst.title('My title')\nst.header('My header')\nst.subheader('My sub')\nst.code('for i in range(8): foo()')\n\n# * optional kwarg unsafe_allow_html = True",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#display-text-1",
    "href": "Front_end/streamlit.html#display-text-1",
    "title": "Streamlit",
    "section": "Display text",
    "text": "Display text\nst.dataframe(my_dataframe)\nst.table(data.iloc[0:10])\nst.json({'foo':'bar','fu':'ba'})\nst.metric(label=\"Temp\", value=\"273 K\", delta=\"1.2 K\")",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#display-media",
    "href": "Front_end/streamlit.html#display-media",
    "title": "Streamlit",
    "section": "Display media",
    "text": "Display media\nst.image('./header.png')\nst.audio(data)\nst.video(data)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#columns",
    "href": "Front_end/streamlit.html#columns",
    "title": "Streamlit",
    "section": "Columns",
    "text": "Columns\ncol1, col2 = st.columns(2)\ncol1.write('Column 1')\ncol2.write('Column 2')\n\n# Three columns with different widths\ncol1, col2, col3 = st.columns([3,1,1])\n# col1 is wider\n\n# Using 'with' notation:\n&gt;&gt;&gt; with col1:\n&gt;&gt;&gt;     st.write('This is column 1')",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#tabs",
    "href": "Front_end/streamlit.html#tabs",
    "title": "Streamlit",
    "section": "Tabs",
    "text": "Tabs\n# Insert containers separated into tabs:\n&gt;&gt;&gt; tab1, tab2 = st.tabs([\"Tab 1\", \"Tab2\"])\n&gt;&gt;&gt; tab1.write(\"this is tab 1\")\n&gt;&gt;&gt; tab2.write(\"this is tab 2\")\n\n# You can also use \"with\" notation:\n&gt;&gt;&gt; with tab1:\n&gt;&gt;&gt;   st.radio('Select one:', [1, 2])",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#control-flow",
    "href": "Front_end/streamlit.html#control-flow",
    "title": "Streamlit",
    "section": "Control flow",
    "text": "Control flow\n# Stop execution immediately:\nst.stop()\n# Rerun script immediately:\nst.experimental_rerun()\n\n# Group multiple widgets:\n&gt;&gt;&gt; with st.form(key='my_form'):\n&gt;&gt;&gt;   username = st.text_input('Username')\n&gt;&gt;&gt;   password = st.text_input('Password')\n&gt;&gt;&gt;   st.form_submit_button('Login')",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#personalize-apps-for-users",
    "href": "Front_end/streamlit.html#personalize-apps-for-users",
    "title": "Streamlit",
    "section": "Personalize apps for users",
    "text": "Personalize apps for users\n# Show different content based on the user's email address.\n&gt;&gt;&gt; if st.user.email == 'jane@email.com':\n&gt;&gt;&gt;    display_jane_content()\n&gt;&gt;&gt; elif st.user.email == 'adam@foocorp.io':\n&gt;&gt;&gt;    display_adam_content()\n&gt;&gt;&gt; else:\n&gt;&gt;&gt;    st.write(\"Please contact us to get access!\")",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#display-interactive-widgets",
    "href": "Front_end/streamlit.html#display-interactive-widgets",
    "title": "Streamlit",
    "section": "Display interactive widgets",
    "text": "Display interactive widgets\nst.button('Hit me')\nst.data_editor('Edit data', data)\nst.checkbox('Check me out')\nst.radio('Pick one:', ['nose','ear'])\nst.selectbox('Select', [1,2,3])\nst.multiselect('Multiselect', [1,2,3])\nst.slider('Slide me', min_value=0, max_value=10)\nst.select_slider('Slide to select', options=[1,'2'])\nst.text_input('Enter some text')\nst.number_input('Enter a number')\nst.text_area('Area for textual entry')\nst.date_input('Date input')\nst.time_input('Time entry')\nst.file_uploader('File uploader')\nst.download_button('On the dl', data)\nst.camera_input(\"‰∏Ä‰∫å‰∏â,ËåÑÂ≠ê!\")\nst.color_picker('Pick a color')\n# Use widgets' returned values in variables\n&gt;&gt;&gt; for i in range(int(st.number_input('Num:'))): foo()\n&gt;&gt;&gt; if st.sidebar.selectbox('I:',['f']) == 'f': b()\n&gt;&gt;&gt; my_slider_val = st.slider('Quinn Mallory', 1, 88)\n&gt;&gt;&gt; st.write(slider_val)\n# Disable widgets to remove interactivity:\n&gt;&gt;&gt; st.slider('Pick a number', 0, 100, disabled=True)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#build-chat-based-apps",
    "href": "Front_end/streamlit.html#build-chat-based-apps",
    "title": "Streamlit",
    "section": "Build chat-based apps",
    "text": "Build chat-based apps\n# Insert a chat message container.\n&gt;&gt;&gt; with st.chat_message(\"user\"):\n&gt;&gt;&gt;    st.write(\"Hello üëã\")\n&gt;&gt;&gt;    st.line_chart(np.random.randn(30, 3))\n\n# Display a chat input widget.\n&gt;&gt;&gt; st.chat_input(\"Say something\")",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#mutate-data",
    "href": "Front_end/streamlit.html#mutate-data",
    "title": "Streamlit",
    "section": "Mutate data",
    "text": "Mutate data\n# Add rows to a dataframe after\n# showing it.\n&gt;&gt;&gt; element = st.dataframe(df1)\n&gt;&gt;&gt; element.add_rows(df2)\n\n# Add rows to a chart after\n# showing it.\n&gt;&gt;&gt; element = st.line_chart(df1)\n&gt;&gt;&gt; element.add_rows(df2)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#display-code",
    "href": "Front_end/streamlit.html#display-code",
    "title": "Streamlit",
    "section": "Display code",
    "text": "Display code\nst.echo()\n&gt;&gt;&gt; with st.echo():\n&gt;&gt;&gt;     st.write('Code will be executed and printed')",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#placeholders-help-and-options",
    "href": "Front_end/streamlit.html#placeholders-help-and-options",
    "title": "Streamlit",
    "section": "Placeholders, help, and options",
    "text": "Placeholders, help, and options\n# Replace any single element.\n&gt;&gt;&gt; element = st.empty()\n&gt;&gt;&gt; element.line_chart(...)\n&gt;&gt;&gt; element.text_input(...)  # Replaces previous.\n\n# Insert out of order.\n&gt;&gt;&gt; elements = st.container()\n&gt;&gt;&gt; elements.line_chart(...)\n&gt;&gt;&gt; st.write(\"Hello\")\n&gt;&gt;&gt; elements.text_input(...)  # Appears above \"Hello\".\n\nst.help(pandas.DataFrame)\nst.get_option(key)\nst.set_option(key, value)\nst.set_page_config(layout='wide')\nst.experimental_show(objects)\nst.experimental_get_query_params()\nst.experimental_set_query_params(**params)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#connect-to-data-sources",
    "href": "Front_end/streamlit.html#connect-to-data-sources",
    "title": "Streamlit",
    "section": "Connect to data sources",
    "text": "Connect to data sources\nst.experimental_connection('pets_db', type='sql')\nconn = st.experimental_connection('sql')\nconn = st.experimental_connection('snowpark')\n\n&gt;&gt;&gt; class MyConnection(ExperimentalBaseConnection[myconn.MyConnection]):\n&gt;&gt;&gt;    def _connect(self, **kwargs) -&gt; MyConnection:\n&gt;&gt;&gt;        return myconn.connect(**self._secrets, **kwargs)\n&gt;&gt;&gt;    def query(self, query):\n&gt;&gt;&gt;       return self._instance.query(query)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#optimize-performance",
    "href": "Front_end/streamlit.html#optimize-performance",
    "title": "Streamlit",
    "section": "Optimize performance",
    "text": "Optimize performance\n# E.g. Dataframe computation, storing downloaded data, etc.\n&gt;&gt;&gt; @st.cache_data\n... def foo(bar):\n...   # Do something expensive and return data\n...   return data\n# Executes foo\n&gt;&gt;&gt; d1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by value, d1 == d2\n&gt;&gt;&gt; d2 = foo(ref1)\n# Different arg, so function foo executes\n&gt;&gt;&gt; d3 = foo(ref2)\n# Clear all cached entries for this function\n&gt;&gt;&gt; foo.clear()\n# Clear values from *all* in-memory or on-disk cached functions\n&gt;&gt;&gt; st.cache_data.clear()",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#cache-global-resources",
    "href": "Front_end/streamlit.html#cache-global-resources",
    "title": "Streamlit",
    "section": "Cache global resources",
    "text": "Cache global resources\n# E.g. TensorFlow session, database connection, etc.\n&gt;&gt;&gt; @st.cache_resource\n... def foo(bar):\n...   # Create and return a non-data object\n...   return session\n# Executes foo\n&gt;&gt;&gt; s1 = foo(ref1)\n# Does not execute foo\n# Returns cached item by reference, s1 == s2\n&gt;&gt;&gt; s2 = foo(ref1)\n# Different arg, so function foo executes\n&gt;&gt;&gt; s3 = foo(ref2)\n# Clear all cached entries for this function\n&gt;&gt;&gt; foo.clear()\n# Clear all global resources from cache\n&gt;&gt;&gt; st.cache_resource.clear()",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#deprecated-caching",
    "href": "Front_end/streamlit.html#deprecated-caching",
    "title": "Streamlit",
    "section": "Deprecated caching",
    "text": "Deprecated caching\n&gt;&gt;&gt; @st.cache\n... def foo(bar):\n...   # Do something expensive in here...\n...   return data\n&gt;&gt;&gt; # Executes foo\n&gt;&gt;&gt; d1 = foo(ref1)\n&gt;&gt;&gt; # Does not execute foo\n&gt;&gt;&gt; # Returns cached item by reference, d1 == d2\n&gt;&gt;&gt; d2 = foo(ref1)\n&gt;&gt;&gt; # Different arg, so function foo executes\n&gt;&gt;&gt; d3 = foo(ref2)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#display-progress-and-status",
    "href": "Front_end/streamlit.html#display-progress-and-status",
    "title": "Streamlit",
    "section": "Display progress and status",
    "text": "Display progress and status\n# Show a spinner during a process\n&gt;&gt;&gt; with st.spinner(text='In progress'):\n&gt;&gt;&gt;   time.sleep(3)\n&gt;&gt;&gt;   st.success('Done')\n\n# Show and update progress bar\n&gt;&gt;&gt; bar = st.progress(50)\n&gt;&gt;&gt; time.sleep(3)\n&gt;&gt;&gt; bar.progress(100)\n\nst.balloons()\nst.snow()\nst.toast('Mr Stay-Puft')\nst.error('Error message')\nst.warning('Warning message')\nst.info('Info message')\nst.success('Success message')\nst.exception(e)",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  },
  {
    "objectID": "Front_end/streamlit.html#examples",
    "href": "Front_end/streamlit.html#examples",
    "title": "Streamlit",
    "section": "Examples",
    "text": "Examples\n\n!cat streamlit.py\n\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.title('Uber pickups in NYC')\n\nDATE_COLUMN = 'date/time'\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\n\n@st.cache_data\ndef load_data(nrows):\n    data = pd.read_csv(DATA_URL, nrows=nrows)\n    lowercase = lambda x: str(x).lower()\n    data.rename(lowercase, axis='columns', inplace=True)\n    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\n    return data\n\ndata_load_state = st.text('Loading data...')\ndata = load_data(10000)\ndata_load_state.text(\"Done! (using st.cache_data)\")\n\nif st.checkbox('Show raw data'):\n    st.subheader('Raw data')\n    st.write(data)\n\nst.subheader('Number of pickups by hour')\nhist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\nst.bar_chart(hist_values)\n\n# Some number in the range 0-23\nhour_to_filter = st.slider('hour', 0, 23, 17)\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\n\nst.subheader('Map of all pickups at %s:00' % hour_to_filter)\nst.map(filtered_data)\n\n\n\n!cat Streamlit_app/Hello.py\n\nimport streamlit as st\n\nst.set_page_config(\n    page_title=\"Hello\",\n    page_icon=\"üëã\",\n)\n\nst.write(\"# Welcome to Streamlit! üëã\")\n\nst.sidebar.success(\"Select a demo above.\")\n\nst.markdown(\n    \"\"\"\n    Streamlit is an open-source app framework built specifically for\n    Machine Learning and Data Science projects.\n    **üëà Select a demo from the sidebar** to see some examples\n    of what Streamlit can do!\n    ### Want to learn more?\n    - Check out [streamlit.io](https://streamlit.io)\n    - Jump into our [documentation](https://docs.streamlit.io)\n    - Ask a question in our [community\n        forums](https://discuss.streamlit.io)\n    ### See more complex demos\n    - Use a neural net to [analyze the Udacity Self-driving Car Image\n        Dataset](https://github.com/streamlit/demo-self-driving)\n    - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)\n\"\"\"\n)\n\n\n\n!cat Streamlit_app/pages/1_Plotting_Demo.py\n\nimport streamlit as st\nimport time\nimport numpy as np\n\nst.set_page_config(page_title=\"Plotting Demo\", page_icon=\"üìà\")\n\nst.markdown(\"# Plotting Demo\")\nst.sidebar.header(\"Plotting Demo\")\nst.write(\n    \"\"\"This demo illustrates a combination of plotting and animation with\nStreamlit. We're generating a bunch of random numbers in a loop for around\n5 seconds. Enjoy!\"\"\"\n)\n\nprogress_bar = st.sidebar.progress(0)\nstatus_text = st.sidebar.empty()\nlast_rows = np.random.randn(1, 1)\nchart = st.line_chart(last_rows)\n\nfor i in range(1, 101):\n    new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)\n    status_text.text(\"%i%% Complete\" % i)\n    chart.add_rows(new_rows)\n    progress_bar.progress(i)\n    last_rows = new_rows\n    time.sleep(0.05)\n\nprogress_bar.empty()\n\n# Streamlit widgets automatically run the script from top to bottom. Since\n# this button is not connected to any other logic, it just causes a plain\n# rerun.\nst.button(\"Re-run\")\n\n\n\n!cat Streamlit_app/pages/2_Mapping_Demo.py\n\nimport streamlit as st\nimport pandas as pd\nimport pydeck as pdk\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"Mapping Demo\", page_icon=\"üåç\")\n\nst.markdown(\"# Mapping Demo\")\nst.sidebar.header(\"Mapping Demo\")\nst.write(\n    \"\"\"This demo shows how to use\n[`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart)\nto display geospatial data.\"\"\"\n)\n\n\n@st.cache_data\ndef from_data_file(filename):\n    url = (\n        \"http://raw.githubusercontent.com/streamlit/\"\n        \"example-data/master/hello/v1/%s\" % filename\n    )\n    return pd.read_json(url)\n\n\ntry:\n    ALL_LAYERS = {\n        \"Bike Rentals\": pdk.Layer(\n            \"HexagonLayer\",\n            data=from_data_file(\"bike_rental_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            radius=200,\n            elevation_scale=4,\n            elevation_range=[0, 1000],\n            extruded=True,\n        ),\n        \"Bart Stop Exits\": pdk.Layer(\n            \"ScatterplotLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_color=[200, 30, 0, 160],\n            get_radius=\"[exits]\",\n            radius_scale=0.05,\n        ),\n        \"Bart Stop Names\": pdk.Layer(\n            \"TextLayer\",\n            data=from_data_file(\"bart_stop_stats.json\"),\n            get_position=[\"lon\", \"lat\"],\n            get_text=\"name\",\n            get_color=[0, 0, 0, 200],\n            get_size=15,\n            get_alignment_baseline=\"'bottom'\",\n        ),\n        \"Outbound Flow\": pdk.Layer(\n            \"ArcLayer\",\n            data=from_data_file(\"bart_path_stats.json\"),\n            get_source_position=[\"lon\", \"lat\"],\n            get_target_position=[\"lon2\", \"lat2\"],\n            get_source_color=[200, 30, 0, 160],\n            get_target_color=[200, 30, 0, 160],\n            auto_highlight=True,\n            width_scale=0.0001,\n            get_width=\"outbound\",\n            width_min_pixels=3,\n            width_max_pixels=30,\n        ),\n    }\n    st.sidebar.markdown(\"### Map Layers\")\n    selected_layers = [\n        layer\n        for layer_name, layer in ALL_LAYERS.items()\n        if st.sidebar.checkbox(layer_name, True)\n    ]\n    if selected_layers:\n        st.pydeck_chart(\n            pdk.Deck(\n                map_style=\"mapbox://styles/mapbox/light-v9\",\n                initial_view_state={\n                    \"latitude\": 37.76,\n                    \"longitude\": -122.4,\n                    \"zoom\": 11,\n                    \"pitch\": 50,\n                },\n                layers=selected_layers,\n            )\n        )\n    else:\n        st.error(\"Please choose at least one layer above.\")\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )\n\n\n\n!cat Streamlit_app/pages/3_DataFrame_Demo.py\n\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nfrom urllib.error import URLError\n\nst.set_page_config(page_title=\"DataFrame Demo\", page_icon=\"üìä\")\n\nst.markdown(\"# DataFrame Demo\")\nst.sidebar.header(\"DataFrame Demo\")\nst.write(\n    \"\"\"This demo shows how to use `st.write` to visualize Pandas DataFrames.\n(Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).)\"\"\"\n)\n\n\n@st.cache_data\ndef get_UN_data():\n    AWS_BUCKET_URL = \"http://streamlit-demo-data.s3-us-west-2.amazonaws.com\"\n    df = pd.read_csv(AWS_BUCKET_URL + \"/agri.csv.gz\")\n    return df.set_index(\"Region\")\n\n\ntry:\n    df = get_UN_data()\n    countries = st.multiselect(\n        \"Choose countries\", list(df.index), [\"China\", \"United States of America\"]\n    )\n    if not countries:\n        st.error(\"Please select at least one country.\")\n    else:\n        data = df.loc[countries]\n        data /= 1000000.0\n        st.write(\"### Gross Agricultural Production ($B)\", data.sort_index())\n\n        data = data.T.reset_index()\n        data = pd.melt(data, id_vars=[\"index\"]).rename(\n            columns={\"index\": \"year\", \"value\": \"Gross Agricultural Product ($B)\"}\n        )\n        chart = (\n            alt.Chart(data)\n            .mark_area(opacity=0.3)\n            .encode(\n                x=\"year:T\",\n                y=alt.Y(\"Gross Agricultural Product ($B):Q\", stack=None),\n                color=\"Region:N\",\n            )\n        )\n        st.altair_chart(chart, use_container_width=True)\nexcept URLError as e:\n    st.error(\n        \"\"\"\n        **This demo requires internet access.**\n        Connection error: %s\n    \"\"\"\n        % e.reason\n    )",
    "crumbs": [
      "Blog",
      "Front End",
      "Streamlit"
    ]
  }
]